// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace pb_types {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class LogFile;
class LogFileDefaultTypeInternal;
extern LogFileDefaultTypeInternal _LogFile_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
}  // namespace pb_types
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_types::Frame* Arena::CreateMaybeMessage<::pb_types::Frame>(Arena*);
template<> ::pb_types::LogFile* Arena::CreateMaybeMessage<::pb_types::LogFile>(Arena*);
template<> ::pb_types::Obstacle* Arena::CreateMaybeMessage<::pb_types::Obstacle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_types {

// ===================================================================

class LogFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.LogFile) */ {
 public:
  LogFile();
  virtual ~LogFile();

  LogFile(const LogFile& from);
  LogFile(LogFile&& from) noexcept
    : LogFile() {
    *this = ::std::move(from);
  }

  inline LogFile& operator=(const LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogFile& operator=(LogFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogFile* internal_default_instance() {
    return reinterpret_cast<const LogFile*>(
               &_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogFile& a, LogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LogFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogFile* New() const final {
    return CreateMaybeMessage<LogFile>(nullptr);
  }

  LogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogFile& from);
  void MergeFrom(const LogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.LogFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kFrameNumFieldNumber = 1,
  };
  // repeated .pb_types.Frame frame = 2;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::pb_types::Frame* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >*
      mutable_frame();
  private:
  const ::pb_types::Frame& _internal_frame(int index) const;
  ::pb_types::Frame* _internal_add_frame();
  public:
  const ::pb_types::Frame& frame(int index) const;
  ::pb_types::Frame* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >&
      frame() const;

  // int32 frame_num = 1;
  void clear_frame_num();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_num() const;
  void set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_num() const;
  void _internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.LogFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame > frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .pb_types.Obstacle obstacle = 2;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::pb_types::Obstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >*
      mutable_obstacle();
  private:
  const ::pb_types::Obstacle& _internal_obstacle(int index) const;
  ::pb_types::Obstacle* _internal_add_obstacle();
  public:
  const ::pb_types::Obstacle& obstacle(int index) const;
  ::pb_types::Obstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >&
      obstacle() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Obstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.Obstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kRelSpdXFieldNumber = 5,
    kRelSpdYFieldNumber = 6,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pos_x = 3;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float rel_spd_x = 5;
  void clear_rel_spd_x();
  float rel_spd_x() const;
  void set_rel_spd_x(float value);
  private:
  float _internal_rel_spd_x() const;
  void _internal_set_rel_spd_x(float value);
  public:

  // float rel_spd_y = 6;
  void clear_rel_spd_y();
  float rel_spd_y() const;
  void set_rel_spd_y(float value);
  private:
  float _internal_rel_spd_y() const;
  void _internal_set_rel_spd_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.Obstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float pos_x_;
  float pos_y_;
  float rel_spd_x_;
  float rel_spd_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogFile

// int32 frame_num = 1;
inline void LogFile::clear_frame_num() {
  frame_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::_internal_frame_num() const {
  return frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::frame_num() const {
  // @@protoc_insertion_point(field_get:pb_types.LogFile.frame_num)
  return _internal_frame_num();
}
inline void LogFile::_internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_num_ = value;
}
inline void LogFile::set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:pb_types.LogFile.frame_num)
}

// repeated .pb_types.Frame frame = 2;
inline int LogFile::_internal_frame_size() const {
  return frame_.size();
}
inline int LogFile::frame_size() const {
  return _internal_frame_size();
}
inline void LogFile::clear_frame() {
  frame_.Clear();
}
inline ::pb_types::Frame* LogFile::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:pb_types.LogFile.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >*
LogFile::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:pb_types.LogFile.frame)
  return &frame_;
}
inline const ::pb_types::Frame& LogFile::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::pb_types::Frame& LogFile::frame(int index) const {
  // @@protoc_insertion_point(field_get:pb_types.LogFile.frame)
  return _internal_frame(index);
}
inline ::pb_types::Frame* LogFile::_internal_add_frame() {
  return frame_.Add();
}
inline ::pb_types::Frame* LogFile::add_frame() {
  // @@protoc_insertion_point(field_add:pb_types.LogFile.frame)
  return _internal_add_frame();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >&
LogFile::frame() const {
  // @@protoc_insertion_point(field_list:pb_types.LogFile.frame)
  return frame_;
}

// -------------------------------------------------------------------

// Frame

// int32 id = 1;
inline void Frame::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::id() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.id)
  return _internal_id();
}
inline void Frame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Frame::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_types.Frame.id)
}

// repeated .pb_types.Obstacle obstacle = 2;
inline int Frame::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int Frame::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void Frame::clear_obstacle() {
  obstacle_.Clear();
}
inline ::pb_types::Obstacle* Frame::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >*
Frame::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:pb_types.Frame.obstacle)
  return &obstacle_;
}
inline const ::pb_types::Obstacle& Frame::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::pb_types::Obstacle& Frame::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.obstacle)
  return _internal_obstacle(index);
}
inline ::pb_types::Obstacle* Frame::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::pb_types::Obstacle* Frame::add_obstacle() {
  // @@protoc_insertion_point(field_add:pb_types.Frame.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >&
Frame::obstacle() const {
  // @@protoc_insertion_point(field_list:pb_types.Frame.obstacle)
  return obstacle_;
}

// -------------------------------------------------------------------

// Obstacle

// int32 id = 1;
inline void Obstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.id)
  return _internal_id();
}
inline void Obstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.id)
}

// int32 type = 2;
inline void Obstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::type() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.type)
  return _internal_type();
}
inline void Obstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Obstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.type)
}

// float pos_x = 3;
inline void Obstacle::clear_pos_x() {
  pos_x_ = 0;
}
inline float Obstacle::_internal_pos_x() const {
  return pos_x_;
}
inline float Obstacle::pos_x() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.pos_x)
  return _internal_pos_x();
}
inline void Obstacle::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Obstacle::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.pos_x)
}

// float pos_y = 4;
inline void Obstacle::clear_pos_y() {
  pos_y_ = 0;
}
inline float Obstacle::_internal_pos_y() const {
  return pos_y_;
}
inline float Obstacle::pos_y() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.pos_y)
  return _internal_pos_y();
}
inline void Obstacle::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Obstacle::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.pos_y)
}

// float rel_spd_x = 5;
inline void Obstacle::clear_rel_spd_x() {
  rel_spd_x_ = 0;
}
inline float Obstacle::_internal_rel_spd_x() const {
  return rel_spd_x_;
}
inline float Obstacle::rel_spd_x() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.rel_spd_x)
  return _internal_rel_spd_x();
}
inline void Obstacle::_internal_set_rel_spd_x(float value) {
  
  rel_spd_x_ = value;
}
inline void Obstacle::set_rel_spd_x(float value) {
  _internal_set_rel_spd_x(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.rel_spd_x)
}

// float rel_spd_y = 6;
inline void Obstacle::clear_rel_spd_y() {
  rel_spd_y_ = 0;
}
inline float Obstacle::_internal_rel_spd_y() const {
  return rel_spd_y_;
}
inline float Obstacle::rel_spd_y() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.rel_spd_y)
  return _internal_rel_spd_y();
}
inline void Obstacle::_internal_set_rel_spd_y(float value) {
  
  rel_spd_y_ = value;
}
inline void Obstacle::set_rel_spd_y(float value) {
  _internal_set_rel_spd_y(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.rel_spd_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_types

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
