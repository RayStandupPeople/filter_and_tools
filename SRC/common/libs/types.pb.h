// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace pb_types {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class HDMapInfo;
class HDMapInfoDefaultTypeInternal;
extern HDMapInfoDefaultTypeInternal _HDMapInfo_default_instance_;
class Locallization;
class LocallizationDefaultTypeInternal;
extern LocallizationDefaultTypeInternal _Locallization_default_instance_;
class LogFile;
class LogFileDefaultTypeInternal;
extern LogFileDefaultTypeInternal _LogFile_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class StatusMachine;
class StatusMachineDefaultTypeInternal;
extern StatusMachineDefaultTypeInternal _StatusMachine_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class VehicleSts;
class VehicleStsDefaultTypeInternal;
extern VehicleStsDefaultTypeInternal _VehicleSts_default_instance_;
}  // namespace pb_types
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_types::Frame* Arena::CreateMaybeMessage<::pb_types::Frame>(Arena*);
template<> ::pb_types::HDMapInfo* Arena::CreateMaybeMessage<::pb_types::HDMapInfo>(Arena*);
template<> ::pb_types::Locallization* Arena::CreateMaybeMessage<::pb_types::Locallization>(Arena*);
template<> ::pb_types::LogFile* Arena::CreateMaybeMessage<::pb_types::LogFile>(Arena*);
template<> ::pb_types::Obstacle* Arena::CreateMaybeMessage<::pb_types::Obstacle>(Arena*);
template<> ::pb_types::StatusMachine* Arena::CreateMaybeMessage<::pb_types::StatusMachine>(Arena*);
template<> ::pb_types::UserInfo* Arena::CreateMaybeMessage<::pb_types::UserInfo>(Arena*);
template<> ::pb_types::VehicleSts* Arena::CreateMaybeMessage<::pb_types::VehicleSts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_types {

// ===================================================================

class LogFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.LogFile) */ {
 public:
  LogFile();
  virtual ~LogFile();

  LogFile(const LogFile& from);
  LogFile(LogFile&& from) noexcept
    : LogFile() {
    *this = ::std::move(from);
  }

  inline LogFile& operator=(const LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogFile& operator=(LogFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogFile* internal_default_instance() {
    return reinterpret_cast<const LogFile*>(
               &_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogFile& a, LogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LogFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogFile* New() const final {
    return CreateMaybeMessage<LogFile>(nullptr);
  }

  LogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogFile& from);
  void MergeFrom(const LogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.LogFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kFrameNumFieldNumber = 1,
  };
  // repeated .pb_types.Frame frame = 2;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::pb_types::Frame* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >*
      mutable_frame();
  private:
  const ::pb_types::Frame& _internal_frame(int index) const;
  ::pb_types::Frame* _internal_add_frame();
  public:
  const ::pb_types::Frame& frame(int index) const;
  ::pb_types::Frame* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >&
      frame() const;

  // int32 frame_num = 1;
  void clear_frame_num();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_num() const;
  void set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_num() const;
  void _internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.LogFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame > frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
    kLocalizationFieldNumber = 3,
    kHdmapinfoFieldNumber = 4,
    kVehiclestsFieldNumber = 5,
    kStatusmachineFieldNumber = 6,
    kUserinfoFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // repeated .pb_types.Obstacle obstacle = 2;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::pb_types::Obstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >*
      mutable_obstacle();
  private:
  const ::pb_types::Obstacle& _internal_obstacle(int index) const;
  ::pb_types::Obstacle* _internal_add_obstacle();
  public:
  const ::pb_types::Obstacle& obstacle(int index) const;
  ::pb_types::Obstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >&
      obstacle() const;

  // .pb_types.Locallization localization = 3;
  bool has_localization() const;
  private:
  bool _internal_has_localization() const;
  public:
  void clear_localization();
  const ::pb_types::Locallization& localization() const;
  ::pb_types::Locallization* release_localization();
  ::pb_types::Locallization* mutable_localization();
  void set_allocated_localization(::pb_types::Locallization* localization);
  private:
  const ::pb_types::Locallization& _internal_localization() const;
  ::pb_types::Locallization* _internal_mutable_localization();
  public:

  // .pb_types.HDMapInfo hdmapinfo = 4;
  bool has_hdmapinfo() const;
  private:
  bool _internal_has_hdmapinfo() const;
  public:
  void clear_hdmapinfo();
  const ::pb_types::HDMapInfo& hdmapinfo() const;
  ::pb_types::HDMapInfo* release_hdmapinfo();
  ::pb_types::HDMapInfo* mutable_hdmapinfo();
  void set_allocated_hdmapinfo(::pb_types::HDMapInfo* hdmapinfo);
  private:
  const ::pb_types::HDMapInfo& _internal_hdmapinfo() const;
  ::pb_types::HDMapInfo* _internal_mutable_hdmapinfo();
  public:

  // .pb_types.VehicleSts vehiclests = 5;
  bool has_vehiclests() const;
  private:
  bool _internal_has_vehiclests() const;
  public:
  void clear_vehiclests();
  const ::pb_types::VehicleSts& vehiclests() const;
  ::pb_types::VehicleSts* release_vehiclests();
  ::pb_types::VehicleSts* mutable_vehiclests();
  void set_allocated_vehiclests(::pb_types::VehicleSts* vehiclests);
  private:
  const ::pb_types::VehicleSts& _internal_vehiclests() const;
  ::pb_types::VehicleSts* _internal_mutable_vehiclests();
  public:

  // .pb_types.StatusMachine statusmachine = 6;
  bool has_statusmachine() const;
  private:
  bool _internal_has_statusmachine() const;
  public:
  void clear_statusmachine();
  const ::pb_types::StatusMachine& statusmachine() const;
  ::pb_types::StatusMachine* release_statusmachine();
  ::pb_types::StatusMachine* mutable_statusmachine();
  void set_allocated_statusmachine(::pb_types::StatusMachine* statusmachine);
  private:
  const ::pb_types::StatusMachine& _internal_statusmachine() const;
  ::pb_types::StatusMachine* _internal_mutable_statusmachine();
  public:

  // .pb_types.UserInfo userinfo = 7;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::pb_types::UserInfo& userinfo() const;
  ::pb_types::UserInfo* release_userinfo();
  ::pb_types::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::pb_types::UserInfo* userinfo);
  private:
  const ::pb_types::UserInfo& _internal_userinfo() const;
  ::pb_types::UserInfo* _internal_mutable_userinfo();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle > obstacle_;
  ::pb_types::Locallization* localization_;
  ::pb_types::HDMapInfo* hdmapinfo_;
  ::pb_types::VehicleSts* vehiclests_;
  ::pb_types::StatusMachine* statusmachine_;
  ::pb_types::UserInfo* userinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Locallization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.Locallization) */ {
 public:
  Locallization();
  virtual ~Locallization();

  Locallization(const Locallization& from);
  Locallization(Locallization&& from) noexcept
    : Locallization() {
    *this = ::std::move(from);
  }

  inline Locallization& operator=(const Locallization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Locallization& operator=(Locallization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Locallization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Locallization* internal_default_instance() {
    return reinterpret_cast<const Locallization*>(
               &_Locallization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Locallization& a, Locallization& b) {
    a.Swap(&b);
  }
  inline void Swap(Locallization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Locallization* New() const final {
    return CreateMaybeMessage<Locallization>(nullptr);
  }

  Locallization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Locallization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Locallization& from);
  void MergeFrom(const Locallization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Locallization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.Locallization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kLatRestXFieldNumber = 3,
    kLonRestYFieldNumber = 4,
  };
  // float lat = 1;
  void clear_lat();
  float lat() const;
  void set_lat(float value);
  private:
  float _internal_lat() const;
  void _internal_set_lat(float value);
  public:

  // float lon = 2;
  void clear_lon();
  float lon() const;
  void set_lon(float value);
  private:
  float _internal_lon() const;
  void _internal_set_lon(float value);
  public:

  // float latRest_X = 3;
  void clear_latrest_x();
  float latrest_x() const;
  void set_latrest_x(float value);
  private:
  float _internal_latrest_x() const;
  void _internal_set_latrest_x(float value);
  public:

  // float lonRest_Y = 4;
  void clear_lonrest_y();
  float lonrest_y() const;
  void set_lonrest_y(float value);
  private:
  float _internal_lonrest_y() const;
  void _internal_set_lonrest_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.Locallization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float lat_;
  float lon_;
  float latrest_x_;
  float lonrest_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class HDMapInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.HDMapInfo) */ {
 public:
  HDMapInfo();
  virtual ~HDMapInfo();

  HDMapInfo(const HDMapInfo& from);
  HDMapInfo(HDMapInfo&& from) noexcept
    : HDMapInfo() {
    *this = ::std::move(from);
  }

  inline HDMapInfo& operator=(const HDMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDMapInfo& operator=(HDMapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HDMapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDMapInfo* internal_default_instance() {
    return reinterpret_cast<const HDMapInfo*>(
               &_HDMapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HDMapInfo& a, HDMapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HDMapInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HDMapInfo* New() const final {
    return CreateMaybeMessage<HDMapInfo>(nullptr);
  }

  HDMapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HDMapInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HDMapInfo& from);
  void MergeFrom(const HDMapInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDMapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.HDMapInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kOnpathFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool onpath = 3;
  void clear_onpath();
  bool onpath() const;
  void set_onpath(bool value);
  private:
  bool _internal_onpath() const;
  void _internal_set_onpath(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.HDMapInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  bool onpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class VehicleSts :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.VehicleSts) */ {
 public:
  VehicleSts();
  virtual ~VehicleSts();

  VehicleSts(const VehicleSts& from);
  VehicleSts(VehicleSts&& from) noexcept
    : VehicleSts() {
    *this = ::std::move(from);
  }

  inline VehicleSts& operator=(const VehicleSts& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleSts& operator=(VehicleSts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleSts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleSts* internal_default_instance() {
    return reinterpret_cast<const VehicleSts*>(
               &_VehicleSts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleSts& a, VehicleSts& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleSts* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleSts* New() const final {
    return CreateMaybeMessage<VehicleSts>(nullptr);
  }

  VehicleSts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleSts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleSts& from);
  void MergeFrom(const VehicleSts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleSts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.VehicleSts";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleSpeedFieldNumber = 1,
    kSteerwheelAngleFieldNumber = 2,
  };
  // float vehicle_speed = 1;
  void clear_vehicle_speed();
  float vehicle_speed() const;
  void set_vehicle_speed(float value);
  private:
  float _internal_vehicle_speed() const;
  void _internal_set_vehicle_speed(float value);
  public:

  // float steerwheel_angle = 2;
  void clear_steerwheel_angle();
  float steerwheel_angle() const;
  void set_steerwheel_angle(float value);
  private:
  float _internal_steerwheel_angle() const;
  void _internal_set_steerwheel_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.VehicleSts)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float vehicle_speed_;
  float steerwheel_angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class StatusMachine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.StatusMachine) */ {
 public:
  StatusMachine();
  virtual ~StatusMachine();

  StatusMachine(const StatusMachine& from);
  StatusMachine(StatusMachine&& from) noexcept
    : StatusMachine() {
    *this = ::std::move(from);
  }

  inline StatusMachine& operator=(const StatusMachine& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMachine& operator=(StatusMachine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusMachine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusMachine* internal_default_instance() {
    return reinterpret_cast<const StatusMachine*>(
               &_StatusMachine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StatusMachine& a, StatusMachine& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMachine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusMachine* New() const final {
    return CreateMaybeMessage<StatusMachine>(nullptr);
  }

  StatusMachine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusMachine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusMachine& from);
  void MergeFrom(const StatusMachine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusMachine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.StatusMachine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvpReqFieldNumber = 1,
    kTBOXAVPModKeyFieldNumber = 2,
  };
  // int32 avp_req = 1;
  void clear_avp_req();
  ::PROTOBUF_NAMESPACE_ID::int32 avp_req() const;
  void set_avp_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avp_req() const;
  void _internal_set_avp_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TBOX_AVPModKey = 2;
  void clear_tbox_avpmodkey();
  ::PROTOBUF_NAMESPACE_ID::int32 tbox_avpmodkey() const;
  void set_tbox_avpmodkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tbox_avpmodkey() const;
  void _internal_set_tbox_avpmodkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.StatusMachine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avp_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 tbox_avpmodkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Obstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.Obstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kRelSpdXFieldNumber = 5,
    kRelSpdYFieldNumber = 6,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pos_x = 3;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float rel_spd_x = 5;
  void clear_rel_spd_x();
  float rel_spd_x() const;
  void set_rel_spd_x(float value);
  private:
  float _internal_rel_spd_x() const;
  void _internal_set_rel_spd_x(float value);
  public:

  // float rel_spd_y = 6;
  void clear_rel_spd_y();
  float rel_spd_y() const;
  void set_rel_spd_y(float value);
  private:
  float _internal_rel_spd_y() const;
  void _internal_set_rel_spd_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.Obstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float pos_x_;
  float pos_y_;
  float rel_spd_x_;
  float rel_spd_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_types.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_types.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjLeftFlagFieldNumber = 1,
    kObjMidFlagFieldNumber = 2,
    kObjRightFlagFieldNumber = 3,
    kObjLeftSLFieldNumber = 4,
    kObjMidSMFieldNumber = 5,
    kObjRightSRFieldNumber = 6,
  };
  // bool obj_left_flag = 1;
  void clear_obj_left_flag();
  bool obj_left_flag() const;
  void set_obj_left_flag(bool value);
  private:
  bool _internal_obj_left_flag() const;
  void _internal_set_obj_left_flag(bool value);
  public:

  // bool obj_mid_flag = 2;
  void clear_obj_mid_flag();
  bool obj_mid_flag() const;
  void set_obj_mid_flag(bool value);
  private:
  bool _internal_obj_mid_flag() const;
  void _internal_set_obj_mid_flag(bool value);
  public:

  // bool obj_right_flag = 3;
  void clear_obj_right_flag();
  bool obj_right_flag() const;
  void set_obj_right_flag(bool value);
  private:
  bool _internal_obj_right_flag() const;
  void _internal_set_obj_right_flag(bool value);
  public:

  // float obj_left_s_l = 4;
  void clear_obj_left_s_l();
  float obj_left_s_l() const;
  void set_obj_left_s_l(float value);
  private:
  float _internal_obj_left_s_l() const;
  void _internal_set_obj_left_s_l(float value);
  public:

  // float obj_mid_s_m = 5;
  void clear_obj_mid_s_m();
  float obj_mid_s_m() const;
  void set_obj_mid_s_m(float value);
  private:
  float _internal_obj_mid_s_m() const;
  void _internal_set_obj_mid_s_m(float value);
  public:

  // float obj_right_s_r = 6;
  void clear_obj_right_s_r();
  float obj_right_s_r() const;
  void set_obj_right_s_r(float value);
  private:
  float _internal_obj_right_s_r() const;
  void _internal_set_obj_right_s_r(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_types.UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool obj_left_flag_;
  bool obj_mid_flag_;
  bool obj_right_flag_;
  float obj_left_s_l_;
  float obj_mid_s_m_;
  float obj_right_s_r_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogFile

// int32 frame_num = 1;
inline void LogFile::clear_frame_num() {
  frame_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::_internal_frame_num() const {
  return frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::frame_num() const {
  // @@protoc_insertion_point(field_get:pb_types.LogFile.frame_num)
  return _internal_frame_num();
}
inline void LogFile::_internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_num_ = value;
}
inline void LogFile::set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:pb_types.LogFile.frame_num)
}

// repeated .pb_types.Frame frame = 2;
inline int LogFile::_internal_frame_size() const {
  return frame_.size();
}
inline int LogFile::frame_size() const {
  return _internal_frame_size();
}
inline void LogFile::clear_frame() {
  frame_.Clear();
}
inline ::pb_types::Frame* LogFile::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:pb_types.LogFile.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >*
LogFile::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:pb_types.LogFile.frame)
  return &frame_;
}
inline const ::pb_types::Frame& LogFile::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::pb_types::Frame& LogFile::frame(int index) const {
  // @@protoc_insertion_point(field_get:pb_types.LogFile.frame)
  return _internal_frame(index);
}
inline ::pb_types::Frame* LogFile::_internal_add_frame() {
  return frame_.Add();
}
inline ::pb_types::Frame* LogFile::add_frame() {
  // @@protoc_insertion_point(field_add:pb_types.LogFile.frame)
  return _internal_add_frame();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Frame >&
LogFile::frame() const {
  // @@protoc_insertion_point(field_list:pb_types.LogFile.frame)
  return frame_;
}

// -------------------------------------------------------------------

// Frame

// int32 id = 1;
inline void Frame::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::id() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.id)
  return _internal_id();
}
inline void Frame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Frame::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_types.Frame.id)
}

// repeated .pb_types.Obstacle obstacle = 2;
inline int Frame::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int Frame::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void Frame::clear_obstacle() {
  obstacle_.Clear();
}
inline ::pb_types::Obstacle* Frame::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >*
Frame::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:pb_types.Frame.obstacle)
  return &obstacle_;
}
inline const ::pb_types::Obstacle& Frame::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::pb_types::Obstacle& Frame::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.obstacle)
  return _internal_obstacle(index);
}
inline ::pb_types::Obstacle* Frame::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::pb_types::Obstacle* Frame::add_obstacle() {
  // @@protoc_insertion_point(field_add:pb_types.Frame.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_types::Obstacle >&
Frame::obstacle() const {
  // @@protoc_insertion_point(field_list:pb_types.Frame.obstacle)
  return obstacle_;
}

// .pb_types.Locallization localization = 3;
inline bool Frame::_internal_has_localization() const {
  return this != internal_default_instance() && localization_ != nullptr;
}
inline bool Frame::has_localization() const {
  return _internal_has_localization();
}
inline void Frame::clear_localization() {
  if (GetArenaNoVirtual() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
}
inline const ::pb_types::Locallization& Frame::_internal_localization() const {
  const ::pb_types::Locallization* p = localization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_types::Locallization*>(
      &::pb_types::_Locallization_default_instance_);
}
inline const ::pb_types::Locallization& Frame::localization() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.localization)
  return _internal_localization();
}
inline ::pb_types::Locallization* Frame::release_localization() {
  // @@protoc_insertion_point(field_release:pb_types.Frame.localization)
  
  ::pb_types::Locallization* temp = localization_;
  localization_ = nullptr;
  return temp;
}
inline ::pb_types::Locallization* Frame::_internal_mutable_localization() {
  
  if (localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_types::Locallization>(GetArenaNoVirtual());
    localization_ = p;
  }
  return localization_;
}
inline ::pb_types::Locallization* Frame::mutable_localization() {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.localization)
  return _internal_mutable_localization();
}
inline void Frame::set_allocated_localization(::pb_types::Locallization* localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete localization_;
  }
  if (localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization, submessage_arena);
    }
    
  } else {
    
  }
  localization_ = localization;
  // @@protoc_insertion_point(field_set_allocated:pb_types.Frame.localization)
}

// .pb_types.HDMapInfo hdmapinfo = 4;
inline bool Frame::_internal_has_hdmapinfo() const {
  return this != internal_default_instance() && hdmapinfo_ != nullptr;
}
inline bool Frame::has_hdmapinfo() const {
  return _internal_has_hdmapinfo();
}
inline void Frame::clear_hdmapinfo() {
  if (GetArenaNoVirtual() == nullptr && hdmapinfo_ != nullptr) {
    delete hdmapinfo_;
  }
  hdmapinfo_ = nullptr;
}
inline const ::pb_types::HDMapInfo& Frame::_internal_hdmapinfo() const {
  const ::pb_types::HDMapInfo* p = hdmapinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_types::HDMapInfo*>(
      &::pb_types::_HDMapInfo_default_instance_);
}
inline const ::pb_types::HDMapInfo& Frame::hdmapinfo() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.hdmapinfo)
  return _internal_hdmapinfo();
}
inline ::pb_types::HDMapInfo* Frame::release_hdmapinfo() {
  // @@protoc_insertion_point(field_release:pb_types.Frame.hdmapinfo)
  
  ::pb_types::HDMapInfo* temp = hdmapinfo_;
  hdmapinfo_ = nullptr;
  return temp;
}
inline ::pb_types::HDMapInfo* Frame::_internal_mutable_hdmapinfo() {
  
  if (hdmapinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_types::HDMapInfo>(GetArenaNoVirtual());
    hdmapinfo_ = p;
  }
  return hdmapinfo_;
}
inline ::pb_types::HDMapInfo* Frame::mutable_hdmapinfo() {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.hdmapinfo)
  return _internal_mutable_hdmapinfo();
}
inline void Frame::set_allocated_hdmapinfo(::pb_types::HDMapInfo* hdmapinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdmapinfo_;
  }
  if (hdmapinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdmapinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdmapinfo, submessage_arena);
    }
    
  } else {
    
  }
  hdmapinfo_ = hdmapinfo;
  // @@protoc_insertion_point(field_set_allocated:pb_types.Frame.hdmapinfo)
}

// .pb_types.VehicleSts vehiclests = 5;
inline bool Frame::_internal_has_vehiclests() const {
  return this != internal_default_instance() && vehiclests_ != nullptr;
}
inline bool Frame::has_vehiclests() const {
  return _internal_has_vehiclests();
}
inline void Frame::clear_vehiclests() {
  if (GetArenaNoVirtual() == nullptr && vehiclests_ != nullptr) {
    delete vehiclests_;
  }
  vehiclests_ = nullptr;
}
inline const ::pb_types::VehicleSts& Frame::_internal_vehiclests() const {
  const ::pb_types::VehicleSts* p = vehiclests_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_types::VehicleSts*>(
      &::pb_types::_VehicleSts_default_instance_);
}
inline const ::pb_types::VehicleSts& Frame::vehiclests() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.vehiclests)
  return _internal_vehiclests();
}
inline ::pb_types::VehicleSts* Frame::release_vehiclests() {
  // @@protoc_insertion_point(field_release:pb_types.Frame.vehiclests)
  
  ::pb_types::VehicleSts* temp = vehiclests_;
  vehiclests_ = nullptr;
  return temp;
}
inline ::pb_types::VehicleSts* Frame::_internal_mutable_vehiclests() {
  
  if (vehiclests_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_types::VehicleSts>(GetArenaNoVirtual());
    vehiclests_ = p;
  }
  return vehiclests_;
}
inline ::pb_types::VehicleSts* Frame::mutable_vehiclests() {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.vehiclests)
  return _internal_mutable_vehiclests();
}
inline void Frame::set_allocated_vehiclests(::pb_types::VehicleSts* vehiclests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehiclests_;
  }
  if (vehiclests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehiclests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehiclests, submessage_arena);
    }
    
  } else {
    
  }
  vehiclests_ = vehiclests;
  // @@protoc_insertion_point(field_set_allocated:pb_types.Frame.vehiclests)
}

// .pb_types.StatusMachine statusmachine = 6;
inline bool Frame::_internal_has_statusmachine() const {
  return this != internal_default_instance() && statusmachine_ != nullptr;
}
inline bool Frame::has_statusmachine() const {
  return _internal_has_statusmachine();
}
inline void Frame::clear_statusmachine() {
  if (GetArenaNoVirtual() == nullptr && statusmachine_ != nullptr) {
    delete statusmachine_;
  }
  statusmachine_ = nullptr;
}
inline const ::pb_types::StatusMachine& Frame::_internal_statusmachine() const {
  const ::pb_types::StatusMachine* p = statusmachine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_types::StatusMachine*>(
      &::pb_types::_StatusMachine_default_instance_);
}
inline const ::pb_types::StatusMachine& Frame::statusmachine() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.statusmachine)
  return _internal_statusmachine();
}
inline ::pb_types::StatusMachine* Frame::release_statusmachine() {
  // @@protoc_insertion_point(field_release:pb_types.Frame.statusmachine)
  
  ::pb_types::StatusMachine* temp = statusmachine_;
  statusmachine_ = nullptr;
  return temp;
}
inline ::pb_types::StatusMachine* Frame::_internal_mutable_statusmachine() {
  
  if (statusmachine_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_types::StatusMachine>(GetArenaNoVirtual());
    statusmachine_ = p;
  }
  return statusmachine_;
}
inline ::pb_types::StatusMachine* Frame::mutable_statusmachine() {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.statusmachine)
  return _internal_mutable_statusmachine();
}
inline void Frame::set_allocated_statusmachine(::pb_types::StatusMachine* statusmachine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete statusmachine_;
  }
  if (statusmachine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusmachine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusmachine, submessage_arena);
    }
    
  } else {
    
  }
  statusmachine_ = statusmachine;
  // @@protoc_insertion_point(field_set_allocated:pb_types.Frame.statusmachine)
}

// .pb_types.UserInfo userinfo = 7;
inline bool Frame::_internal_has_userinfo() const {
  return this != internal_default_instance() && userinfo_ != nullptr;
}
inline bool Frame::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void Frame::clear_userinfo() {
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
}
inline const ::pb_types::UserInfo& Frame::_internal_userinfo() const {
  const ::pb_types::UserInfo* p = userinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_types::UserInfo*>(
      &::pb_types::_UserInfo_default_instance_);
}
inline const ::pb_types::UserInfo& Frame::userinfo() const {
  // @@protoc_insertion_point(field_get:pb_types.Frame.userinfo)
  return _internal_userinfo();
}
inline ::pb_types::UserInfo* Frame::release_userinfo() {
  // @@protoc_insertion_point(field_release:pb_types.Frame.userinfo)
  
  ::pb_types::UserInfo* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::pb_types::UserInfo* Frame::_internal_mutable_userinfo() {
  
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_types::UserInfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  return userinfo_;
}
inline ::pb_types::UserInfo* Frame::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:pb_types.Frame.userinfo)
  return _internal_mutable_userinfo();
}
inline void Frame::set_allocated_userinfo(::pb_types::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:pb_types.Frame.userinfo)
}

// -------------------------------------------------------------------

// Locallization

// float lat = 1;
inline void Locallization::clear_lat() {
  lat_ = 0;
}
inline float Locallization::_internal_lat() const {
  return lat_;
}
inline float Locallization::lat() const {
  // @@protoc_insertion_point(field_get:pb_types.Locallization.lat)
  return _internal_lat();
}
inline void Locallization::_internal_set_lat(float value) {
  
  lat_ = value;
}
inline void Locallization::set_lat(float value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:pb_types.Locallization.lat)
}

// float lon = 2;
inline void Locallization::clear_lon() {
  lon_ = 0;
}
inline float Locallization::_internal_lon() const {
  return lon_;
}
inline float Locallization::lon() const {
  // @@protoc_insertion_point(field_get:pb_types.Locallization.lon)
  return _internal_lon();
}
inline void Locallization::_internal_set_lon(float value) {
  
  lon_ = value;
}
inline void Locallization::set_lon(float value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:pb_types.Locallization.lon)
}

// float latRest_X = 3;
inline void Locallization::clear_latrest_x() {
  latrest_x_ = 0;
}
inline float Locallization::_internal_latrest_x() const {
  return latrest_x_;
}
inline float Locallization::latrest_x() const {
  // @@protoc_insertion_point(field_get:pb_types.Locallization.latRest_X)
  return _internal_latrest_x();
}
inline void Locallization::_internal_set_latrest_x(float value) {
  
  latrest_x_ = value;
}
inline void Locallization::set_latrest_x(float value) {
  _internal_set_latrest_x(value);
  // @@protoc_insertion_point(field_set:pb_types.Locallization.latRest_X)
}

// float lonRest_Y = 4;
inline void Locallization::clear_lonrest_y() {
  lonrest_y_ = 0;
}
inline float Locallization::_internal_lonrest_y() const {
  return lonrest_y_;
}
inline float Locallization::lonrest_y() const {
  // @@protoc_insertion_point(field_get:pb_types.Locallization.lonRest_Y)
  return _internal_lonrest_y();
}
inline void Locallization::_internal_set_lonrest_y(float value) {
  
  lonrest_y_ = value;
}
inline void Locallization::set_lonrest_y(float value) {
  _internal_set_lonrest_y(value);
  // @@protoc_insertion_point(field_set:pb_types.Locallization.lonRest_Y)
}

// -------------------------------------------------------------------

// HDMapInfo

// int32 x = 1;
inline void HDMapInfo::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HDMapInfo::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HDMapInfo::x() const {
  // @@protoc_insertion_point(field_get:pb_types.HDMapInfo.x)
  return _internal_x();
}
inline void HDMapInfo::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void HDMapInfo::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pb_types.HDMapInfo.x)
}

// int32 y = 2;
inline void HDMapInfo::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HDMapInfo::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HDMapInfo::y() const {
  // @@protoc_insertion_point(field_get:pb_types.HDMapInfo.y)
  return _internal_y();
}
inline void HDMapInfo::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void HDMapInfo::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pb_types.HDMapInfo.y)
}

// bool onpath = 3;
inline void HDMapInfo::clear_onpath() {
  onpath_ = false;
}
inline bool HDMapInfo::_internal_onpath() const {
  return onpath_;
}
inline bool HDMapInfo::onpath() const {
  // @@protoc_insertion_point(field_get:pb_types.HDMapInfo.onpath)
  return _internal_onpath();
}
inline void HDMapInfo::_internal_set_onpath(bool value) {
  
  onpath_ = value;
}
inline void HDMapInfo::set_onpath(bool value) {
  _internal_set_onpath(value);
  // @@protoc_insertion_point(field_set:pb_types.HDMapInfo.onpath)
}

// -------------------------------------------------------------------

// VehicleSts

// float vehicle_speed = 1;
inline void VehicleSts::clear_vehicle_speed() {
  vehicle_speed_ = 0;
}
inline float VehicleSts::_internal_vehicle_speed() const {
  return vehicle_speed_;
}
inline float VehicleSts::vehicle_speed() const {
  // @@protoc_insertion_point(field_get:pb_types.VehicleSts.vehicle_speed)
  return _internal_vehicle_speed();
}
inline void VehicleSts::_internal_set_vehicle_speed(float value) {
  
  vehicle_speed_ = value;
}
inline void VehicleSts::set_vehicle_speed(float value) {
  _internal_set_vehicle_speed(value);
  // @@protoc_insertion_point(field_set:pb_types.VehicleSts.vehicle_speed)
}

// float steerwheel_angle = 2;
inline void VehicleSts::clear_steerwheel_angle() {
  steerwheel_angle_ = 0;
}
inline float VehicleSts::_internal_steerwheel_angle() const {
  return steerwheel_angle_;
}
inline float VehicleSts::steerwheel_angle() const {
  // @@protoc_insertion_point(field_get:pb_types.VehicleSts.steerwheel_angle)
  return _internal_steerwheel_angle();
}
inline void VehicleSts::_internal_set_steerwheel_angle(float value) {
  
  steerwheel_angle_ = value;
}
inline void VehicleSts::set_steerwheel_angle(float value) {
  _internal_set_steerwheel_angle(value);
  // @@protoc_insertion_point(field_set:pb_types.VehicleSts.steerwheel_angle)
}

// -------------------------------------------------------------------

// StatusMachine

// int32 avp_req = 1;
inline void StatusMachine::clear_avp_req() {
  avp_req_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusMachine::_internal_avp_req() const {
  return avp_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusMachine::avp_req() const {
  // @@protoc_insertion_point(field_get:pb_types.StatusMachine.avp_req)
  return _internal_avp_req();
}
inline void StatusMachine::_internal_set_avp_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avp_req_ = value;
}
inline void StatusMachine::set_avp_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avp_req(value);
  // @@protoc_insertion_point(field_set:pb_types.StatusMachine.avp_req)
}

// int32 TBOX_AVPModKey = 2;
inline void StatusMachine::clear_tbox_avpmodkey() {
  tbox_avpmodkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusMachine::_internal_tbox_avpmodkey() const {
  return tbox_avpmodkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusMachine::tbox_avpmodkey() const {
  // @@protoc_insertion_point(field_get:pb_types.StatusMachine.TBOX_AVPModKey)
  return _internal_tbox_avpmodkey();
}
inline void StatusMachine::_internal_set_tbox_avpmodkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tbox_avpmodkey_ = value;
}
inline void StatusMachine::set_tbox_avpmodkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tbox_avpmodkey(value);
  // @@protoc_insertion_point(field_set:pb_types.StatusMachine.TBOX_AVPModKey)
}

// -------------------------------------------------------------------

// Obstacle

// int32 id = 1;
inline void Obstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.id)
  return _internal_id();
}
inline void Obstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.id)
}

// int32 type = 2;
inline void Obstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::type() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.type)
  return _internal_type();
}
inline void Obstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Obstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.type)
}

// float pos_x = 3;
inline void Obstacle::clear_pos_x() {
  pos_x_ = 0;
}
inline float Obstacle::_internal_pos_x() const {
  return pos_x_;
}
inline float Obstacle::pos_x() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.pos_x)
  return _internal_pos_x();
}
inline void Obstacle::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Obstacle::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.pos_x)
}

// float pos_y = 4;
inline void Obstacle::clear_pos_y() {
  pos_y_ = 0;
}
inline float Obstacle::_internal_pos_y() const {
  return pos_y_;
}
inline float Obstacle::pos_y() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.pos_y)
  return _internal_pos_y();
}
inline void Obstacle::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Obstacle::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.pos_y)
}

// float rel_spd_x = 5;
inline void Obstacle::clear_rel_spd_x() {
  rel_spd_x_ = 0;
}
inline float Obstacle::_internal_rel_spd_x() const {
  return rel_spd_x_;
}
inline float Obstacle::rel_spd_x() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.rel_spd_x)
  return _internal_rel_spd_x();
}
inline void Obstacle::_internal_set_rel_spd_x(float value) {
  
  rel_spd_x_ = value;
}
inline void Obstacle::set_rel_spd_x(float value) {
  _internal_set_rel_spd_x(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.rel_spd_x)
}

// float rel_spd_y = 6;
inline void Obstacle::clear_rel_spd_y() {
  rel_spd_y_ = 0;
}
inline float Obstacle::_internal_rel_spd_y() const {
  return rel_spd_y_;
}
inline float Obstacle::rel_spd_y() const {
  // @@protoc_insertion_point(field_get:pb_types.Obstacle.rel_spd_y)
  return _internal_rel_spd_y();
}
inline void Obstacle::_internal_set_rel_spd_y(float value) {
  
  rel_spd_y_ = value;
}
inline void Obstacle::set_rel_spd_y(float value) {
  _internal_set_rel_spd_y(value);
  // @@protoc_insertion_point(field_set:pb_types.Obstacle.rel_spd_y)
}

// -------------------------------------------------------------------

// UserInfo

// bool obj_left_flag = 1;
inline void UserInfo::clear_obj_left_flag() {
  obj_left_flag_ = false;
}
inline bool UserInfo::_internal_obj_left_flag() const {
  return obj_left_flag_;
}
inline bool UserInfo::obj_left_flag() const {
  // @@protoc_insertion_point(field_get:pb_types.UserInfo.obj_left_flag)
  return _internal_obj_left_flag();
}
inline void UserInfo::_internal_set_obj_left_flag(bool value) {
  
  obj_left_flag_ = value;
}
inline void UserInfo::set_obj_left_flag(bool value) {
  _internal_set_obj_left_flag(value);
  // @@protoc_insertion_point(field_set:pb_types.UserInfo.obj_left_flag)
}

// bool obj_mid_flag = 2;
inline void UserInfo::clear_obj_mid_flag() {
  obj_mid_flag_ = false;
}
inline bool UserInfo::_internal_obj_mid_flag() const {
  return obj_mid_flag_;
}
inline bool UserInfo::obj_mid_flag() const {
  // @@protoc_insertion_point(field_get:pb_types.UserInfo.obj_mid_flag)
  return _internal_obj_mid_flag();
}
inline void UserInfo::_internal_set_obj_mid_flag(bool value) {
  
  obj_mid_flag_ = value;
}
inline void UserInfo::set_obj_mid_flag(bool value) {
  _internal_set_obj_mid_flag(value);
  // @@protoc_insertion_point(field_set:pb_types.UserInfo.obj_mid_flag)
}

// bool obj_right_flag = 3;
inline void UserInfo::clear_obj_right_flag() {
  obj_right_flag_ = false;
}
inline bool UserInfo::_internal_obj_right_flag() const {
  return obj_right_flag_;
}
inline bool UserInfo::obj_right_flag() const {
  // @@protoc_insertion_point(field_get:pb_types.UserInfo.obj_right_flag)
  return _internal_obj_right_flag();
}
inline void UserInfo::_internal_set_obj_right_flag(bool value) {
  
  obj_right_flag_ = value;
}
inline void UserInfo::set_obj_right_flag(bool value) {
  _internal_set_obj_right_flag(value);
  // @@protoc_insertion_point(field_set:pb_types.UserInfo.obj_right_flag)
}

// float obj_left_s_l = 4;
inline void UserInfo::clear_obj_left_s_l() {
  obj_left_s_l_ = 0;
}
inline float UserInfo::_internal_obj_left_s_l() const {
  return obj_left_s_l_;
}
inline float UserInfo::obj_left_s_l() const {
  // @@protoc_insertion_point(field_get:pb_types.UserInfo.obj_left_s_l)
  return _internal_obj_left_s_l();
}
inline void UserInfo::_internal_set_obj_left_s_l(float value) {
  
  obj_left_s_l_ = value;
}
inline void UserInfo::set_obj_left_s_l(float value) {
  _internal_set_obj_left_s_l(value);
  // @@protoc_insertion_point(field_set:pb_types.UserInfo.obj_left_s_l)
}

// float obj_mid_s_m = 5;
inline void UserInfo::clear_obj_mid_s_m() {
  obj_mid_s_m_ = 0;
}
inline float UserInfo::_internal_obj_mid_s_m() const {
  return obj_mid_s_m_;
}
inline float UserInfo::obj_mid_s_m() const {
  // @@protoc_insertion_point(field_get:pb_types.UserInfo.obj_mid_s_m)
  return _internal_obj_mid_s_m();
}
inline void UserInfo::_internal_set_obj_mid_s_m(float value) {
  
  obj_mid_s_m_ = value;
}
inline void UserInfo::set_obj_mid_s_m(float value) {
  _internal_set_obj_mid_s_m(value);
  // @@protoc_insertion_point(field_set:pb_types.UserInfo.obj_mid_s_m)
}

// float obj_right_s_r = 6;
inline void UserInfo::clear_obj_right_s_r() {
  obj_right_s_r_ = 0;
}
inline float UserInfo::_internal_obj_right_s_r() const {
  return obj_right_s_r_;
}
inline float UserInfo::obj_right_s_r() const {
  // @@protoc_insertion_point(field_get:pb_types.UserInfo.obj_right_s_r)
  return _internal_obj_right_s_r();
}
inline void UserInfo::_internal_set_obj_right_s_r(float value) {
  
  obj_right_s_r_ = value;
}
inline void UserInfo::set_obj_right_s_r(float value) {
  _internal_set_obj_right_s_r(value);
  // @@protoc_insertion_point(field_set:pb_types.UserInfo.obj_right_s_r)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_types

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
