// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacleSel.proto

#include "obstacleSel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIPVObstacle_obstacleSel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Frame_obstacleSel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacle_obstacleSel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleList_obstacleSel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_obstacleSel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathNode_obstacleSel_2eproto;
namespace pb_obstacle_sel {
class LogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogFile> _instance;
} _LogFile_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class PathNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathNode> _instance;
} _PathNode_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class ObstacleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleList> _instance;
} _ObstacleList_default_instance_;
class CIPVObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIPVObstacle> _instance;
} _CIPVObstacle_default_instance_;
}  // namespace pb_obstacle_sel
static void InitDefaultsscc_info_CIPVObstacle_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_CIPVObstacle_default_instance_;
    new (ptr) ::pb_obstacle_sel::CIPVObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::CIPVObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIPVObstacle_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIPVObstacle_obstacleSel_2eproto}, {
      &scc_info_Obstacle_obstacleSel_2eproto.base,}};

static void InitDefaultsscc_info_Frame_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_Frame_default_instance_;
    new (ptr) ::pb_obstacle_sel::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Frame_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Frame_obstacleSel_2eproto}, {
      &scc_info_Path_obstacleSel_2eproto.base,
      &scc_info_ObstacleList_obstacleSel_2eproto.base,
      &scc_info_CIPVObstacle_obstacleSel_2eproto.base,}};

static void InitDefaultsscc_info_LogFile_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_LogFile_default_instance_;
    new (ptr) ::pb_obstacle_sel::LogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::LogFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogFile_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogFile_obstacleSel_2eproto}, {
      &scc_info_Frame_obstacleSel_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_Obstacle_default_instance_;
    new (ptr) ::pb_obstacle_sel::Obstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::Obstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacle_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Obstacle_obstacleSel_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleList_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_ObstacleList_default_instance_;
    new (ptr) ::pb_obstacle_sel::ObstacleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::ObstacleList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleList_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleList_obstacleSel_2eproto}, {
      &scc_info_Obstacle_obstacleSel_2eproto.base,}};

static void InitDefaultsscc_info_Path_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_Path_default_instance_;
    new (ptr) ::pb_obstacle_sel::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Path_obstacleSel_2eproto}, {
      &scc_info_PathNode_obstacleSel_2eproto.base,}};

static void InitDefaultsscc_info_PathNode_obstacleSel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_obstacle_sel::_PathNode_default_instance_;
    new (ptr) ::pb_obstacle_sel::PathNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_obstacle_sel::PathNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathNode_obstacleSel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathNode_obstacleSel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacleSel_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_obstacleSel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacleSel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacleSel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::LogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::LogFile, frame_total_num_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::LogFile, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Frame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Frame, path_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Frame, obstacle_list_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Frame, cipv_obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, car_x_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, car_y_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, heading_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, flat_x_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, flat_y_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, s_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::PathNode, d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Path, node_id_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Path, path_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, id_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, type_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, pos_x_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, pos_y_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, pos_s_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, pos_d_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, rel_spd_x_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::Obstacle, rel_spd_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::ObstacleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::ObstacleList, num_),
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::ObstacleList, obstacle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::CIPVObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_obstacle_sel::CIPVObstacle, cipv_obstacle_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_obstacle_sel::LogFile)},
  { 7, -1, sizeof(::pb_obstacle_sel::Frame)},
  { 16, -1, sizeof(::pb_obstacle_sel::PathNode)},
  { 28, -1, sizeof(::pb_obstacle_sel::Path)},
  { 35, -1, sizeof(::pb_obstacle_sel::Obstacle)},
  { 48, -1, sizeof(::pb_obstacle_sel::ObstacleList)},
  { 55, -1, sizeof(::pb_obstacle_sel::CIPVObstacle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_LogFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_PathNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_Obstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_ObstacleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_obstacle_sel::_CIPVObstacle_default_instance_),
};

const char descriptor_table_protodef_obstacleSel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021obstacleSel.proto\022\017pb_obstacle_sel\"I\n\007"
  "LogFile\022\027\n\017frame_total_num\030\001 \001(\005\022%\n\005fram"
  "e\030\002 \003(\0132\026.pb_obstacle_sel.Frame\"\245\001\n\005Fram"
  "e\022\020\n\010frame_id\030\001 \001(\005\022#\n\004path\030\002 \001(\0132\025.pb_o"
  "bstacle_sel.Path\0224\n\robstacle_list\030\003 \001(\0132"
  "\035.pb_obstacle_sel.ObstacleList\022/\n\010cipv_o"
  "bj\030\004 \001(\0132\035.pb_obstacle_sel.CIPVObstacle\""
  "o\n\010PathNode\022\r\n\005car_x\030\001 \001(\002\022\r\n\005car_y\030\002 \001("
  "\002\022\017\n\007heading\030\003 \001(\002\022\016\n\006flat_x\030\004 \001(\002\022\016\n\006fl"
  "at_y\030\005 \001(\002\022\t\n\001s\030\006 \001(\002\022\t\n\001d\030\007 \001(\002\"E\n\004Path"
  "\022\017\n\007node_id\030\001 \001(\005\022,\n\tpath_node\030\002 \003(\0132\031.p"
  "b_obstacle_sel.PathNode\"\206\001\n\010Obstacle\022\n\n\002"
  "id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005pos_x\030\003 \001(\002\022\r\n"
  "\005pos_y\030\004 \001(\002\022\r\n\005pos_s\030\005 \001(\002\022\r\n\005pos_d\030\006 \001"
  "(\002\022\021\n\trel_spd_x\030\007 \001(\002\022\021\n\trel_spd_y\030\010 \001(\002"
  "\"H\n\014ObstacleList\022\013\n\003num\030\001 \001(\005\022+\n\010obstacl"
  "e\030\002 \003(\0132\031.pb_obstacle_sel.Obstacle\"@\n\014CI"
  "PVObstacle\0220\n\rcipv_obstacle\030\001 \001(\0132\031.pb_o"
  "bstacle_sel.Obstacleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacleSel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacleSel_2eproto_sccs[7] = {
  &scc_info_CIPVObstacle_obstacleSel_2eproto.base,
  &scc_info_Frame_obstacleSel_2eproto.base,
  &scc_info_LogFile_obstacleSel_2eproto.base,
  &scc_info_Obstacle_obstacleSel_2eproto.base,
  &scc_info_ObstacleList_obstacleSel_2eproto.base,
  &scc_info_Path_obstacleSel_2eproto.base,
  &scc_info_PathNode_obstacleSel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacleSel_2eproto_once;
static bool descriptor_table_obstacleSel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacleSel_2eproto = {
  &descriptor_table_obstacleSel_2eproto_initialized, descriptor_table_protodef_obstacleSel_2eproto, "obstacleSel.proto", 748,
  &descriptor_table_obstacleSel_2eproto_once, descriptor_table_obstacleSel_2eproto_sccs, descriptor_table_obstacleSel_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_obstacleSel_2eproto::offsets,
  file_level_metadata_obstacleSel_2eproto, 7, file_level_enum_descriptors_obstacleSel_2eproto, file_level_service_descriptors_obstacleSel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacleSel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacleSel_2eproto)), true);
namespace pb_obstacle_sel {

// ===================================================================

void LogFile::InitAsDefaultInstance() {
}
class LogFile::_Internal {
 public:
};

LogFile::LogFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.LogFile)
}
LogFile::LogFile(const LogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      frame_(from.frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_total_num_ = from.frame_total_num_;
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.LogFile)
}

void LogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogFile_obstacleSel_2eproto.base);
  frame_total_num_ = 0;
}

LogFile::~LogFile() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.LogFile)
  SharedDtor();
}

void LogFile::SharedDtor() {
}

void LogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogFile& LogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogFile_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void LogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  frame_total_num_ = 0;
  _internal_metadata_.Clear();
}

const char* LogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_total_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_obstacle_sel.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_total_num = 1;
  if (this->frame_total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_total_num(), target);
  }

  // repeated .pb_obstacle_sel.Frame frame = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frame(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.LogFile)
  return target;
}

size_t LogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.LogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_obstacle_sel.Frame frame = 2;
  total_size += 1UL * this->_internal_frame_size();
  for (const auto& msg : this->frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frame_total_num = 1;
  if (this->frame_total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_total_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const LogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.LogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.LogFile)
    MergeFrom(*source);
  }
}

void LogFile::MergeFrom(const LogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
  if (from.frame_total_num() != 0) {
    _internal_set_frame_total_num(from._internal_frame_total_num());
  }
}

void LogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogFile::CopyFrom(const LogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogFile::IsInitialized() const {
  return true;
}

void LogFile::InternalSwap(LogFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_.InternalSwap(&other->frame_);
  swap(frame_total_num_, other->frame_total_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::pb_obstacle_sel::_Frame_default_instance_._instance.get_mutable()->path_ = const_cast< ::pb_obstacle_sel::Path*>(
      ::pb_obstacle_sel::Path::internal_default_instance());
  ::pb_obstacle_sel::_Frame_default_instance_._instance.get_mutable()->obstacle_list_ = const_cast< ::pb_obstacle_sel::ObstacleList*>(
      ::pb_obstacle_sel::ObstacleList::internal_default_instance());
  ::pb_obstacle_sel::_Frame_default_instance_._instance.get_mutable()->cipv_obj_ = const_cast< ::pb_obstacle_sel::CIPVObstacle*>(
      ::pb_obstacle_sel::CIPVObstacle::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::pb_obstacle_sel::Path& path(const Frame* msg);
  static const ::pb_obstacle_sel::ObstacleList& obstacle_list(const Frame* msg);
  static const ::pb_obstacle_sel::CIPVObstacle& cipv_obj(const Frame* msg);
};

const ::pb_obstacle_sel::Path&
Frame::_Internal::path(const Frame* msg) {
  return *msg->path_;
}
const ::pb_obstacle_sel::ObstacleList&
Frame::_Internal::obstacle_list(const Frame* msg) {
  return *msg->obstacle_list_;
}
const ::pb_obstacle_sel::CIPVObstacle&
Frame::_Internal::cipv_obj(const Frame* msg) {
  return *msg->cipv_obj_;
}
Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::pb_obstacle_sel::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_obstacle_list()) {
    obstacle_list_ = new ::pb_obstacle_sel::ObstacleList(*from.obstacle_list_);
  } else {
    obstacle_list_ = nullptr;
  }
  if (from._internal_has_cipv_obj()) {
    cipv_obj_ = new ::pb_obstacle_sel::CIPVObstacle(*from.cipv_obj_);
  } else {
    cipv_obj_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_obstacleSel_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&path_)) + sizeof(frame_id_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete obstacle_list_;
  if (this != internal_default_instance()) delete cipv_obj_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obstacle_list_ != nullptr) {
    delete obstacle_list_;
  }
  obstacle_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cipv_obj_ != nullptr) {
    delete cipv_obj_;
  }
  cipv_obj_ = nullptr;
  frame_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_obstacle_sel.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_obstacle_sel.ObstacleList obstacle_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_obstacle_sel.CIPVObstacle cipv_obj = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cipv_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // .pb_obstacle_sel.Path path = 2;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::path(this), target, stream);
  }

  // .pb_obstacle_sel.ObstacleList obstacle_list = 3;
  if (this->has_obstacle_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::obstacle_list(this), target, stream);
  }

  // .pb_obstacle_sel.CIPVObstacle cipv_obj = 4;
  if (this->has_cipv_obj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cipv_obj(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_obstacle_sel.Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .pb_obstacle_sel.ObstacleList obstacle_list = 3;
  if (this->has_obstacle_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obstacle_list_);
  }

  // .pb_obstacle_sel.CIPVObstacle cipv_obj = 4;
  if (this->has_cipv_obj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cipv_obj_);
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::pb_obstacle_sel::Path::MergeFrom(from._internal_path());
  }
  if (from.has_obstacle_list()) {
    _internal_mutable_obstacle_list()->::pb_obstacle_sel::ObstacleList::MergeFrom(from._internal_obstacle_list());
  }
  if (from.has_cipv_obj()) {
    _internal_mutable_cipv_obj()->::pb_obstacle_sel::CIPVObstacle::MergeFrom(from._internal_cipv_obj());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
  swap(obstacle_list_, other->obstacle_list_);
  swap(cipv_obj_, other->cipv_obj_);
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathNode::InitAsDefaultInstance() {
}
class PathNode::_Internal {
 public:
};

PathNode::PathNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.PathNode)
}
PathNode::PathNode(const PathNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&car_x_, &from.car_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&car_x_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.PathNode)
}

void PathNode::SharedCtor() {
  ::memset(&car_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&car_x_)) + sizeof(d_));
}

PathNode::~PathNode() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.PathNode)
  SharedDtor();
}

void PathNode::SharedDtor() {
}

void PathNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathNode& PathNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathNode_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void PathNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.PathNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&car_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&car_x_)) + sizeof(d_));
  _internal_metadata_.Clear();
}

const char* PathNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float car_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          car_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          car_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float flat_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          flat_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float flat_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          flat_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.PathNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float car_x = 1;
  if (!(this->car_x() <= 0 && this->car_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_car_x(), target);
  }

  // float car_y = 2;
  if (!(this->car_y() <= 0 && this->car_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_car_y(), target);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_heading(), target);
  }

  // float flat_x = 4;
  if (!(this->flat_x() <= 0 && this->flat_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_flat_x(), target);
  }

  // float flat_y = 5;
  if (!(this->flat_y() <= 0 && this->flat_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_flat_y(), target);
  }

  // float s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s(), target);
  }

  // float d = 7;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.PathNode)
  return target;
}

size_t PathNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.PathNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float car_x = 1;
  if (!(this->car_x() <= 0 && this->car_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_y = 2;
  if (!(this->car_y() <= 0 && this->car_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float flat_x = 4;
  if (!(this->flat_x() <= 0 && this->flat_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float flat_y = 5;
  if (!(this->flat_y() <= 0 && this->flat_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float d = 7;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.PathNode)
  GOOGLE_DCHECK_NE(&from, this);
  const PathNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.PathNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.PathNode)
    MergeFrom(*source);
  }
}

void PathNode::MergeFrom(const PathNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.PathNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.car_x() <= 0 && from.car_x() >= 0)) {
    _internal_set_car_x(from._internal_car_x());
  }
  if (!(from.car_y() <= 0 && from.car_y() >= 0)) {
    _internal_set_car_y(from._internal_car_y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.flat_x() <= 0 && from.flat_x() >= 0)) {
    _internal_set_flat_x(from._internal_flat_x());
  }
  if (!(from.flat_y() <= 0 && from.flat_y() >= 0)) {
    _internal_set_flat_y(from._internal_flat_y());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.d() <= 0 && from.d() >= 0)) {
    _internal_set_d(from._internal_d());
  }
}

void PathNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.PathNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathNode::CopyFrom(const PathNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.PathNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathNode::IsInitialized() const {
  return true;
}

void PathNode::InternalSwap(PathNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(car_x_, other->car_x_);
  swap(car_y_, other->car_y_);
  swap(heading_, other->heading_);
  swap(flat_x_, other->flat_x_);
  swap(flat_y_, other->flat_y_);
  swap(s_, other->s_);
  swap(d_, other->d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      path_node_(from.path_node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_obstacleSel_2eproto.base);
  node_id_ = 0;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.Path)
  SharedDtor();
}

void Path::SharedDtor() {
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_node_.Clear();
  node_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_obstacle_sel.PathNode path_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // repeated .pb_obstacle_sel.PathNode path_node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_obstacle_sel.PathNode path_node = 2;
  total_size += 1UL * this->_internal_path_node_size();
  for (const auto& msg : this->path_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_node_.MergeFrom(from.path_node_);
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_node_.InternalSwap(&other->path_node_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
}
class Obstacle::_Internal {
 public:
};

Obstacle::Obstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rel_spd_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rel_spd_y_));
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.Obstacle)
}

void Obstacle::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_spd_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rel_spd_y_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
}

void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_spd_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rel_spd_y_));
  _internal_metadata_.Clear();
}

const char* Obstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pos_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          pos_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_spd_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rel_spd_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_spd_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          rel_spd_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // float pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_x(), target);
  }

  // float pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_y(), target);
  }

  // float pos_s = 5;
  if (!(this->pos_s() <= 0 && this->pos_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pos_s(), target);
  }

  // float pos_d = 6;
  if (!(this->pos_d() <= 0 && this->pos_d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pos_d(), target);
  }

  // float rel_spd_x = 7;
  if (!(this->rel_spd_x() <= 0 && this->rel_spd_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rel_spd_x(), target);
  }

  // float rel_spd_y = 8;
  if (!(this->rel_spd_y() <= 0 && this->rel_spd_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rel_spd_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.Obstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_s = 5;
  if (!(this->pos_s() <= 0 && this->pos_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_d = 6;
  if (!(this->pos_d() <= 0 && this->pos_d() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_spd_x = 7;
  if (!(this->rel_spd_x() <= 0 && this->rel_spd_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_spd_y = 8;
  if (!(this->rel_spd_y() <= 0 && this->rel_spd_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.Obstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.pos_s() <= 0 && from.pos_s() >= 0)) {
    _internal_set_pos_s(from._internal_pos_s());
  }
  if (!(from.pos_d() <= 0 && from.pos_d() >= 0)) {
    _internal_set_pos_d(from._internal_pos_d());
  }
  if (!(from.rel_spd_x() <= 0 && from.rel_spd_x() >= 0)) {
    _internal_set_rel_spd_x(from._internal_rel_spd_x());
  }
  if (!(from.rel_spd_y() <= 0 && from.rel_spd_y() >= 0)) {
    _internal_set_rel_spd_y(from._internal_rel_spd_y());
  }
}

void Obstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(pos_s_, other->pos_s_);
  swap(pos_d_, other->pos_d_);
  swap(rel_spd_x_, other->rel_spd_x_);
  swap(rel_spd_y_, other->rel_spd_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleList::InitAsDefaultInstance() {
}
class ObstacleList::_Internal {
 public:
};

ObstacleList::ObstacleList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.ObstacleList)
}
ObstacleList::ObstacleList(const ObstacleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      obstacle_(from.obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.ObstacleList)
}

void ObstacleList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleList_obstacleSel_2eproto.base);
  num_ = 0;
}

ObstacleList::~ObstacleList() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.ObstacleList)
  SharedDtor();
}

void ObstacleList::SharedDtor() {
}

void ObstacleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleList& ObstacleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleList_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void ObstacleList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.ObstacleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  num_ = 0;
  _internal_metadata_.Clear();
}

const char* ObstacleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_obstacle_sel.Obstacle obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.ObstacleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // repeated .pb_obstacle_sel.Obstacle obstacle = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_obstacle(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.ObstacleList)
  return target;
}

size_t ObstacleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.ObstacleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_obstacle_sel.Obstacle obstacle = 2;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.ObstacleList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.ObstacleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.ObstacleList)
    MergeFrom(*source);
  }
}

void ObstacleList::MergeFrom(const ObstacleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.ObstacleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void ObstacleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.ObstacleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleList::CopyFrom(const ObstacleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.ObstacleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleList::IsInitialized() const {
  return true;
}

void ObstacleList::InternalSwap(ObstacleList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obstacle_.InternalSwap(&other->obstacle_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CIPVObstacle::InitAsDefaultInstance() {
  ::pb_obstacle_sel::_CIPVObstacle_default_instance_._instance.get_mutable()->cipv_obstacle_ = const_cast< ::pb_obstacle_sel::Obstacle*>(
      ::pb_obstacle_sel::Obstacle::internal_default_instance());
}
class CIPVObstacle::_Internal {
 public:
  static const ::pb_obstacle_sel::Obstacle& cipv_obstacle(const CIPVObstacle* msg);
};

const ::pb_obstacle_sel::Obstacle&
CIPVObstacle::_Internal::cipv_obstacle(const CIPVObstacle* msg) {
  return *msg->cipv_obstacle_;
}
CIPVObstacle::CIPVObstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_obstacle_sel.CIPVObstacle)
}
CIPVObstacle::CIPVObstacle(const CIPVObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cipv_obstacle()) {
    cipv_obstacle_ = new ::pb_obstacle_sel::Obstacle(*from.cipv_obstacle_);
  } else {
    cipv_obstacle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb_obstacle_sel.CIPVObstacle)
}

void CIPVObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIPVObstacle_obstacleSel_2eproto.base);
  cipv_obstacle_ = nullptr;
}

CIPVObstacle::~CIPVObstacle() {
  // @@protoc_insertion_point(destructor:pb_obstacle_sel.CIPVObstacle)
  SharedDtor();
}

void CIPVObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete cipv_obstacle_;
}

void CIPVObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIPVObstacle& CIPVObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIPVObstacle_obstacleSel_2eproto.base);
  return *internal_default_instance();
}


void CIPVObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_obstacle_sel.CIPVObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cipv_obstacle_ != nullptr) {
    delete cipv_obstacle_;
  }
  cipv_obstacle_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CIPVObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_obstacle_sel.Obstacle cipv_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cipv_obstacle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIPVObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_obstacle_sel.CIPVObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_obstacle_sel.Obstacle cipv_obstacle = 1;
  if (this->has_cipv_obstacle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cipv_obstacle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_obstacle_sel.CIPVObstacle)
  return target;
}

size_t CIPVObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_obstacle_sel.CIPVObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_obstacle_sel.Obstacle cipv_obstacle = 1;
  if (this->has_cipv_obstacle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cipv_obstacle_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIPVObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_obstacle_sel.CIPVObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPVObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CIPVObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_obstacle_sel.CIPVObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_obstacle_sel.CIPVObstacle)
    MergeFrom(*source);
  }
}

void CIPVObstacle::MergeFrom(const CIPVObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_obstacle_sel.CIPVObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cipv_obstacle()) {
    _internal_mutable_cipv_obstacle()->::pb_obstacle_sel::Obstacle::MergeFrom(from._internal_cipv_obstacle());
  }
}

void CIPVObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_obstacle_sel.CIPVObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPVObstacle::CopyFrom(const CIPVObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_obstacle_sel.CIPVObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPVObstacle::IsInitialized() const {
  return true;
}

void CIPVObstacle::InternalSwap(CIPVObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cipv_obstacle_, other->cipv_obstacle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPVObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_obstacle_sel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::LogFile* Arena::CreateMaybeMessage< ::pb_obstacle_sel::LogFile >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::LogFile >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::Frame* Arena::CreateMaybeMessage< ::pb_obstacle_sel::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::PathNode* Arena::CreateMaybeMessage< ::pb_obstacle_sel::PathNode >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::PathNode >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::Path* Arena::CreateMaybeMessage< ::pb_obstacle_sel::Path >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::Obstacle* Arena::CreateMaybeMessage< ::pb_obstacle_sel::Obstacle >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::ObstacleList* Arena::CreateMaybeMessage< ::pb_obstacle_sel::ObstacleList >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::ObstacleList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_obstacle_sel::CIPVObstacle* Arena::CreateMaybeMessage< ::pb_obstacle_sel::CIPVObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::pb_obstacle_sel::CIPVObstacle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
