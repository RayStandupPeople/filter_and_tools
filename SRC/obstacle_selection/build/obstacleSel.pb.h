// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacleSel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacleSel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacleSel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacleSel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacleSel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacleSel_2eproto;
namespace pb_obstacle_sel {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class LogFile;
class LogFileDefaultTypeInternal;
extern LogFileDefaultTypeInternal _LogFile_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class ObstacleList;
class ObstacleListDefaultTypeInternal;
extern ObstacleListDefaultTypeInternal _ObstacleList_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathNode;
class PathNodeDefaultTypeInternal;
extern PathNodeDefaultTypeInternal _PathNode_default_instance_;
}  // namespace pb_obstacle_sel
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_obstacle_sel::Frame* Arena::CreateMaybeMessage<::pb_obstacle_sel::Frame>(Arena*);
template<> ::pb_obstacle_sel::LogFile* Arena::CreateMaybeMessage<::pb_obstacle_sel::LogFile>(Arena*);
template<> ::pb_obstacle_sel::Obstacle* Arena::CreateMaybeMessage<::pb_obstacle_sel::Obstacle>(Arena*);
template<> ::pb_obstacle_sel::ObstacleList* Arena::CreateMaybeMessage<::pb_obstacle_sel::ObstacleList>(Arena*);
template<> ::pb_obstacle_sel::Path* Arena::CreateMaybeMessage<::pb_obstacle_sel::Path>(Arena*);
template<> ::pb_obstacle_sel::PathNode* Arena::CreateMaybeMessage<::pb_obstacle_sel::PathNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_obstacle_sel {

// ===================================================================

class LogFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_obstacle_sel.LogFile) */ {
 public:
  LogFile();
  virtual ~LogFile();

  LogFile(const LogFile& from);
  LogFile(LogFile&& from) noexcept
    : LogFile() {
    *this = ::std::move(from);
  }

  inline LogFile& operator=(const LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogFile& operator=(LogFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogFile* internal_default_instance() {
    return reinterpret_cast<const LogFile*>(
               &_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogFile& a, LogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LogFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogFile* New() const final {
    return CreateMaybeMessage<LogFile>(nullptr);
  }

  LogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogFile& from);
  void MergeFrom(const LogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_obstacle_sel.LogFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacleSel_2eproto);
    return ::descriptor_table_obstacleSel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kFrameTotalNumFieldNumber = 1,
  };
  // repeated .pb_obstacle_sel.Frame frame = 2;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::pb_obstacle_sel::Frame* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Frame >*
      mutable_frame();
  private:
  const ::pb_obstacle_sel::Frame& _internal_frame(int index) const;
  ::pb_obstacle_sel::Frame* _internal_add_frame();
  public:
  const ::pb_obstacle_sel::Frame& frame(int index) const;
  ::pb_obstacle_sel::Frame* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Frame >&
      frame() const;

  // int32 frame_total_num = 1;
  void clear_frame_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_total_num() const;
  void set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_total_num() const;
  void _internal_set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_obstacle_sel.LogFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Frame > frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_total_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacleSel_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_obstacle_sel.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_obstacle_sel.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacleSel_2eproto);
    return ::descriptor_table_obstacleSel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kObstacleListFieldNumber = 3,
    kFrameIdFieldNumber = 1,
  };
  // .pb_obstacle_sel.Path path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::pb_obstacle_sel::Path& path() const;
  ::pb_obstacle_sel::Path* release_path();
  ::pb_obstacle_sel::Path* mutable_path();
  void set_allocated_path(::pb_obstacle_sel::Path* path);
  private:
  const ::pb_obstacle_sel::Path& _internal_path() const;
  ::pb_obstacle_sel::Path* _internal_mutable_path();
  public:

  // .pb_obstacle_sel.ObstacleList obstacle_list = 3;
  bool has_obstacle_list() const;
  private:
  bool _internal_has_obstacle_list() const;
  public:
  void clear_obstacle_list();
  const ::pb_obstacle_sel::ObstacleList& obstacle_list() const;
  ::pb_obstacle_sel::ObstacleList* release_obstacle_list();
  ::pb_obstacle_sel::ObstacleList* mutable_obstacle_list();
  void set_allocated_obstacle_list(::pb_obstacle_sel::ObstacleList* obstacle_list);
  private:
  const ::pb_obstacle_sel::ObstacleList& _internal_obstacle_list() const;
  ::pb_obstacle_sel::ObstacleList* _internal_mutable_obstacle_list();
  public:

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_obstacle_sel.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb_obstacle_sel::Path* path_;
  ::pb_obstacle_sel::ObstacleList* obstacle_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacleSel_2eproto;
};
// -------------------------------------------------------------------

class PathNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_obstacle_sel.PathNode) */ {
 public:
  PathNode();
  virtual ~PathNode();

  PathNode(const PathNode& from);
  PathNode(PathNode&& from) noexcept
    : PathNode() {
    *this = ::std::move(from);
  }

  inline PathNode& operator=(const PathNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathNode& operator=(PathNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathNode* internal_default_instance() {
    return reinterpret_cast<const PathNode*>(
               &_PathNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PathNode& a, PathNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PathNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathNode* New() const final {
    return CreateMaybeMessage<PathNode>(nullptr);
  }

  PathNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathNode& from);
  void MergeFrom(const PathNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_obstacle_sel.PathNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacleSel_2eproto);
    return ::descriptor_table_obstacleSel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarXFieldNumber = 1,
    kCarYFieldNumber = 2,
    kFlatXFieldNumber = 3,
    kFlatYFieldNumber = 4,
    kSFieldNumber = 5,
    kDFieldNumber = 6,
  };
  // float car_x = 1;
  void clear_car_x();
  float car_x() const;
  void set_car_x(float value);
  private:
  float _internal_car_x() const;
  void _internal_set_car_x(float value);
  public:

  // float car_y = 2;
  void clear_car_y();
  float car_y() const;
  void set_car_y(float value);
  private:
  float _internal_car_y() const;
  void _internal_set_car_y(float value);
  public:

  // float flat_x = 3;
  void clear_flat_x();
  float flat_x() const;
  void set_flat_x(float value);
  private:
  float _internal_flat_x() const;
  void _internal_set_flat_x(float value);
  public:

  // float flat_y = 4;
  void clear_flat_y();
  float flat_y() const;
  void set_flat_y(float value);
  private:
  float _internal_flat_y() const;
  void _internal_set_flat_y(float value);
  public:

  // float s = 5;
  void clear_s();
  float s() const;
  void set_s(float value);
  private:
  float _internal_s() const;
  void _internal_set_s(float value);
  public:

  // float d = 6;
  void clear_d();
  float d() const;
  void set_d(float value);
  private:
  float _internal_d() const;
  void _internal_set_d(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_obstacle_sel.PathNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float car_x_;
  float car_y_;
  float flat_x_;
  float flat_y_;
  float s_;
  float d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacleSel_2eproto;
};
// -------------------------------------------------------------------

class Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_obstacle_sel.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_obstacle_sel.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacleSel_2eproto);
    return ::descriptor_table_obstacleSel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathNodeFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated .pb_obstacle_sel.PathNode path_node = 2;
  int path_node_size() const;
  private:
  int _internal_path_node_size() const;
  public:
  void clear_path_node();
  ::pb_obstacle_sel::PathNode* mutable_path_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::PathNode >*
      mutable_path_node();
  private:
  const ::pb_obstacle_sel::PathNode& _internal_path_node(int index) const;
  ::pb_obstacle_sel::PathNode* _internal_add_path_node();
  public:
  const ::pb_obstacle_sel::PathNode& path_node(int index) const;
  ::pb_obstacle_sel::PathNode* add_path_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::PathNode >&
      path_node() const;

  // int32 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_obstacle_sel.Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::PathNode > path_node_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacleSel_2eproto;
};
// -------------------------------------------------------------------

class Obstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_obstacle_sel.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_obstacle_sel.Obstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacleSel_2eproto);
    return ::descriptor_table_obstacleSel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kPosSFieldNumber = 5,
    kPosDFieldNumber = 6,
    kRelSpdXFieldNumber = 7,
    kRelSpdYFieldNumber = 8,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pos_x = 3;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_s = 5;
  void clear_pos_s();
  float pos_s() const;
  void set_pos_s(float value);
  private:
  float _internal_pos_s() const;
  void _internal_set_pos_s(float value);
  public:

  // float pos_d = 6;
  void clear_pos_d();
  float pos_d() const;
  void set_pos_d(float value);
  private:
  float _internal_pos_d() const;
  void _internal_set_pos_d(float value);
  public:

  // float rel_spd_x = 7;
  void clear_rel_spd_x();
  float rel_spd_x() const;
  void set_rel_spd_x(float value);
  private:
  float _internal_rel_spd_x() const;
  void _internal_set_rel_spd_x(float value);
  public:

  // float rel_spd_y = 8;
  void clear_rel_spd_y();
  float rel_spd_y() const;
  void set_rel_spd_y(float value);
  private:
  float _internal_rel_spd_y() const;
  void _internal_set_rel_spd_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_obstacle_sel.Obstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float pos_x_;
  float pos_y_;
  float pos_s_;
  float pos_d_;
  float rel_spd_x_;
  float rel_spd_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacleSel_2eproto;
};
// -------------------------------------------------------------------

class ObstacleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_obstacle_sel.ObstacleList) */ {
 public:
  ObstacleList();
  virtual ~ObstacleList();

  ObstacleList(const ObstacleList& from);
  ObstacleList(ObstacleList&& from) noexcept
    : ObstacleList() {
    *this = ::std::move(from);
  }

  inline ObstacleList& operator=(const ObstacleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleList& operator=(ObstacleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleList* internal_default_instance() {
    return reinterpret_cast<const ObstacleList*>(
               &_ObstacleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ObstacleList& a, ObstacleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleList* New() const final {
    return CreateMaybeMessage<ObstacleList>(nullptr);
  }

  ObstacleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleList& from);
  void MergeFrom(const ObstacleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_obstacle_sel.ObstacleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacleSel_2eproto);
    return ::descriptor_table_obstacleSel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // repeated .pb_obstacle_sel.Obstacle obstacle = 2;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::pb_obstacle_sel::Obstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Obstacle >*
      mutable_obstacle();
  private:
  const ::pb_obstacle_sel::Obstacle& _internal_obstacle(int index) const;
  ::pb_obstacle_sel::Obstacle* _internal_add_obstacle();
  public:
  const ::pb_obstacle_sel::Obstacle& obstacle(int index) const;
  ::pb_obstacle_sel::Obstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Obstacle >&
      obstacle() const;

  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_obstacle_sel.ObstacleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Obstacle > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacleSel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogFile

// int32 frame_total_num = 1;
inline void LogFile::clear_frame_total_num() {
  frame_total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::_internal_frame_total_num() const {
  return frame_total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::frame_total_num() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.LogFile.frame_total_num)
  return _internal_frame_total_num();
}
inline void LogFile::_internal_set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_total_num_ = value;
}
inline void LogFile::set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_total_num(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.LogFile.frame_total_num)
}

// repeated .pb_obstacle_sel.Frame frame = 2;
inline int LogFile::_internal_frame_size() const {
  return frame_.size();
}
inline int LogFile::frame_size() const {
  return _internal_frame_size();
}
inline void LogFile::clear_frame() {
  frame_.Clear();
}
inline ::pb_obstacle_sel::Frame* LogFile::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:pb_obstacle_sel.LogFile.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Frame >*
LogFile::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:pb_obstacle_sel.LogFile.frame)
  return &frame_;
}
inline const ::pb_obstacle_sel::Frame& LogFile::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::pb_obstacle_sel::Frame& LogFile::frame(int index) const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.LogFile.frame)
  return _internal_frame(index);
}
inline ::pb_obstacle_sel::Frame* LogFile::_internal_add_frame() {
  return frame_.Add();
}
inline ::pb_obstacle_sel::Frame* LogFile::add_frame() {
  // @@protoc_insertion_point(field_add:pb_obstacle_sel.LogFile.frame)
  return _internal_add_frame();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Frame >&
LogFile::frame() const {
  // @@protoc_insertion_point(field_list:pb_obstacle_sel.LogFile.frame)
  return frame_;
}

// -------------------------------------------------------------------

// Frame

// int32 frame_id = 1;
inline void Frame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::frame_id() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Frame.frame_id)
  return _internal_frame_id();
}
inline void Frame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void Frame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Frame.frame_id)
}

// .pb_obstacle_sel.Path path = 2;
inline bool Frame::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool Frame::has_path() const {
  return _internal_has_path();
}
inline void Frame::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::pb_obstacle_sel::Path& Frame::_internal_path() const {
  const ::pb_obstacle_sel::Path* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_obstacle_sel::Path*>(
      &::pb_obstacle_sel::_Path_default_instance_);
}
inline const ::pb_obstacle_sel::Path& Frame::path() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Frame.path)
  return _internal_path();
}
inline ::pb_obstacle_sel::Path* Frame::release_path() {
  // @@protoc_insertion_point(field_release:pb_obstacle_sel.Frame.path)
  
  ::pb_obstacle_sel::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::pb_obstacle_sel::Path* Frame::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_obstacle_sel::Path>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::pb_obstacle_sel::Path* Frame::mutable_path() {
  // @@protoc_insertion_point(field_mutable:pb_obstacle_sel.Frame.path)
  return _internal_mutable_path();
}
inline void Frame::set_allocated_path(::pb_obstacle_sel::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:pb_obstacle_sel.Frame.path)
}

// .pb_obstacle_sel.ObstacleList obstacle_list = 3;
inline bool Frame::_internal_has_obstacle_list() const {
  return this != internal_default_instance() && obstacle_list_ != nullptr;
}
inline bool Frame::has_obstacle_list() const {
  return _internal_has_obstacle_list();
}
inline void Frame::clear_obstacle_list() {
  if (GetArenaNoVirtual() == nullptr && obstacle_list_ != nullptr) {
    delete obstacle_list_;
  }
  obstacle_list_ = nullptr;
}
inline const ::pb_obstacle_sel::ObstacleList& Frame::_internal_obstacle_list() const {
  const ::pb_obstacle_sel::ObstacleList* p = obstacle_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_obstacle_sel::ObstacleList*>(
      &::pb_obstacle_sel::_ObstacleList_default_instance_);
}
inline const ::pb_obstacle_sel::ObstacleList& Frame::obstacle_list() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Frame.obstacle_list)
  return _internal_obstacle_list();
}
inline ::pb_obstacle_sel::ObstacleList* Frame::release_obstacle_list() {
  // @@protoc_insertion_point(field_release:pb_obstacle_sel.Frame.obstacle_list)
  
  ::pb_obstacle_sel::ObstacleList* temp = obstacle_list_;
  obstacle_list_ = nullptr;
  return temp;
}
inline ::pb_obstacle_sel::ObstacleList* Frame::_internal_mutable_obstacle_list() {
  
  if (obstacle_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_obstacle_sel::ObstacleList>(GetArenaNoVirtual());
    obstacle_list_ = p;
  }
  return obstacle_list_;
}
inline ::pb_obstacle_sel::ObstacleList* Frame::mutable_obstacle_list() {
  // @@protoc_insertion_point(field_mutable:pb_obstacle_sel.Frame.obstacle_list)
  return _internal_mutable_obstacle_list();
}
inline void Frame::set_allocated_obstacle_list(::pb_obstacle_sel::ObstacleList* obstacle_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obstacle_list_;
  }
  if (obstacle_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obstacle_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle_list, submessage_arena);
    }
    
  } else {
    
  }
  obstacle_list_ = obstacle_list;
  // @@protoc_insertion_point(field_set_allocated:pb_obstacle_sel.Frame.obstacle_list)
}

// -------------------------------------------------------------------

// PathNode

// float car_x = 1;
inline void PathNode::clear_car_x() {
  car_x_ = 0;
}
inline float PathNode::_internal_car_x() const {
  return car_x_;
}
inline float PathNode::car_x() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.PathNode.car_x)
  return _internal_car_x();
}
inline void PathNode::_internal_set_car_x(float value) {
  
  car_x_ = value;
}
inline void PathNode::set_car_x(float value) {
  _internal_set_car_x(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.PathNode.car_x)
}

// float car_y = 2;
inline void PathNode::clear_car_y() {
  car_y_ = 0;
}
inline float PathNode::_internal_car_y() const {
  return car_y_;
}
inline float PathNode::car_y() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.PathNode.car_y)
  return _internal_car_y();
}
inline void PathNode::_internal_set_car_y(float value) {
  
  car_y_ = value;
}
inline void PathNode::set_car_y(float value) {
  _internal_set_car_y(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.PathNode.car_y)
}

// float flat_x = 3;
inline void PathNode::clear_flat_x() {
  flat_x_ = 0;
}
inline float PathNode::_internal_flat_x() const {
  return flat_x_;
}
inline float PathNode::flat_x() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.PathNode.flat_x)
  return _internal_flat_x();
}
inline void PathNode::_internal_set_flat_x(float value) {
  
  flat_x_ = value;
}
inline void PathNode::set_flat_x(float value) {
  _internal_set_flat_x(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.PathNode.flat_x)
}

// float flat_y = 4;
inline void PathNode::clear_flat_y() {
  flat_y_ = 0;
}
inline float PathNode::_internal_flat_y() const {
  return flat_y_;
}
inline float PathNode::flat_y() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.PathNode.flat_y)
  return _internal_flat_y();
}
inline void PathNode::_internal_set_flat_y(float value) {
  
  flat_y_ = value;
}
inline void PathNode::set_flat_y(float value) {
  _internal_set_flat_y(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.PathNode.flat_y)
}

// float s = 5;
inline void PathNode::clear_s() {
  s_ = 0;
}
inline float PathNode::_internal_s() const {
  return s_;
}
inline float PathNode::s() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.PathNode.s)
  return _internal_s();
}
inline void PathNode::_internal_set_s(float value) {
  
  s_ = value;
}
inline void PathNode::set_s(float value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.PathNode.s)
}

// float d = 6;
inline void PathNode::clear_d() {
  d_ = 0;
}
inline float PathNode::_internal_d() const {
  return d_;
}
inline float PathNode::d() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.PathNode.d)
  return _internal_d();
}
inline void PathNode::_internal_set_d(float value) {
  
  d_ = value;
}
inline void PathNode::set_d(float value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.PathNode.d)
}

// -------------------------------------------------------------------

// Path

// int32 node_id = 1;
inline void Path::clear_node_id() {
  node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Path::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Path::node_id() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Path.node_id)
  return _internal_node_id();
}
inline void Path::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_id_ = value;
}
inline void Path::set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Path.node_id)
}

// repeated .pb_obstacle_sel.PathNode path_node = 2;
inline int Path::_internal_path_node_size() const {
  return path_node_.size();
}
inline int Path::path_node_size() const {
  return _internal_path_node_size();
}
inline void Path::clear_path_node() {
  path_node_.Clear();
}
inline ::pb_obstacle_sel::PathNode* Path::mutable_path_node(int index) {
  // @@protoc_insertion_point(field_mutable:pb_obstacle_sel.Path.path_node)
  return path_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::PathNode >*
Path::mutable_path_node() {
  // @@protoc_insertion_point(field_mutable_list:pb_obstacle_sel.Path.path_node)
  return &path_node_;
}
inline const ::pb_obstacle_sel::PathNode& Path::_internal_path_node(int index) const {
  return path_node_.Get(index);
}
inline const ::pb_obstacle_sel::PathNode& Path::path_node(int index) const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Path.path_node)
  return _internal_path_node(index);
}
inline ::pb_obstacle_sel::PathNode* Path::_internal_add_path_node() {
  return path_node_.Add();
}
inline ::pb_obstacle_sel::PathNode* Path::add_path_node() {
  // @@protoc_insertion_point(field_add:pb_obstacle_sel.Path.path_node)
  return _internal_add_path_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::PathNode >&
Path::path_node() const {
  // @@protoc_insertion_point(field_list:pb_obstacle_sel.Path.path_node)
  return path_node_;
}

// -------------------------------------------------------------------

// Obstacle

// int32 id = 1;
inline void Obstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.id)
  return _internal_id();
}
inline void Obstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.id)
}

// int32 type = 2;
inline void Obstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::type() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.type)
  return _internal_type();
}
inline void Obstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Obstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.type)
}

// float pos_x = 3;
inline void Obstacle::clear_pos_x() {
  pos_x_ = 0;
}
inline float Obstacle::_internal_pos_x() const {
  return pos_x_;
}
inline float Obstacle::pos_x() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.pos_x)
  return _internal_pos_x();
}
inline void Obstacle::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Obstacle::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.pos_x)
}

// float pos_y = 4;
inline void Obstacle::clear_pos_y() {
  pos_y_ = 0;
}
inline float Obstacle::_internal_pos_y() const {
  return pos_y_;
}
inline float Obstacle::pos_y() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.pos_y)
  return _internal_pos_y();
}
inline void Obstacle::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Obstacle::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.pos_y)
}

// float pos_s = 5;
inline void Obstacle::clear_pos_s() {
  pos_s_ = 0;
}
inline float Obstacle::_internal_pos_s() const {
  return pos_s_;
}
inline float Obstacle::pos_s() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.pos_s)
  return _internal_pos_s();
}
inline void Obstacle::_internal_set_pos_s(float value) {
  
  pos_s_ = value;
}
inline void Obstacle::set_pos_s(float value) {
  _internal_set_pos_s(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.pos_s)
}

// float pos_d = 6;
inline void Obstacle::clear_pos_d() {
  pos_d_ = 0;
}
inline float Obstacle::_internal_pos_d() const {
  return pos_d_;
}
inline float Obstacle::pos_d() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.pos_d)
  return _internal_pos_d();
}
inline void Obstacle::_internal_set_pos_d(float value) {
  
  pos_d_ = value;
}
inline void Obstacle::set_pos_d(float value) {
  _internal_set_pos_d(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.pos_d)
}

// float rel_spd_x = 7;
inline void Obstacle::clear_rel_spd_x() {
  rel_spd_x_ = 0;
}
inline float Obstacle::_internal_rel_spd_x() const {
  return rel_spd_x_;
}
inline float Obstacle::rel_spd_x() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.rel_spd_x)
  return _internal_rel_spd_x();
}
inline void Obstacle::_internal_set_rel_spd_x(float value) {
  
  rel_spd_x_ = value;
}
inline void Obstacle::set_rel_spd_x(float value) {
  _internal_set_rel_spd_x(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.rel_spd_x)
}

// float rel_spd_y = 8;
inline void Obstacle::clear_rel_spd_y() {
  rel_spd_y_ = 0;
}
inline float Obstacle::_internal_rel_spd_y() const {
  return rel_spd_y_;
}
inline float Obstacle::rel_spd_y() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.Obstacle.rel_spd_y)
  return _internal_rel_spd_y();
}
inline void Obstacle::_internal_set_rel_spd_y(float value) {
  
  rel_spd_y_ = value;
}
inline void Obstacle::set_rel_spd_y(float value) {
  _internal_set_rel_spd_y(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.Obstacle.rel_spd_y)
}

// -------------------------------------------------------------------

// ObstacleList

// int32 num = 1;
inline void ObstacleList::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleList::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleList::num() const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.ObstacleList.num)
  return _internal_num();
}
inline void ObstacleList::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void ObstacleList::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:pb_obstacle_sel.ObstacleList.num)
}

// repeated .pb_obstacle_sel.Obstacle obstacle = 2;
inline int ObstacleList::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int ObstacleList::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void ObstacleList::clear_obstacle() {
  obstacle_.Clear();
}
inline ::pb_obstacle_sel::Obstacle* ObstacleList::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:pb_obstacle_sel.ObstacleList.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Obstacle >*
ObstacleList::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:pb_obstacle_sel.ObstacleList.obstacle)
  return &obstacle_;
}
inline const ::pb_obstacle_sel::Obstacle& ObstacleList::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::pb_obstacle_sel::Obstacle& ObstacleList::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:pb_obstacle_sel.ObstacleList.obstacle)
  return _internal_obstacle(index);
}
inline ::pb_obstacle_sel::Obstacle* ObstacleList::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::pb_obstacle_sel::Obstacle* ObstacleList::add_obstacle() {
  // @@protoc_insertion_point(field_add:pb_obstacle_sel.ObstacleList.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_obstacle_sel::Obstacle >&
ObstacleList::obstacle() const {
  // @@protoc_insertion_point(field_list:pb_obstacle_sel.ObstacleList.obstacle)
  return obstacle_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_obstacle_sel

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacleSel_2eproto
