// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socket_all.proto

#include "socket_all.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DecisionToPC_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_socket_5fall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HdmapToPc_data_socket_5fall_2eproto;
namespace socket_all {
class LogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogFile> _instance;
} _LogFile_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class HdmapToPc_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HdmapToPc_data> _instance;
} _HdmapToPc_data_default_instance_;
class Dt_RECORD_HdmapInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_HdmapInfo> _instance;
} _Dt_RECORD_HdmapInfo_default_instance_;
class Dt_RECORD_HdmapFrontPLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_HdmapFrontPLane> _instance;
} _Dt_RECORD_HdmapFrontPLane_default_instance_;
class Dt_RECORD_PlanSegDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_PlanSeg> _instance;
} _Dt_RECORD_PlanSeg_default_instance_;
class Dt_RECORD_HdMapLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_HdMapLane> _instance;
} _Dt_RECORD_HdMapLane_default_instance_;
class Dt_ARRAY_100_LaneNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_ARRAY_100_LaneNode> _instance;
} _Dt_ARRAY_100_LaneNode_default_instance_;
class Dt_RECORD_PoiObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_PoiObstacle> _instance;
} _Dt_RECORD_PoiObstacle_default_instance_;
class Dt_RECORD_MarkArrowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_MarkArrow> _instance;
} _Dt_RECORD_MarkArrow_default_instance_;
class Dt_RECORD_HdmapLocalLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_HdmapLocalLane> _instance;
} _Dt_RECORD_HdmapLocalLane_default_instance_;
class Dt_RECORD_CrosswalkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_Crosswalk> _instance;
} _Dt_RECORD_Crosswalk_default_instance_;
class DecisionToPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionToPC> _instance;
} _DecisionToPC_default_instance_;
class Dt_RECORD_LocalizationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_LocalizationInfo> _instance;
} _Dt_RECORD_LocalizationInfo_default_instance_;
class Dt_RECORD_LocalizationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_LocalizationResult> _instance;
} _Dt_RECORD_LocalizationResult_default_instance_;
class Dt_RECORD_TrajectoryPointsInfosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_TrajectoryPointsInfos> _instance;
} _Dt_RECORD_TrajectoryPointsInfos_default_instance_;
class Dt_RECORD_TrajectoryPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dt_RECORD_TrajectoryPoints> _instance;
} _Dt_RECORD_TrajectoryPoints_default_instance_;
}  // namespace socket_all
static void InitDefaultsscc_info_DecisionToPC_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_DecisionToPC_default_instance_;
    new (ptr) ::socket_all::DecisionToPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::DecisionToPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DecisionToPC_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DecisionToPC_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_ARRAY_100_LaneNode_default_instance_;
    new (ptr) ::socket_all::Dt_ARRAY_100_LaneNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_ARRAY_100_LaneNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_Crosswalk_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_Crosswalk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_Crosswalk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_HdMapLane_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_HdMapLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_HdMapLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto}, {
      &scc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_HdmapFrontPLane_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_HdmapFrontPLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_HdmapFrontPLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_HdmapInfo_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_HdmapInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_HdmapInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_HdmapLocalLane_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_HdmapLocalLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_HdmapLocalLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_LocalizationInfo_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_LocalizationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_LocalizationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_LocalizationResult_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_LocalizationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_LocalizationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_MarkArrow_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_MarkArrow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_MarkArrow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_PlanSeg_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_PlanSeg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_PlanSeg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_PoiObstacle_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_PoiObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_PoiObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_TrajectoryPoints_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_TrajectoryPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_TrajectoryPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto}, {}};

static void InitDefaultsscc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Dt_RECORD_TrajectoryPointsInfos_default_instance_;
    new (ptr) ::socket_all::Dt_RECORD_TrajectoryPointsInfos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Dt_RECORD_TrajectoryPointsInfos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_Frame_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_Frame_default_instance_;
    new (ptr) ::socket_all::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Frame_socket_5fall_2eproto}, {
      &scc_info_HdmapToPc_data_socket_5fall_2eproto.base,
      &scc_info_DecisionToPC_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_HdmapToPc_data_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_HdmapToPc_data_default_instance_;
    new (ptr) ::socket_all::HdmapToPc_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::HdmapToPc_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HdmapToPc_data_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HdmapToPc_data_socket_5fall_2eproto}, {
      &scc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto.base,
      &scc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto.base,}};

static void InitDefaultsscc_info_LogFile_socket_5fall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::socket_all::_LogFile_default_instance_;
    new (ptr) ::socket_all::LogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::socket_all::LogFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogFile_socket_5fall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogFile_socket_5fall_2eproto}, {
      &scc_info_Frame_socket_5fall_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_socket_5fall_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_socket_5fall_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_socket_5fall_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_socket_5fall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::LogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::LogFile, frame_total_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::LogFile, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Frame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Frame, hdmaptopc_data_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Frame, decisiontopc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::HdmapToPc_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::HdmapToPc_data, g_hdmapinfo_),
  PROTOBUF_FIELD_OFFSET(::socket_all::HdmapToPc_data, g_frontplane_),
  PROTOBUF_FIELD_OFFSET(::socket_all::HdmapToPc_data, g_locallane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, planpath_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, origin_x_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, origin_y_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, origin_z_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, origin_yaw_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, goal_x_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, goal_y_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, goal_z_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapInfo, goal_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapFrontPLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapFrontPLane, plan_seg_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapFrontPLane, planseg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PlanSeg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PlanSeg, lane_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PlanSeg, lane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, node_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lanenode_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, laneid_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, change_lane_flag_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_no_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_position_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_type_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_width_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_length_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_way_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, turn_info_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lboundaryid_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lboundary_type_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lboundary_color_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, rboundaryid_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, rboundary_type_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, rboundary_color_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, road_id_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, road_type_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, road_position_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, road_direction_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, road_length_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, road_width_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, lane_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, poi_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, obstacle_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, mark_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, arrow_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, crosswalk_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, hgnode_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, poi_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, obstacle_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, mark_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, arrow_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, crosswalk_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, hgnodeid_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdMapLane, hgnode_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, hdmap_x_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, hdmap_y_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, hdmap_z_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, heading_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, curvature_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_ARRAY_100_LaneNode, slopev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PoiObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PoiObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PoiObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_PoiObstacle, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_MarkArrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_MarkArrow, id_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_MarkArrow, type_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_MarkArrow, color_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_MarkArrow, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapLocalLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapLocalLane, lane_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapLocalLane, locallane_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapLocalLane, next_seg_count_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_HdmapLocalLane, nextseg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_Crosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_Crosswalk, id_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_Crosswalk, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::DecisionToPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::DecisionToPC, my_localizationinfo_),
  PROTOBUF_FIELD_OFFSET(::socket_all::DecisionToPC, my_trajectorypointsinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, localizationresult_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, yaw_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, pitch_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, roll_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, yawrate_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, a_lon_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, a_lat_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, v_lat_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationInfo, v_lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, valid_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, x_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, y_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, z_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, qx_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, qy_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, qz_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_LocalizationResult, qw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, origin_yaw_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, point_num_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, array_length_dummy_0_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, trajectorypoints_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, decision_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, hold_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPointsInfos, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, x_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, y_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, x_g_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, y_g_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, t_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, lon_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, lat_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, theta_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, v_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, a_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, kappa_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, slope_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, lane_no_),
  PROTOBUF_FIELD_OFFSET(::socket_all::Dt_RECORD_TrajectoryPoints, road_no_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::socket_all::LogFile)},
  { 7, -1, sizeof(::socket_all::Frame)},
  { 15, -1, sizeof(::socket_all::HdmapToPc_data)},
  { 23, -1, sizeof(::socket_all::Dt_RECORD_HdmapInfo)},
  { 37, -1, sizeof(::socket_all::Dt_RECORD_HdmapFrontPLane)},
  { 44, -1, sizeof(::socket_all::Dt_RECORD_PlanSeg)},
  { 51, -1, sizeof(::socket_all::Dt_RECORD_HdMapLane)},
  { 94, -1, sizeof(::socket_all::Dt_ARRAY_100_LaneNode)},
  { 105, -1, sizeof(::socket_all::Dt_RECORD_PoiObstacle)},
  { 113, -1, sizeof(::socket_all::Dt_RECORD_MarkArrow)},
  { 122, -1, sizeof(::socket_all::Dt_RECORD_HdmapLocalLane)},
  { 131, -1, sizeof(::socket_all::Dt_RECORD_Crosswalk)},
  { 138, -1, sizeof(::socket_all::DecisionToPC)},
  { 145, -1, sizeof(::socket_all::Dt_RECORD_LocalizationInfo)},
  { 162, -1, sizeof(::socket_all::Dt_RECORD_LocalizationResult)},
  { 175, -1, sizeof(::socket_all::Dt_RECORD_TrajectoryPointsInfos)},
  { 187, -1, sizeof(::socket_all::Dt_RECORD_TrajectoryPoints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_LogFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_HdmapToPc_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_HdmapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_HdmapFrontPLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_PlanSeg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_HdMapLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_ARRAY_100_LaneNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_PoiObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_MarkArrow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_HdmapLocalLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_Crosswalk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_DecisionToPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_LocalizationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_LocalizationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_TrajectoryPointsInfos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::socket_all::_Dt_RECORD_TrajectoryPoints_default_instance_),
};

const char descriptor_table_protodef_socket_5fall_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020socket_all.proto\022\nsocket_all\"D\n\007LogFil"
  "e\022\027\n\017frame_total_num\030\001 \001(\005\022 \n\005frame\030\002 \003("
  "\0132\021.socket_all.Frame\"}\n\005Frame\022\020\n\010frame_i"
  "d\030\001 \001(\005\0222\n\016hdmapToPc_data\030\002 \001(\0132\032.socket"
  "_all.HdmapToPc_data\022.\n\014decisionToPC\030\003 \001("
  "\0132\030.socket_all.DecisionToPC\"\276\001\n\016HdmapToP"
  "c_data\0224\n\013G_HdmapInfo\030\001 \001(\0132\037.socket_all"
  ".Dt_RECORD_HdmapInfo\022;\n\014G_FrontPLane\030\002 \001"
  "(\0132%.socket_all.Dt_RECORD_HdmapFrontPLan"
  "e\0229\n\013G_LocalLane\030\003 \001(\0132$.socket_all.Dt_R"
  "ECORD_HdmapLocalLane\"\263\001\n\023Dt_RECORD_Hdmap"
  "Info\022\020\n\010planpath\030\001 \001(\010\022\020\n\010origin_x\030\002 \001(\002"
  "\022\020\n\010origin_y\030\003 \001(\002\022\020\n\010origin_z\030\004 \001(\002\022\022\n\n"
  "origin_yaw\030\005 \001(\002\022\016\n\006goal_x\030\006 \001(\002\022\016\n\006goal"
  "_y\030\007 \001(\002\022\016\n\006goal_z\030\010 \001(\002\022\020\n\010goal_yaw\030\t \001"
  "(\002\"c\n\031Dt_RECORD_HdmapFrontPLane\022\026\n\016plan_"
  "seg_count\030\001 \001(\005\022.\n\007PlanSeg\030\002 \003(\0132\035.socke"
  "t_all.Dt_RECORD_PlanSeg\"V\n\021Dt_RECORD_Pla"
  "nSeg\022\022\n\nlane_count\030\001 \001(\005\022-\n\004Lane\030\002 \003(\0132\037"
  ".socket_all.Dt_RECORD_HdMapLane\"\342\007\n\023Dt_R"
  "ECORD_HdMapLane\022\022\n\nnode_count\030\001 \001(\r\0223\n\010L"
  "aneNode\030\002 \003(\0132!.socket_all.Dt_ARRAY_100_"
  "LaneNode\022\016\n\006laneID\030\003 \001(\r\022\030\n\020change_lane_"
  "flag\030\004 \001(\010\022\017\n\007lane_NO\030\005 \001(\005\022\025\n\rlane_posi"
  "tion\030\006 \001(\r\022\021\n\tlane_type\030\007 \001(\r\022\022\n\nlane_wi"
  "dth\030\010 \001(\002\022\023\n\013lane_length\030\t \001(\002\022\026\n\016lane_w"
  "ay_count\030\n \001(\r\022\021\n\tturn_info\030\013 \001(\r\022\023\n\013lbo"
  "undaryID\030\014 \001(\r\022\026\n\016lboundary_type\030\r \001(\r\022\027"
  "\n\017lboundary_color\030\016 \001(\r\022\023\n\013rboundaryID\030\017"
  " \001(\r\022\026\n\016rboundary_type\030\020 \001(\r\022\027\n\017rboundar"
  "y_color\030\021 \001(\r\022\017\n\007road_ID\030\022 \001(\r\022\021\n\troad_t"
  "ype\030\023 \001(\r\022\025\n\rroad_position\030\024 \001(\r\022\026\n\016road"
  "_direction\030\025 \001(\r\022\023\n\013road_length\030\026 \001(\002\022\022\n"
  "\nroad_width\030\027 \001(\002\022\022\n\nlane_count\030\030 \001(\r\022\023\n"
  "\013speed_limit\030\031 \001(\002\022\017\n\007POI_num\030\032 \001(\r\022\024\n\014o"
  "bstacle_num\030\033 \001(\r\022\020\n\010mark_num\030\034 \001(\r\022\021\n\ta"
  "rrow_num\030\035 \001(\r\022\025\n\rcrosswalk_num\030\036 \001(\r\022\022\n"
  "\nHGNode_num\030\037 \001(\r\022.\n\003POI\030  \003(\0132!.socket_"
  "all.Dt_RECORD_PoiObstacle\0223\n\010Obstacle\030! "
  "\003(\0132!.socket_all.Dt_RECORD_PoiObstacle\022-"
  "\n\004Mark\030\" \003(\0132\037.socket_all.Dt_RECORD_Mark"
  "Arrow\022.\n\005Arrow\030# \003(\0132\037.socket_all.Dt_REC"
  "ORD_MarkArrow\0222\n\tCrosswalk\030$ \003(\0132\037.socke"
  "t_all.Dt_RECORD_Crosswalk\022\020\n\010hgnodeID\030% "
  "\001(\r\022\027\n\017hgnode_distance\030& \001(\002\"~\n\025Dt_ARRAY"
  "_100_LaneNode\022\017\n\007hdmap_x\030\001 \001(\002\022\017\n\007hdmap_"
  "y\030\002 \001(\002\022\017\n\007hdmap_z\030\003 \001(\002\022\017\n\007heading\030\004 \001("
  "\002\022\021\n\tcurvature\030\005 \001(\002\022\016\n\006slopev\030\006 \001(\002\"C\n\025"
  "Dt_RECORD_PoiObstacle\022\n\n\002ID\030\001 \001(\r\022\014\n\004typ"
  "e\030\002 \001(\r\022\020\n\010distance\030\003 \001(\002\"P\n\023Dt_RECORD_M"
  "arkArrow\022\n\n\002ID\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005co"
  "lor\030\003 \001(\r\022\020\n\010distance\030\004 \001(\002\"\252\001\n\030Dt_RECOR"
  "D_HdmapLocalLane\022\022\n\nlane_count\030\001 \001(\r\0222\n\t"
  "LocalLane\030\002 \003(\0132\037.socket_all.Dt_RECORD_H"
  "dMapLane\022\026\n\016next_seg_count\030\003 \001(\r\022.\n\007Next"
  "Seg\030\004 \003(\0132\035.socket_all.Dt_RECORD_PlanSeg"
  "\"3\n\023Dt_RECORD_Crosswalk\022\n\n\002ID\030\001 \001(\r\022\020\n\010d"
  "istance\030\002 \001(\002\"\241\001\n\014DecisionToPC\022C\n\023my_loc"
  "alizationInfo\030\001 \001(\0132&.socket_all.Dt_RECO"
  "RD_LocalizationInfo\022L\n\027my_trajectoryPoin"
  "tsInfo\030\002 \001(\0132+.socket_all.Dt_RECORD_Traj"
  "ectoryPointsInfos\"\222\002\n\032Dt_RECORD_Localiza"
  "tionInfo\022\022\n\ntime_stamp\030\001 \001(\004\022D\n\022Localiza"
  "tionResult\030\002 \001(\0132(.socket_all.Dt_RECORD_"
  "LocalizationResult\022\020\n\010Latitude\030\003 \001(\002\022\021\n\t"
  "Longitude\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\022\r\n\005pitch\030\006 "
  "\001(\002\022\014\n\004roll\030\007 \001(\002\022\017\n\007yawrate\030\010 \001(\002\022\r\n\005a_"
  "lon\030\t \001(\002\022\r\n\005a_lat\030\n \001(\002\022\r\n\005v_lat\030\013 \001(\002\022"
  "\r\n\005v_lon\030\014 \001(\002\"~\n\034Dt_RECORD_Localization"
  "Result\022\r\n\005valid\030\001 \001(\010\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 "
  "\001(\002\022\t\n\001z\030\004 \001(\002\022\n\n\002qx\030\005 \001(\002\022\n\n\002qy\030\006 \001(\002\022\n"
  "\n\002qz\030\007 \001(\002\022\n\n\002qw\030\010 \001(\002\"\333\001\n\037Dt_RECORD_Tra"
  "jectoryPointsInfos\022\022\n\norigin_yaw\030\001 \001(\002\022\021"
  "\n\tpoint_num\030\002 \001(\r\022\034\n\024Array_Length_Dummy_"
  "0\030\003 \001(\r\022@\n\020TrajectoryPoints\030\004 \003(\0132&.sock"
  "et_all.Dt_RECORD_TrajectoryPoints\022\020\n\010dec"
  "ision\030\005 \001(\r\022\014\n\004hold\030\006 \001(\010\022\021\n\tdirection\030\007"
  " \001(\r\"\326\001\n\032Dt_RECORD_TrajectoryPoints\022\t\n\001x"
  "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\013\n\003x_g\030\003 \001(\002\022\013\n\003y_g\030\004 "
  "\001(\002\022\t\n\001t\030\005 \001(\002\022\013\n\003lon\030\006 \001(\002\022\013\n\003lat\030\007 \001(\002"
  "\022\r\n\005theta\030\010 \001(\002\022\t\n\001v\030\t \001(\002\022\t\n\001a\030\n \001(\002\022\r\n"
  "\005kappa\030\013 \001(\002\022\r\n\005slope\030\014 \001(\002\022\017\n\007lane_no\030\r"
  " \001(\r\022\017\n\007road_no\030\016 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_socket_5fall_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_socket_5fall_2eproto_sccs[17] = {
  &scc_info_DecisionToPC_socket_5fall_2eproto.base,
  &scc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto.base,
  &scc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto.base,
  &scc_info_Frame_socket_5fall_2eproto.base,
  &scc_info_HdmapToPc_data_socket_5fall_2eproto.base,
  &scc_info_LogFile_socket_5fall_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_socket_5fall_2eproto_once;
static bool descriptor_table_socket_5fall_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_socket_5fall_2eproto = {
  &descriptor_table_socket_5fall_2eproto_initialized, descriptor_table_protodef_socket_5fall_2eproto, "socket_all.proto", 3309,
  &descriptor_table_socket_5fall_2eproto_once, descriptor_table_socket_5fall_2eproto_sccs, descriptor_table_socket_5fall_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_socket_5fall_2eproto::offsets,
  file_level_metadata_socket_5fall_2eproto, 17, file_level_enum_descriptors_socket_5fall_2eproto, file_level_service_descriptors_socket_5fall_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_socket_5fall_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_socket_5fall_2eproto)), true);
namespace socket_all {

// ===================================================================

void LogFile::InitAsDefaultInstance() {
}
class LogFile::_Internal {
 public:
};

LogFile::LogFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.LogFile)
}
LogFile::LogFile(const LogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      frame_(from.frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_total_num_ = from.frame_total_num_;
  // @@protoc_insertion_point(copy_constructor:socket_all.LogFile)
}

void LogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogFile_socket_5fall_2eproto.base);
  frame_total_num_ = 0;
}

LogFile::~LogFile() {
  // @@protoc_insertion_point(destructor:socket_all.LogFile)
  SharedDtor();
}

void LogFile::SharedDtor() {
}

void LogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogFile& LogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogFile_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void LogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  frame_total_num_ = 0;
  _internal_metadata_.Clear();
}

const char* LogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_total_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_total_num = 1;
  if (this->frame_total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_total_num(), target);
  }

  // repeated .socket_all.Frame frame = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frame(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.LogFile)
  return target;
}

size_t LogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.LogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .socket_all.Frame frame = 2;
  total_size += 1UL * this->_internal_frame_size();
  for (const auto& msg : this->frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frame_total_num = 1;
  if (this->frame_total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_total_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const LogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.LogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.LogFile)
    MergeFrom(*source);
  }
}

void LogFile::MergeFrom(const LogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
  if (from.frame_total_num() != 0) {
    _internal_set_frame_total_num(from._internal_frame_total_num());
  }
}

void LogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogFile::CopyFrom(const LogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogFile::IsInitialized() const {
  return true;
}

void LogFile::InternalSwap(LogFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_.InternalSwap(&other->frame_);
  swap(frame_total_num_, other->frame_total_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::socket_all::_Frame_default_instance_._instance.get_mutable()->hdmaptopc_data_ = const_cast< ::socket_all::HdmapToPc_data*>(
      ::socket_all::HdmapToPc_data::internal_default_instance());
  ::socket_all::_Frame_default_instance_._instance.get_mutable()->decisiontopc_ = const_cast< ::socket_all::DecisionToPC*>(
      ::socket_all::DecisionToPC::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::socket_all::HdmapToPc_data& hdmaptopc_data(const Frame* msg);
  static const ::socket_all::DecisionToPC& decisiontopc(const Frame* msg);
};

const ::socket_all::HdmapToPc_data&
Frame::_Internal::hdmaptopc_data(const Frame* msg) {
  return *msg->hdmaptopc_data_;
}
const ::socket_all::DecisionToPC&
Frame::_Internal::decisiontopc(const Frame* msg) {
  return *msg->decisiontopc_;
}
Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_hdmaptopc_data()) {
    hdmaptopc_data_ = new ::socket_all::HdmapToPc_data(*from.hdmaptopc_data_);
  } else {
    hdmaptopc_data_ = nullptr;
  }
  if (from._internal_has_decisiontopc()) {
    decisiontopc_ = new ::socket_all::DecisionToPC(*from.decisiontopc_);
  } else {
    decisiontopc_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:socket_all.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_socket_5fall_2eproto.base);
  ::memset(&hdmaptopc_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&hdmaptopc_data_)) + sizeof(frame_id_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:socket_all.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete hdmaptopc_data_;
  if (this != internal_default_instance()) delete decisiontopc_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hdmaptopc_data_ != nullptr) {
    delete hdmaptopc_data_;
  }
  hdmaptopc_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && decisiontopc_ != nullptr) {
    delete decisiontopc_;
  }
  decisiontopc_ = nullptr;
  frame_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .socket_all.HdmapToPc_data hdmapToPc_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdmaptopc_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .socket_all.DecisionToPC decisionToPC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_decisiontopc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // .socket_all.HdmapToPc_data hdmapToPc_data = 2;
  if (this->has_hdmaptopc_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hdmaptopc_data(this), target, stream);
  }

  // .socket_all.DecisionToPC decisionToPC = 3;
  if (this->has_decisiontopc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::decisiontopc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .socket_all.HdmapToPc_data hdmapToPc_data = 2;
  if (this->has_hdmaptopc_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdmaptopc_data_);
  }

  // .socket_all.DecisionToPC decisionToPC = 3;
  if (this->has_decisiontopc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *decisiontopc_);
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdmaptopc_data()) {
    _internal_mutable_hdmaptopc_data()->::socket_all::HdmapToPc_data::MergeFrom(from._internal_hdmaptopc_data());
  }
  if (from.has_decisiontopc()) {
    _internal_mutable_decisiontopc()->::socket_all::DecisionToPC::MergeFrom(from._internal_decisiontopc());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdmaptopc_data_, other->hdmaptopc_data_);
  swap(decisiontopc_, other->decisiontopc_);
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HdmapToPc_data::InitAsDefaultInstance() {
  ::socket_all::_HdmapToPc_data_default_instance_._instance.get_mutable()->g_hdmapinfo_ = const_cast< ::socket_all::Dt_RECORD_HdmapInfo*>(
      ::socket_all::Dt_RECORD_HdmapInfo::internal_default_instance());
  ::socket_all::_HdmapToPc_data_default_instance_._instance.get_mutable()->g_frontplane_ = const_cast< ::socket_all::Dt_RECORD_HdmapFrontPLane*>(
      ::socket_all::Dt_RECORD_HdmapFrontPLane::internal_default_instance());
  ::socket_all::_HdmapToPc_data_default_instance_._instance.get_mutable()->g_locallane_ = const_cast< ::socket_all::Dt_RECORD_HdmapLocalLane*>(
      ::socket_all::Dt_RECORD_HdmapLocalLane::internal_default_instance());
}
class HdmapToPc_data::_Internal {
 public:
  static const ::socket_all::Dt_RECORD_HdmapInfo& g_hdmapinfo(const HdmapToPc_data* msg);
  static const ::socket_all::Dt_RECORD_HdmapFrontPLane& g_frontplane(const HdmapToPc_data* msg);
  static const ::socket_all::Dt_RECORD_HdmapLocalLane& g_locallane(const HdmapToPc_data* msg);
};

const ::socket_all::Dt_RECORD_HdmapInfo&
HdmapToPc_data::_Internal::g_hdmapinfo(const HdmapToPc_data* msg) {
  return *msg->g_hdmapinfo_;
}
const ::socket_all::Dt_RECORD_HdmapFrontPLane&
HdmapToPc_data::_Internal::g_frontplane(const HdmapToPc_data* msg) {
  return *msg->g_frontplane_;
}
const ::socket_all::Dt_RECORD_HdmapLocalLane&
HdmapToPc_data::_Internal::g_locallane(const HdmapToPc_data* msg) {
  return *msg->g_locallane_;
}
HdmapToPc_data::HdmapToPc_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.HdmapToPc_data)
}
HdmapToPc_data::HdmapToPc_data(const HdmapToPc_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_g_hdmapinfo()) {
    g_hdmapinfo_ = new ::socket_all::Dt_RECORD_HdmapInfo(*from.g_hdmapinfo_);
  } else {
    g_hdmapinfo_ = nullptr;
  }
  if (from._internal_has_g_frontplane()) {
    g_frontplane_ = new ::socket_all::Dt_RECORD_HdmapFrontPLane(*from.g_frontplane_);
  } else {
    g_frontplane_ = nullptr;
  }
  if (from._internal_has_g_locallane()) {
    g_locallane_ = new ::socket_all::Dt_RECORD_HdmapLocalLane(*from.g_locallane_);
  } else {
    g_locallane_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:socket_all.HdmapToPc_data)
}

void HdmapToPc_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HdmapToPc_data_socket_5fall_2eproto.base);
  ::memset(&g_hdmapinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&g_locallane_) -
      reinterpret_cast<char*>(&g_hdmapinfo_)) + sizeof(g_locallane_));
}

HdmapToPc_data::~HdmapToPc_data() {
  // @@protoc_insertion_point(destructor:socket_all.HdmapToPc_data)
  SharedDtor();
}

void HdmapToPc_data::SharedDtor() {
  if (this != internal_default_instance()) delete g_hdmapinfo_;
  if (this != internal_default_instance()) delete g_frontplane_;
  if (this != internal_default_instance()) delete g_locallane_;
}

void HdmapToPc_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdmapToPc_data& HdmapToPc_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HdmapToPc_data_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void HdmapToPc_data::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.HdmapToPc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && g_hdmapinfo_ != nullptr) {
    delete g_hdmapinfo_;
  }
  g_hdmapinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && g_frontplane_ != nullptr) {
    delete g_frontplane_;
  }
  g_frontplane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && g_locallane_ != nullptr) {
    delete g_locallane_;
  }
  g_locallane_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HdmapToPc_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .socket_all.Dt_RECORD_HdmapInfo G_HdmapInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_hdmapinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .socket_all.Dt_RECORD_HdmapFrontPLane G_FrontPLane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_frontplane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .socket_all.Dt_RECORD_HdmapLocalLane G_LocalLane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_locallane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HdmapToPc_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.HdmapToPc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .socket_all.Dt_RECORD_HdmapInfo G_HdmapInfo = 1;
  if (this->has_g_hdmapinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::g_hdmapinfo(this), target, stream);
  }

  // .socket_all.Dt_RECORD_HdmapFrontPLane G_FrontPLane = 2;
  if (this->has_g_frontplane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::g_frontplane(this), target, stream);
  }

  // .socket_all.Dt_RECORD_HdmapLocalLane G_LocalLane = 3;
  if (this->has_g_locallane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::g_locallane(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.HdmapToPc_data)
  return target;
}

size_t HdmapToPc_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.HdmapToPc_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .socket_all.Dt_RECORD_HdmapInfo G_HdmapInfo = 1;
  if (this->has_g_hdmapinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_hdmapinfo_);
  }

  // .socket_all.Dt_RECORD_HdmapFrontPLane G_FrontPLane = 2;
  if (this->has_g_frontplane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_frontplane_);
  }

  // .socket_all.Dt_RECORD_HdmapLocalLane G_LocalLane = 3;
  if (this->has_g_locallane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_locallane_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdmapToPc_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.HdmapToPc_data)
  GOOGLE_DCHECK_NE(&from, this);
  const HdmapToPc_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HdmapToPc_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.HdmapToPc_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.HdmapToPc_data)
    MergeFrom(*source);
  }
}

void HdmapToPc_data::MergeFrom(const HdmapToPc_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.HdmapToPc_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_g_hdmapinfo()) {
    _internal_mutable_g_hdmapinfo()->::socket_all::Dt_RECORD_HdmapInfo::MergeFrom(from._internal_g_hdmapinfo());
  }
  if (from.has_g_frontplane()) {
    _internal_mutable_g_frontplane()->::socket_all::Dt_RECORD_HdmapFrontPLane::MergeFrom(from._internal_g_frontplane());
  }
  if (from.has_g_locallane()) {
    _internal_mutable_g_locallane()->::socket_all::Dt_RECORD_HdmapLocalLane::MergeFrom(from._internal_g_locallane());
  }
}

void HdmapToPc_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.HdmapToPc_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdmapToPc_data::CopyFrom(const HdmapToPc_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.HdmapToPc_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdmapToPc_data::IsInitialized() const {
  return true;
}

void HdmapToPc_data::InternalSwap(HdmapToPc_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(g_hdmapinfo_, other->g_hdmapinfo_);
  swap(g_frontplane_, other->g_frontplane_);
  swap(g_locallane_, other->g_locallane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HdmapToPc_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_HdmapInfo::InitAsDefaultInstance() {
}
class Dt_RECORD_HdmapInfo::_Internal {
 public:
};

Dt_RECORD_HdmapInfo::Dt_RECORD_HdmapInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_HdmapInfo)
}
Dt_RECORD_HdmapInfo::Dt_RECORD_HdmapInfo(const Dt_RECORD_HdmapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&planpath_, &from.planpath_,
    static_cast<size_t>(reinterpret_cast<char*>(&goal_yaw_) -
    reinterpret_cast<char*>(&planpath_)) + sizeof(goal_yaw_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_HdmapInfo)
}

void Dt_RECORD_HdmapInfo::SharedCtor() {
  ::memset(&planpath_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goal_yaw_) -
      reinterpret_cast<char*>(&planpath_)) + sizeof(goal_yaw_));
}

Dt_RECORD_HdmapInfo::~Dt_RECORD_HdmapInfo() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_HdmapInfo)
  SharedDtor();
}

void Dt_RECORD_HdmapInfo::SharedDtor() {
}

void Dt_RECORD_HdmapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_HdmapInfo& Dt_RECORD_HdmapInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_HdmapInfo_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_HdmapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_HdmapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&planpath_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goal_yaw_) -
      reinterpret_cast<char*>(&planpath_)) + sizeof(goal_yaw_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_HdmapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool planpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          planpath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float origin_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float origin_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float origin_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          origin_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float origin_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          origin_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float goal_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          goal_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float goal_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          goal_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float goal_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          goal_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float goal_yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          goal_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_HdmapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_HdmapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool planpath = 1;
  if (this->planpath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_planpath(), target);
  }

  // float origin_x = 2;
  if (!(this->origin_x() <= 0 && this->origin_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_origin_x(), target);
  }

  // float origin_y = 3;
  if (!(this->origin_y() <= 0 && this->origin_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_origin_y(), target);
  }

  // float origin_z = 4;
  if (!(this->origin_z() <= 0 && this->origin_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_origin_z(), target);
  }

  // float origin_yaw = 5;
  if (!(this->origin_yaw() <= 0 && this->origin_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_origin_yaw(), target);
  }

  // float goal_x = 6;
  if (!(this->goal_x() <= 0 && this->goal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_goal_x(), target);
  }

  // float goal_y = 7;
  if (!(this->goal_y() <= 0 && this->goal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_goal_y(), target);
  }

  // float goal_z = 8;
  if (!(this->goal_z() <= 0 && this->goal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_goal_z(), target);
  }

  // float goal_yaw = 9;
  if (!(this->goal_yaw() <= 0 && this->goal_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_goal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_HdmapInfo)
  return target;
}

size_t Dt_RECORD_HdmapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_HdmapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool planpath = 1;
  if (this->planpath() != 0) {
    total_size += 1 + 1;
  }

  // float origin_x = 2;
  if (!(this->origin_x() <= 0 && this->origin_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float origin_y = 3;
  if (!(this->origin_y() <= 0 && this->origin_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float origin_z = 4;
  if (!(this->origin_z() <= 0 && this->origin_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float origin_yaw = 5;
  if (!(this->origin_yaw() <= 0 && this->origin_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float goal_x = 6;
  if (!(this->goal_x() <= 0 && this->goal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float goal_y = 7;
  if (!(this->goal_y() <= 0 && this->goal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float goal_z = 8;
  if (!(this->goal_z() <= 0 && this->goal_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float goal_yaw = 9;
  if (!(this->goal_yaw() <= 0 && this->goal_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_HdmapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_HdmapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_HdmapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_HdmapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_HdmapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_HdmapInfo)
    MergeFrom(*source);
  }
}

void Dt_RECORD_HdmapInfo::MergeFrom(const Dt_RECORD_HdmapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_HdmapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.planpath() != 0) {
    _internal_set_planpath(from._internal_planpath());
  }
  if (!(from.origin_x() <= 0 && from.origin_x() >= 0)) {
    _internal_set_origin_x(from._internal_origin_x());
  }
  if (!(from.origin_y() <= 0 && from.origin_y() >= 0)) {
    _internal_set_origin_y(from._internal_origin_y());
  }
  if (!(from.origin_z() <= 0 && from.origin_z() >= 0)) {
    _internal_set_origin_z(from._internal_origin_z());
  }
  if (!(from.origin_yaw() <= 0 && from.origin_yaw() >= 0)) {
    _internal_set_origin_yaw(from._internal_origin_yaw());
  }
  if (!(from.goal_x() <= 0 && from.goal_x() >= 0)) {
    _internal_set_goal_x(from._internal_goal_x());
  }
  if (!(from.goal_y() <= 0 && from.goal_y() >= 0)) {
    _internal_set_goal_y(from._internal_goal_y());
  }
  if (!(from.goal_z() <= 0 && from.goal_z() >= 0)) {
    _internal_set_goal_z(from._internal_goal_z());
  }
  if (!(from.goal_yaw() <= 0 && from.goal_yaw() >= 0)) {
    _internal_set_goal_yaw(from._internal_goal_yaw());
  }
}

void Dt_RECORD_HdmapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_HdmapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_HdmapInfo::CopyFrom(const Dt_RECORD_HdmapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_HdmapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_HdmapInfo::IsInitialized() const {
  return true;
}

void Dt_RECORD_HdmapInfo::InternalSwap(Dt_RECORD_HdmapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(planpath_, other->planpath_);
  swap(origin_x_, other->origin_x_);
  swap(origin_y_, other->origin_y_);
  swap(origin_z_, other->origin_z_);
  swap(origin_yaw_, other->origin_yaw_);
  swap(goal_x_, other->goal_x_);
  swap(goal_y_, other->goal_y_);
  swap(goal_z_, other->goal_z_);
  swap(goal_yaw_, other->goal_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_HdmapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_HdmapFrontPLane::InitAsDefaultInstance() {
}
class Dt_RECORD_HdmapFrontPLane::_Internal {
 public:
};

Dt_RECORD_HdmapFrontPLane::Dt_RECORD_HdmapFrontPLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_HdmapFrontPLane)
}
Dt_RECORD_HdmapFrontPLane::Dt_RECORD_HdmapFrontPLane(const Dt_RECORD_HdmapFrontPLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      planseg_(from.planseg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plan_seg_count_ = from.plan_seg_count_;
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_HdmapFrontPLane)
}

void Dt_RECORD_HdmapFrontPLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto.base);
  plan_seg_count_ = 0;
}

Dt_RECORD_HdmapFrontPLane::~Dt_RECORD_HdmapFrontPLane() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_HdmapFrontPLane)
  SharedDtor();
}

void Dt_RECORD_HdmapFrontPLane::SharedDtor() {
}

void Dt_RECORD_HdmapFrontPLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_HdmapFrontPLane& Dt_RECORD_HdmapFrontPLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_HdmapFrontPLane_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_HdmapFrontPLane::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planseg_.Clear();
  plan_seg_count_ = 0;
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_HdmapFrontPLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 plan_seg_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          plan_seg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_PlanSeg PlanSeg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_planseg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_HdmapFrontPLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 plan_seg_count = 1;
  if (this->plan_seg_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plan_seg_count(), target);
  }

  // repeated .socket_all.Dt_RECORD_PlanSeg PlanSeg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_planseg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_planseg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_HdmapFrontPLane)
  return target;
}

size_t Dt_RECORD_HdmapFrontPLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .socket_all.Dt_RECORD_PlanSeg PlanSeg = 2;
  total_size += 1UL * this->_internal_planseg_size();
  for (const auto& msg : this->planseg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 plan_seg_count = 1;
  if (this->plan_seg_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plan_seg_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_HdmapFrontPLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_HdmapFrontPLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_HdmapFrontPLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_HdmapFrontPLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_HdmapFrontPLane)
    MergeFrom(*source);
  }
}

void Dt_RECORD_HdmapFrontPLane::MergeFrom(const Dt_RECORD_HdmapFrontPLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planseg_.MergeFrom(from.planseg_);
  if (from.plan_seg_count() != 0) {
    _internal_set_plan_seg_count(from._internal_plan_seg_count());
  }
}

void Dt_RECORD_HdmapFrontPLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_HdmapFrontPLane::CopyFrom(const Dt_RECORD_HdmapFrontPLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_HdmapFrontPLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_HdmapFrontPLane::IsInitialized() const {
  return true;
}

void Dt_RECORD_HdmapFrontPLane::InternalSwap(Dt_RECORD_HdmapFrontPLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  planseg_.InternalSwap(&other->planseg_);
  swap(plan_seg_count_, other->plan_seg_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_HdmapFrontPLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_PlanSeg::InitAsDefaultInstance() {
}
class Dt_RECORD_PlanSeg::_Internal {
 public:
};

Dt_RECORD_PlanSeg::Dt_RECORD_PlanSeg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_PlanSeg)
}
Dt_RECORD_PlanSeg::Dt_RECORD_PlanSeg(const Dt_RECORD_PlanSeg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lane_(from.lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_count_ = from.lane_count_;
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_PlanSeg)
}

void Dt_RECORD_PlanSeg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto.base);
  lane_count_ = 0;
}

Dt_RECORD_PlanSeg::~Dt_RECORD_PlanSeg() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_PlanSeg)
  SharedDtor();
}

void Dt_RECORD_PlanSeg::SharedDtor() {
}

void Dt_RECORD_PlanSeg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_PlanSeg& Dt_RECORD_PlanSeg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_PlanSeg_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_PlanSeg::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_PlanSeg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_.Clear();
  lane_count_ = 0;
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_PlanSeg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lane_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lane_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_HdMapLane Lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_PlanSeg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_PlanSeg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_count = 1;
  if (this->lane_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_count(), target);
  }

  // repeated .socket_all.Dt_RECORD_HdMapLane Lane = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lane(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_PlanSeg)
  return target;
}

size_t Dt_RECORD_PlanSeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_PlanSeg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .socket_all.Dt_RECORD_HdMapLane Lane = 2;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 lane_count = 1;
  if (this->lane_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_PlanSeg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_PlanSeg)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_PlanSeg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_PlanSeg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_PlanSeg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_PlanSeg)
    MergeFrom(*source);
  }
}

void Dt_RECORD_PlanSeg::MergeFrom(const Dt_RECORD_PlanSeg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_PlanSeg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_.MergeFrom(from.lane_);
  if (from.lane_count() != 0) {
    _internal_set_lane_count(from._internal_lane_count());
  }
}

void Dt_RECORD_PlanSeg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_PlanSeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_PlanSeg::CopyFrom(const Dt_RECORD_PlanSeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_PlanSeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_PlanSeg::IsInitialized() const {
  return true;
}

void Dt_RECORD_PlanSeg::InternalSwap(Dt_RECORD_PlanSeg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lane_.InternalSwap(&other->lane_);
  swap(lane_count_, other->lane_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_PlanSeg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_HdMapLane::InitAsDefaultInstance() {
}
class Dt_RECORD_HdMapLane::_Internal {
 public:
};

Dt_RECORD_HdMapLane::Dt_RECORD_HdMapLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_HdMapLane)
}
Dt_RECORD_HdMapLane::Dt_RECORD_HdMapLane(const Dt_RECORD_HdMapLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lanenode_(from.lanenode_),
      poi_(from.poi_),
      obstacle_(from.obstacle_),
      mark_(from.mark_),
      arrow_(from.arrow_),
      crosswalk_(from.crosswalk_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_count_, &from.node_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&hgnode_distance_) -
    reinterpret_cast<char*>(&node_count_)) + sizeof(hgnode_distance_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_HdMapLane)
}

void Dt_RECORD_HdMapLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto.base);
  ::memset(&node_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hgnode_distance_) -
      reinterpret_cast<char*>(&node_count_)) + sizeof(hgnode_distance_));
}

Dt_RECORD_HdMapLane::~Dt_RECORD_HdMapLane() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_HdMapLane)
  SharedDtor();
}

void Dt_RECORD_HdMapLane::SharedDtor() {
}

void Dt_RECORD_HdMapLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_HdMapLane& Dt_RECORD_HdMapLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_HdMapLane_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_HdMapLane::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_HdMapLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanenode_.Clear();
  poi_.Clear();
  obstacle_.Clear();
  mark_.Clear();
  arrow_.Clear();
  crosswalk_.Clear();
  ::memset(&node_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hgnode_distance_) -
      reinterpret_cast<char*>(&node_count_)) + sizeof(hgnode_distance_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_HdMapLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 node_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_ARRAY_100_LaneNode LaneNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanenode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 laneID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool change_lane_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          change_lane_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_NO = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lane_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lane_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          lane_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 lane_way_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lane_way_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 turn_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          turn_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lboundaryID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          lboundaryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lboundary_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          lboundary_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lboundary_color = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          lboundary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rboundaryID = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          rboundaryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rboundary_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          rboundary_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rboundary_color = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          rboundary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_ID = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          road_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_position = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          road_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_direction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          road_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float road_length = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          road_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float road_width = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          road_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 lane_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          lane_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed_limit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 POI_num = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          poi_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 obstacle_num = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          obstacle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mark_num = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          mark_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 arrow_num = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          arrow_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crosswalk_num = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          crosswalk_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HGNode_num = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          hgnode_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_PoiObstacle POI = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_poi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_PoiObstacle Obstacle = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_MarkArrow Mark = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_MarkArrow Arrow = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_arrow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_Crosswalk Crosswalk = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_crosswalk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 hgnodeID = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hgnodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hgnode_distance = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          hgnode_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_HdMapLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_HdMapLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_count = 1;
  if (this->node_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_count(), target);
  }

  // repeated .socket_all.Dt_ARRAY_100_LaneNode LaneNode = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanenode_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lanenode(i), target, stream);
  }

  // uint32 laneID = 3;
  if (this->laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_laneid(), target);
  }

  // bool change_lane_flag = 4;
  if (this->change_lane_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_change_lane_flag(), target);
  }

  // int32 lane_NO = 5;
  if (this->lane_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lane_no(), target);
  }

  // uint32 lane_position = 6;
  if (this->lane_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lane_position(), target);
  }

  // uint32 lane_type = 7;
  if (this->lane_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lane_type(), target);
  }

  // float lane_width = 8;
  if (!(this->lane_width() <= 0 && this->lane_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_lane_width(), target);
  }

  // float lane_length = 9;
  if (!(this->lane_length() <= 0 && this->lane_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_lane_length(), target);
  }

  // uint32 lane_way_count = 10;
  if (this->lane_way_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lane_way_count(), target);
  }

  // uint32 turn_info = 11;
  if (this->turn_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_turn_info(), target);
  }

  // uint32 lboundaryID = 12;
  if (this->lboundaryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_lboundaryid(), target);
  }

  // uint32 lboundary_type = 13;
  if (this->lboundary_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_lboundary_type(), target);
  }

  // uint32 lboundary_color = 14;
  if (this->lboundary_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_lboundary_color(), target);
  }

  // uint32 rboundaryID = 15;
  if (this->rboundaryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rboundaryid(), target);
  }

  // uint32 rboundary_type = 16;
  if (this->rboundary_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_rboundary_type(), target);
  }

  // uint32 rboundary_color = 17;
  if (this->rboundary_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_rboundary_color(), target);
  }

  // uint32 road_ID = 18;
  if (this->road_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_road_id(), target);
  }

  // uint32 road_type = 19;
  if (this->road_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_road_type(), target);
  }

  // uint32 road_position = 20;
  if (this->road_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_road_position(), target);
  }

  // uint32 road_direction = 21;
  if (this->road_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_road_direction(), target);
  }

  // float road_length = 22;
  if (!(this->road_length() <= 0 && this->road_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_road_length(), target);
  }

  // float road_width = 23;
  if (!(this->road_width() <= 0 && this->road_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_road_width(), target);
  }

  // uint32 lane_count = 24;
  if (this->lane_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_lane_count(), target);
  }

  // float speed_limit = 25;
  if (!(this->speed_limit() <= 0 && this->speed_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_speed_limit(), target);
  }

  // uint32 POI_num = 26;
  if (this->poi_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_poi_num(), target);
  }

  // uint32 obstacle_num = 27;
  if (this->obstacle_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_obstacle_num(), target);
  }

  // uint32 mark_num = 28;
  if (this->mark_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_mark_num(), target);
  }

  // uint32 arrow_num = 29;
  if (this->arrow_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_arrow_num(), target);
  }

  // uint32 crosswalk_num = 30;
  if (this->crosswalk_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_crosswalk_num(), target);
  }

  // uint32 HGNode_num = 31;
  if (this->hgnode_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hgnode_num(), target);
  }

  // repeated .socket_all.Dt_RECORD_PoiObstacle POI = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_poi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_poi(i), target, stream);
  }

  // repeated .socket_all.Dt_RECORD_PoiObstacle Obstacle = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_obstacle(i), target, stream);
  }

  // repeated .socket_all.Dt_RECORD_MarkArrow Mark = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_mark(i), target, stream);
  }

  // repeated .socket_all.Dt_RECORD_MarkArrow Arrow = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arrow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_arrow(i), target, stream);
  }

  // repeated .socket_all.Dt_RECORD_Crosswalk Crosswalk = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crosswalk_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_crosswalk(i), target, stream);
  }

  // uint32 hgnodeID = 37;
  if (this->hgnodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_hgnodeid(), target);
  }

  // float hgnode_distance = 38;
  if (!(this->hgnode_distance() <= 0 && this->hgnode_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_hgnode_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_HdMapLane)
  return target;
}

size_t Dt_RECORD_HdMapLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_HdMapLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .socket_all.Dt_ARRAY_100_LaneNode LaneNode = 2;
  total_size += 1UL * this->_internal_lanenode_size();
  for (const auto& msg : this->lanenode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .socket_all.Dt_RECORD_PoiObstacle POI = 32;
  total_size += 2UL * this->_internal_poi_size();
  for (const auto& msg : this->poi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .socket_all.Dt_RECORD_PoiObstacle Obstacle = 33;
  total_size += 2UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .socket_all.Dt_RECORD_MarkArrow Mark = 34;
  total_size += 2UL * this->_internal_mark_size();
  for (const auto& msg : this->mark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .socket_all.Dt_RECORD_MarkArrow Arrow = 35;
  total_size += 2UL * this->_internal_arrow_size();
  for (const auto& msg : this->arrow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .socket_all.Dt_RECORD_Crosswalk Crosswalk = 36;
  total_size += 2UL * this->_internal_crosswalk_size();
  for (const auto& msg : this->crosswalk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 node_count = 1;
  if (this->node_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_count());
  }

  // uint32 laneID = 3;
  if (this->laneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_laneid());
  }

  // bool change_lane_flag = 4;
  if (this->change_lane_flag() != 0) {
    total_size += 1 + 1;
  }

  // int32 lane_NO = 5;
  if (this->lane_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_no());
  }

  // uint32 lane_position = 6;
  if (this->lane_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_position());
  }

  // uint32 lane_type = 7;
  if (this->lane_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_type());
  }

  // float lane_width = 8;
  if (!(this->lane_width() <= 0 && this->lane_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float lane_length = 9;
  if (!(this->lane_length() <= 0 && this->lane_length() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 lane_way_count = 10;
  if (this->lane_way_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_way_count());
  }

  // uint32 turn_info = 11;
  if (this->turn_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turn_info());
  }

  // uint32 lboundaryID = 12;
  if (this->lboundaryid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lboundaryid());
  }

  // uint32 lboundary_type = 13;
  if (this->lboundary_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lboundary_type());
  }

  // uint32 lboundary_color = 14;
  if (this->lboundary_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lboundary_color());
  }

  // uint32 rboundaryID = 15;
  if (this->rboundaryid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rboundaryid());
  }

  // uint32 rboundary_type = 16;
  if (this->rboundary_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rboundary_type());
  }

  // uint32 rboundary_color = 17;
  if (this->rboundary_color() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rboundary_color());
  }

  // uint32 road_ID = 18;
  if (this->road_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_road_id());
  }

  // uint32 road_type = 19;
  if (this->road_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_road_type());
  }

  // uint32 road_position = 20;
  if (this->road_position() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_road_position());
  }

  // uint32 road_direction = 21;
  if (this->road_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_road_direction());
  }

  // float road_length = 22;
  if (!(this->road_length() <= 0 && this->road_length() >= 0)) {
    total_size += 2 + 4;
  }

  // float road_width = 23;
  if (!(this->road_width() <= 0 && this->road_width() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 lane_count = 24;
  if (this->lane_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_count());
  }

  // float speed_limit = 25;
  if (!(this->speed_limit() <= 0 && this->speed_limit() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 POI_num = 26;
  if (this->poi_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_poi_num());
  }

  // uint32 obstacle_num = 27;
  if (this->obstacle_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_obstacle_num());
  }

  // uint32 mark_num = 28;
  if (this->mark_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mark_num());
  }

  // uint32 arrow_num = 29;
  if (this->arrow_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_arrow_num());
  }

  // uint32 crosswalk_num = 30;
  if (this->crosswalk_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crosswalk_num());
  }

  // uint32 HGNode_num = 31;
  if (this->hgnode_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hgnode_num());
  }

  // uint32 hgnodeID = 37;
  if (this->hgnodeid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hgnodeid());
  }

  // float hgnode_distance = 38;
  if (!(this->hgnode_distance() <= 0 && this->hgnode_distance() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_HdMapLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_HdMapLane)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_HdMapLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_HdMapLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_HdMapLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_HdMapLane)
    MergeFrom(*source);
  }
}

void Dt_RECORD_HdMapLane::MergeFrom(const Dt_RECORD_HdMapLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_HdMapLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanenode_.MergeFrom(from.lanenode_);
  poi_.MergeFrom(from.poi_);
  obstacle_.MergeFrom(from.obstacle_);
  mark_.MergeFrom(from.mark_);
  arrow_.MergeFrom(from.arrow_);
  crosswalk_.MergeFrom(from.crosswalk_);
  if (from.node_count() != 0) {
    _internal_set_node_count(from._internal_node_count());
  }
  if (from.laneid() != 0) {
    _internal_set_laneid(from._internal_laneid());
  }
  if (from.change_lane_flag() != 0) {
    _internal_set_change_lane_flag(from._internal_change_lane_flag());
  }
  if (from.lane_no() != 0) {
    _internal_set_lane_no(from._internal_lane_no());
  }
  if (from.lane_position() != 0) {
    _internal_set_lane_position(from._internal_lane_position());
  }
  if (from.lane_type() != 0) {
    _internal_set_lane_type(from._internal_lane_type());
  }
  if (!(from.lane_width() <= 0 && from.lane_width() >= 0)) {
    _internal_set_lane_width(from._internal_lane_width());
  }
  if (!(from.lane_length() <= 0 && from.lane_length() >= 0)) {
    _internal_set_lane_length(from._internal_lane_length());
  }
  if (from.lane_way_count() != 0) {
    _internal_set_lane_way_count(from._internal_lane_way_count());
  }
  if (from.turn_info() != 0) {
    _internal_set_turn_info(from._internal_turn_info());
  }
  if (from.lboundaryid() != 0) {
    _internal_set_lboundaryid(from._internal_lboundaryid());
  }
  if (from.lboundary_type() != 0) {
    _internal_set_lboundary_type(from._internal_lboundary_type());
  }
  if (from.lboundary_color() != 0) {
    _internal_set_lboundary_color(from._internal_lboundary_color());
  }
  if (from.rboundaryid() != 0) {
    _internal_set_rboundaryid(from._internal_rboundaryid());
  }
  if (from.rboundary_type() != 0) {
    _internal_set_rboundary_type(from._internal_rboundary_type());
  }
  if (from.rboundary_color() != 0) {
    _internal_set_rboundary_color(from._internal_rboundary_color());
  }
  if (from.road_id() != 0) {
    _internal_set_road_id(from._internal_road_id());
  }
  if (from.road_type() != 0) {
    _internal_set_road_type(from._internal_road_type());
  }
  if (from.road_position() != 0) {
    _internal_set_road_position(from._internal_road_position());
  }
  if (from.road_direction() != 0) {
    _internal_set_road_direction(from._internal_road_direction());
  }
  if (!(from.road_length() <= 0 && from.road_length() >= 0)) {
    _internal_set_road_length(from._internal_road_length());
  }
  if (!(from.road_width() <= 0 && from.road_width() >= 0)) {
    _internal_set_road_width(from._internal_road_width());
  }
  if (from.lane_count() != 0) {
    _internal_set_lane_count(from._internal_lane_count());
  }
  if (!(from.speed_limit() <= 0 && from.speed_limit() >= 0)) {
    _internal_set_speed_limit(from._internal_speed_limit());
  }
  if (from.poi_num() != 0) {
    _internal_set_poi_num(from._internal_poi_num());
  }
  if (from.obstacle_num() != 0) {
    _internal_set_obstacle_num(from._internal_obstacle_num());
  }
  if (from.mark_num() != 0) {
    _internal_set_mark_num(from._internal_mark_num());
  }
  if (from.arrow_num() != 0) {
    _internal_set_arrow_num(from._internal_arrow_num());
  }
  if (from.crosswalk_num() != 0) {
    _internal_set_crosswalk_num(from._internal_crosswalk_num());
  }
  if (from.hgnode_num() != 0) {
    _internal_set_hgnode_num(from._internal_hgnode_num());
  }
  if (from.hgnodeid() != 0) {
    _internal_set_hgnodeid(from._internal_hgnodeid());
  }
  if (!(from.hgnode_distance() <= 0 && from.hgnode_distance() >= 0)) {
    _internal_set_hgnode_distance(from._internal_hgnode_distance());
  }
}

void Dt_RECORD_HdMapLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_HdMapLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_HdMapLane::CopyFrom(const Dt_RECORD_HdMapLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_HdMapLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_HdMapLane::IsInitialized() const {
  return true;
}

void Dt_RECORD_HdMapLane::InternalSwap(Dt_RECORD_HdMapLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lanenode_.InternalSwap(&other->lanenode_);
  poi_.InternalSwap(&other->poi_);
  obstacle_.InternalSwap(&other->obstacle_);
  mark_.InternalSwap(&other->mark_);
  arrow_.InternalSwap(&other->arrow_);
  crosswalk_.InternalSwap(&other->crosswalk_);
  swap(node_count_, other->node_count_);
  swap(laneid_, other->laneid_);
  swap(change_lane_flag_, other->change_lane_flag_);
  swap(lane_no_, other->lane_no_);
  swap(lane_position_, other->lane_position_);
  swap(lane_type_, other->lane_type_);
  swap(lane_width_, other->lane_width_);
  swap(lane_length_, other->lane_length_);
  swap(lane_way_count_, other->lane_way_count_);
  swap(turn_info_, other->turn_info_);
  swap(lboundaryid_, other->lboundaryid_);
  swap(lboundary_type_, other->lboundary_type_);
  swap(lboundary_color_, other->lboundary_color_);
  swap(rboundaryid_, other->rboundaryid_);
  swap(rboundary_type_, other->rboundary_type_);
  swap(rboundary_color_, other->rboundary_color_);
  swap(road_id_, other->road_id_);
  swap(road_type_, other->road_type_);
  swap(road_position_, other->road_position_);
  swap(road_direction_, other->road_direction_);
  swap(road_length_, other->road_length_);
  swap(road_width_, other->road_width_);
  swap(lane_count_, other->lane_count_);
  swap(speed_limit_, other->speed_limit_);
  swap(poi_num_, other->poi_num_);
  swap(obstacle_num_, other->obstacle_num_);
  swap(mark_num_, other->mark_num_);
  swap(arrow_num_, other->arrow_num_);
  swap(crosswalk_num_, other->crosswalk_num_);
  swap(hgnode_num_, other->hgnode_num_);
  swap(hgnodeid_, other->hgnodeid_);
  swap(hgnode_distance_, other->hgnode_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_HdMapLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_ARRAY_100_LaneNode::InitAsDefaultInstance() {
}
class Dt_ARRAY_100_LaneNode::_Internal {
 public:
};

Dt_ARRAY_100_LaneNode::Dt_ARRAY_100_LaneNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_ARRAY_100_LaneNode)
}
Dt_ARRAY_100_LaneNode::Dt_ARRAY_100_LaneNode(const Dt_ARRAY_100_LaneNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hdmap_x_, &from.hdmap_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&slopev_) -
    reinterpret_cast<char*>(&hdmap_x_)) + sizeof(slopev_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_ARRAY_100_LaneNode)
}

void Dt_ARRAY_100_LaneNode::SharedCtor() {
  ::memset(&hdmap_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slopev_) -
      reinterpret_cast<char*>(&hdmap_x_)) + sizeof(slopev_));
}

Dt_ARRAY_100_LaneNode::~Dt_ARRAY_100_LaneNode() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_ARRAY_100_LaneNode)
  SharedDtor();
}

void Dt_ARRAY_100_LaneNode::SharedDtor() {
}

void Dt_ARRAY_100_LaneNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_ARRAY_100_LaneNode& Dt_ARRAY_100_LaneNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_ARRAY_100_LaneNode_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_ARRAY_100_LaneNode::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_ARRAY_100_LaneNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hdmap_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slopev_) -
      reinterpret_cast<char*>(&hdmap_x_)) + sizeof(slopev_));
  _internal_metadata_.Clear();
}

const char* Dt_ARRAY_100_LaneNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float hdmap_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          hdmap_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hdmap_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hdmap_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hdmap_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          hdmap_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curvature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float slopev = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          slopev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_ARRAY_100_LaneNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_ARRAY_100_LaneNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float hdmap_x = 1;
  if (!(this->hdmap_x() <= 0 && this->hdmap_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_hdmap_x(), target);
  }

  // float hdmap_y = 2;
  if (!(this->hdmap_y() <= 0 && this->hdmap_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_hdmap_y(), target);
  }

  // float hdmap_z = 3;
  if (!(this->hdmap_z() <= 0 && this->hdmap_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_hdmap_z(), target);
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_heading(), target);
  }

  // float curvature = 5;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_curvature(), target);
  }

  // float slopev = 6;
  if (!(this->slopev() <= 0 && this->slopev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_slopev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_ARRAY_100_LaneNode)
  return target;
}

size_t Dt_ARRAY_100_LaneNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_ARRAY_100_LaneNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float hdmap_x = 1;
  if (!(this->hdmap_x() <= 0 && this->hdmap_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float hdmap_y = 2;
  if (!(this->hdmap_y() <= 0 && this->hdmap_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float hdmap_z = 3;
  if (!(this->hdmap_z() <= 0 && this->hdmap_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float curvature = 5;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  // float slopev = 6;
  if (!(this->slopev() <= 0 && this->slopev() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_ARRAY_100_LaneNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_ARRAY_100_LaneNode)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_ARRAY_100_LaneNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_ARRAY_100_LaneNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_ARRAY_100_LaneNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_ARRAY_100_LaneNode)
    MergeFrom(*source);
  }
}

void Dt_ARRAY_100_LaneNode::MergeFrom(const Dt_ARRAY_100_LaneNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_ARRAY_100_LaneNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.hdmap_x() <= 0 && from.hdmap_x() >= 0)) {
    _internal_set_hdmap_x(from._internal_hdmap_x());
  }
  if (!(from.hdmap_y() <= 0 && from.hdmap_y() >= 0)) {
    _internal_set_hdmap_y(from._internal_hdmap_y());
  }
  if (!(from.hdmap_z() <= 0 && from.hdmap_z() >= 0)) {
    _internal_set_hdmap_z(from._internal_hdmap_z());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    _internal_set_curvature(from._internal_curvature());
  }
  if (!(from.slopev() <= 0 && from.slopev() >= 0)) {
    _internal_set_slopev(from._internal_slopev());
  }
}

void Dt_ARRAY_100_LaneNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_ARRAY_100_LaneNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_ARRAY_100_LaneNode::CopyFrom(const Dt_ARRAY_100_LaneNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_ARRAY_100_LaneNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_ARRAY_100_LaneNode::IsInitialized() const {
  return true;
}

void Dt_ARRAY_100_LaneNode::InternalSwap(Dt_ARRAY_100_LaneNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdmap_x_, other->hdmap_x_);
  swap(hdmap_y_, other->hdmap_y_);
  swap(hdmap_z_, other->hdmap_z_);
  swap(heading_, other->heading_);
  swap(curvature_, other->curvature_);
  swap(slopev_, other->slopev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_ARRAY_100_LaneNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_PoiObstacle::InitAsDefaultInstance() {
}
class Dt_RECORD_PoiObstacle::_Internal {
 public:
};

Dt_RECORD_PoiObstacle::Dt_RECORD_PoiObstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_PoiObstacle)
}
Dt_RECORD_PoiObstacle::Dt_RECORD_PoiObstacle(const Dt_RECORD_PoiObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_PoiObstacle)
}

void Dt_RECORD_PoiObstacle::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
}

Dt_RECORD_PoiObstacle::~Dt_RECORD_PoiObstacle() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_PoiObstacle)
  SharedDtor();
}

void Dt_RECORD_PoiObstacle::SharedDtor() {
}

void Dt_RECORD_PoiObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_PoiObstacle& Dt_RECORD_PoiObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_PoiObstacle_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_PoiObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_PoiObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_PoiObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_PoiObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_PoiObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_PoiObstacle)
  return target;
}

size_t Dt_RECORD_PoiObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_PoiObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_PoiObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_PoiObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_PoiObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_PoiObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_PoiObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_PoiObstacle)
    MergeFrom(*source);
  }
}

void Dt_RECORD_PoiObstacle::MergeFrom(const Dt_RECORD_PoiObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_PoiObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void Dt_RECORD_PoiObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_PoiObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_PoiObstacle::CopyFrom(const Dt_RECORD_PoiObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_PoiObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_PoiObstacle::IsInitialized() const {
  return true;
}

void Dt_RECORD_PoiObstacle::InternalSwap(Dt_RECORD_PoiObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_PoiObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_MarkArrow::InitAsDefaultInstance() {
}
class Dt_RECORD_MarkArrow::_Internal {
 public:
};

Dt_RECORD_MarkArrow::Dt_RECORD_MarkArrow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_MarkArrow)
}
Dt_RECORD_MarkArrow::Dt_RECORD_MarkArrow(const Dt_RECORD_MarkArrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_MarkArrow)
}

void Dt_RECORD_MarkArrow::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
}

Dt_RECORD_MarkArrow::~Dt_RECORD_MarkArrow() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_MarkArrow)
  SharedDtor();
}

void Dt_RECORD_MarkArrow::SharedDtor() {
}

void Dt_RECORD_MarkArrow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_MarkArrow& Dt_RECORD_MarkArrow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_MarkArrow_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_MarkArrow::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_MarkArrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_MarkArrow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_MarkArrow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_MarkArrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color(), target);
  }

  // float distance = 4;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_MarkArrow)
  return target;
}

size_t Dt_RECORD_MarkArrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_MarkArrow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  // float distance = 4;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_MarkArrow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_MarkArrow)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_MarkArrow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_MarkArrow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_MarkArrow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_MarkArrow)
    MergeFrom(*source);
  }
}

void Dt_RECORD_MarkArrow::MergeFrom(const Dt_RECORD_MarkArrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_MarkArrow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void Dt_RECORD_MarkArrow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_MarkArrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_MarkArrow::CopyFrom(const Dt_RECORD_MarkArrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_MarkArrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_MarkArrow::IsInitialized() const {
  return true;
}

void Dt_RECORD_MarkArrow::InternalSwap(Dt_RECORD_MarkArrow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(color_, other->color_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_MarkArrow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_HdmapLocalLane::InitAsDefaultInstance() {
}
class Dt_RECORD_HdmapLocalLane::_Internal {
 public:
};

Dt_RECORD_HdmapLocalLane::Dt_RECORD_HdmapLocalLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_HdmapLocalLane)
}
Dt_RECORD_HdmapLocalLane::Dt_RECORD_HdmapLocalLane(const Dt_RECORD_HdmapLocalLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      locallane_(from.locallane_),
      nextseg_(from.nextseg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_count_, &from.lane_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_seg_count_) -
    reinterpret_cast<char*>(&lane_count_)) + sizeof(next_seg_count_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_HdmapLocalLane)
}

void Dt_RECORD_HdmapLocalLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto.base);
  ::memset(&lane_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_seg_count_) -
      reinterpret_cast<char*>(&lane_count_)) + sizeof(next_seg_count_));
}

Dt_RECORD_HdmapLocalLane::~Dt_RECORD_HdmapLocalLane() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_HdmapLocalLane)
  SharedDtor();
}

void Dt_RECORD_HdmapLocalLane::SharedDtor() {
}

void Dt_RECORD_HdmapLocalLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_HdmapLocalLane& Dt_RECORD_HdmapLocalLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_HdmapLocalLane_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_HdmapLocalLane::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_HdmapLocalLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locallane_.Clear();
  nextseg_.Clear();
  ::memset(&lane_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_seg_count_) -
      reinterpret_cast<char*>(&lane_count_)) + sizeof(next_seg_count_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_HdmapLocalLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lane_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lane_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_HdMapLane LocalLane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locallane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 next_seg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_seg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_PlanSeg NextSeg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nextseg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_HdmapLocalLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_HdmapLocalLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lane_count = 1;
  if (this->lane_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_count(), target);
  }

  // repeated .socket_all.Dt_RECORD_HdMapLane LocalLane = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locallane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_locallane(i), target, stream);
  }

  // uint32 next_seg_count = 3;
  if (this->next_seg_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_next_seg_count(), target);
  }

  // repeated .socket_all.Dt_RECORD_PlanSeg NextSeg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nextseg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nextseg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_HdmapLocalLane)
  return target;
}

size_t Dt_RECORD_HdmapLocalLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_HdmapLocalLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .socket_all.Dt_RECORD_HdMapLane LocalLane = 2;
  total_size += 1UL * this->_internal_locallane_size();
  for (const auto& msg : this->locallane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .socket_all.Dt_RECORD_PlanSeg NextSeg = 4;
  total_size += 1UL * this->_internal_nextseg_size();
  for (const auto& msg : this->nextseg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 lane_count = 1;
  if (this->lane_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_count());
  }

  // uint32 next_seg_count = 3;
  if (this->next_seg_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_seg_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_HdmapLocalLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_HdmapLocalLane)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_HdmapLocalLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_HdmapLocalLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_HdmapLocalLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_HdmapLocalLane)
    MergeFrom(*source);
  }
}

void Dt_RECORD_HdmapLocalLane::MergeFrom(const Dt_RECORD_HdmapLocalLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_HdmapLocalLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locallane_.MergeFrom(from.locallane_);
  nextseg_.MergeFrom(from.nextseg_);
  if (from.lane_count() != 0) {
    _internal_set_lane_count(from._internal_lane_count());
  }
  if (from.next_seg_count() != 0) {
    _internal_set_next_seg_count(from._internal_next_seg_count());
  }
}

void Dt_RECORD_HdmapLocalLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_HdmapLocalLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_HdmapLocalLane::CopyFrom(const Dt_RECORD_HdmapLocalLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_HdmapLocalLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_HdmapLocalLane::IsInitialized() const {
  return true;
}

void Dt_RECORD_HdmapLocalLane::InternalSwap(Dt_RECORD_HdmapLocalLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  locallane_.InternalSwap(&other->locallane_);
  nextseg_.InternalSwap(&other->nextseg_);
  swap(lane_count_, other->lane_count_);
  swap(next_seg_count_, other->next_seg_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_HdmapLocalLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_Crosswalk::InitAsDefaultInstance() {
}
class Dt_RECORD_Crosswalk::_Internal {
 public:
};

Dt_RECORD_Crosswalk::Dt_RECORD_Crosswalk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_Crosswalk)
}
Dt_RECORD_Crosswalk::Dt_RECORD_Crosswalk(const Dt_RECORD_Crosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_Crosswalk)
}

void Dt_RECORD_Crosswalk::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
}

Dt_RECORD_Crosswalk::~Dt_RECORD_Crosswalk() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_Crosswalk)
  SharedDtor();
}

void Dt_RECORD_Crosswalk::SharedDtor() {
}

void Dt_RECORD_Crosswalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_Crosswalk& Dt_RECORD_Crosswalk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_Crosswalk_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_Crosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_Crosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_Crosswalk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_Crosswalk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_Crosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_Crosswalk)
  return target;
}

size_t Dt_RECORD_Crosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_Crosswalk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_Crosswalk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_Crosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_Crosswalk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_Crosswalk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_Crosswalk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_Crosswalk)
    MergeFrom(*source);
  }
}

void Dt_RECORD_Crosswalk::MergeFrom(const Dt_RECORD_Crosswalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_Crosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void Dt_RECORD_Crosswalk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_Crosswalk::CopyFrom(const Dt_RECORD_Crosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_Crosswalk::IsInitialized() const {
  return true;
}

void Dt_RECORD_Crosswalk::InternalSwap(Dt_RECORD_Crosswalk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_Crosswalk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionToPC::InitAsDefaultInstance() {
  ::socket_all::_DecisionToPC_default_instance_._instance.get_mutable()->my_localizationinfo_ = const_cast< ::socket_all::Dt_RECORD_LocalizationInfo*>(
      ::socket_all::Dt_RECORD_LocalizationInfo::internal_default_instance());
  ::socket_all::_DecisionToPC_default_instance_._instance.get_mutable()->my_trajectorypointsinfo_ = const_cast< ::socket_all::Dt_RECORD_TrajectoryPointsInfos*>(
      ::socket_all::Dt_RECORD_TrajectoryPointsInfos::internal_default_instance());
}
class DecisionToPC::_Internal {
 public:
  static const ::socket_all::Dt_RECORD_LocalizationInfo& my_localizationinfo(const DecisionToPC* msg);
  static const ::socket_all::Dt_RECORD_TrajectoryPointsInfos& my_trajectorypointsinfo(const DecisionToPC* msg);
};

const ::socket_all::Dt_RECORD_LocalizationInfo&
DecisionToPC::_Internal::my_localizationinfo(const DecisionToPC* msg) {
  return *msg->my_localizationinfo_;
}
const ::socket_all::Dt_RECORD_TrajectoryPointsInfos&
DecisionToPC::_Internal::my_trajectorypointsinfo(const DecisionToPC* msg) {
  return *msg->my_trajectorypointsinfo_;
}
DecisionToPC::DecisionToPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.DecisionToPC)
}
DecisionToPC::DecisionToPC(const DecisionToPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_my_localizationinfo()) {
    my_localizationinfo_ = new ::socket_all::Dt_RECORD_LocalizationInfo(*from.my_localizationinfo_);
  } else {
    my_localizationinfo_ = nullptr;
  }
  if (from._internal_has_my_trajectorypointsinfo()) {
    my_trajectorypointsinfo_ = new ::socket_all::Dt_RECORD_TrajectoryPointsInfos(*from.my_trajectorypointsinfo_);
  } else {
    my_trajectorypointsinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:socket_all.DecisionToPC)
}

void DecisionToPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionToPC_socket_5fall_2eproto.base);
  ::memset(&my_localizationinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_trajectorypointsinfo_) -
      reinterpret_cast<char*>(&my_localizationinfo_)) + sizeof(my_trajectorypointsinfo_));
}

DecisionToPC::~DecisionToPC() {
  // @@protoc_insertion_point(destructor:socket_all.DecisionToPC)
  SharedDtor();
}

void DecisionToPC::SharedDtor() {
  if (this != internal_default_instance()) delete my_localizationinfo_;
  if (this != internal_default_instance()) delete my_trajectorypointsinfo_;
}

void DecisionToPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionToPC& DecisionToPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionToPC_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void DecisionToPC::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.DecisionToPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && my_localizationinfo_ != nullptr) {
    delete my_localizationinfo_;
  }
  my_localizationinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && my_trajectorypointsinfo_ != nullptr) {
    delete my_trajectorypointsinfo_;
  }
  my_trajectorypointsinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DecisionToPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .socket_all.Dt_RECORD_LocalizationInfo my_localizationInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_localizationinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .socket_all.Dt_RECORD_TrajectoryPointsInfos my_trajectoryPointsInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_trajectorypointsinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionToPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.DecisionToPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .socket_all.Dt_RECORD_LocalizationInfo my_localizationInfo = 1;
  if (this->has_my_localizationinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::my_localizationinfo(this), target, stream);
  }

  // .socket_all.Dt_RECORD_TrajectoryPointsInfos my_trajectoryPointsInfo = 2;
  if (this->has_my_trajectorypointsinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::my_trajectorypointsinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.DecisionToPC)
  return target;
}

size_t DecisionToPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.DecisionToPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .socket_all.Dt_RECORD_LocalizationInfo my_localizationInfo = 1;
  if (this->has_my_localizationinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *my_localizationinfo_);
  }

  // .socket_all.Dt_RECORD_TrajectoryPointsInfos my_trajectoryPointsInfo = 2;
  if (this->has_my_trajectorypointsinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *my_trajectorypointsinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionToPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.DecisionToPC)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionToPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionToPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.DecisionToPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.DecisionToPC)
    MergeFrom(*source);
  }
}

void DecisionToPC::MergeFrom(const DecisionToPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.DecisionToPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_my_localizationinfo()) {
    _internal_mutable_my_localizationinfo()->::socket_all::Dt_RECORD_LocalizationInfo::MergeFrom(from._internal_my_localizationinfo());
  }
  if (from.has_my_trajectorypointsinfo()) {
    _internal_mutable_my_trajectorypointsinfo()->::socket_all::Dt_RECORD_TrajectoryPointsInfos::MergeFrom(from._internal_my_trajectorypointsinfo());
  }
}

void DecisionToPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.DecisionToPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionToPC::CopyFrom(const DecisionToPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.DecisionToPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionToPC::IsInitialized() const {
  return true;
}

void DecisionToPC::InternalSwap(DecisionToPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(my_localizationinfo_, other->my_localizationinfo_);
  swap(my_trajectorypointsinfo_, other->my_trajectorypointsinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionToPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_LocalizationInfo::InitAsDefaultInstance() {
  ::socket_all::_Dt_RECORD_LocalizationInfo_default_instance_._instance.get_mutable()->localizationresult_ = const_cast< ::socket_all::Dt_RECORD_LocalizationResult*>(
      ::socket_all::Dt_RECORD_LocalizationResult::internal_default_instance());
}
class Dt_RECORD_LocalizationInfo::_Internal {
 public:
  static const ::socket_all::Dt_RECORD_LocalizationResult& localizationresult(const Dt_RECORD_LocalizationInfo* msg);
};

const ::socket_all::Dt_RECORD_LocalizationResult&
Dt_RECORD_LocalizationInfo::_Internal::localizationresult(const Dt_RECORD_LocalizationInfo* msg) {
  return *msg->localizationresult_;
}
Dt_RECORD_LocalizationInfo::Dt_RECORD_LocalizationInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_LocalizationInfo)
}
Dt_RECORD_LocalizationInfo::Dt_RECORD_LocalizationInfo(const Dt_RECORD_LocalizationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_localizationresult()) {
    localizationresult_ = new ::socket_all::Dt_RECORD_LocalizationResult(*from.localizationresult_);
  } else {
    localizationresult_ = nullptr;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_lon_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(v_lon_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_LocalizationInfo)
}

void Dt_RECORD_LocalizationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto.base);
  ::memset(&localizationresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_lon_) -
      reinterpret_cast<char*>(&localizationresult_)) + sizeof(v_lon_));
}

Dt_RECORD_LocalizationInfo::~Dt_RECORD_LocalizationInfo() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_LocalizationInfo)
  SharedDtor();
}

void Dt_RECORD_LocalizationInfo::SharedDtor() {
  if (this != internal_default_instance()) delete localizationresult_;
}

void Dt_RECORD_LocalizationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_LocalizationInfo& Dt_RECORD_LocalizationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_LocalizationInfo_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_LocalizationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_LocalizationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && localizationresult_ != nullptr) {
    delete localizationresult_;
  }
  localizationresult_ = nullptr;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_lon_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(v_lon_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_LocalizationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .socket_all.Dt_RECORD_LocalizationResult LocalizationResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_localizationresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yawrate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a_lon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          a_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a_lat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          a_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v_lat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          v_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v_lon = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          v_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_LocalizationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_LocalizationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_stamp(), target);
  }

  // .socket_all.Dt_RECORD_LocalizationResult LocalizationResult = 2;
  if (this->has_localizationresult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::localizationresult(this), target, stream);
  }

  // float Latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_latitude(), target);
  }

  // float Longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_longitude(), target);
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  // float pitch = 6;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pitch(), target);
  }

  // float roll = 7;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  // float yawrate = 8;
  if (!(this->yawrate() <= 0 && this->yawrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_yawrate(), target);
  }

  // float a_lon = 9;
  if (!(this->a_lon() <= 0 && this->a_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_a_lon(), target);
  }

  // float a_lat = 10;
  if (!(this->a_lat() <= 0 && this->a_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_a_lat(), target);
  }

  // float v_lat = 11;
  if (!(this->v_lat() <= 0 && this->v_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_v_lat(), target);
  }

  // float v_lon = 12;
  if (!(this->v_lon() <= 0 && this->v_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_v_lon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_LocalizationInfo)
  return target;
}

size_t Dt_RECORD_LocalizationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_LocalizationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .socket_all.Dt_RECORD_LocalizationResult LocalizationResult = 2;
  if (this->has_localizationresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localizationresult_);
  }

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_stamp());
  }

  // float Latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float Longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 6;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float yawrate = 8;
  if (!(this->yawrate() <= 0 && this->yawrate() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_lon = 9;
  if (!(this->a_lon() <= 0 && this->a_lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_lat = 10;
  if (!(this->a_lat() <= 0 && this->a_lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float v_lat = 11;
  if (!(this->v_lat() <= 0 && this->v_lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float v_lon = 12;
  if (!(this->v_lon() <= 0 && this->v_lon() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_LocalizationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_LocalizationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_LocalizationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_LocalizationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_LocalizationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_LocalizationInfo)
    MergeFrom(*source);
  }
}

void Dt_RECORD_LocalizationInfo::MergeFrom(const Dt_RECORD_LocalizationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_LocalizationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_localizationresult()) {
    _internal_mutable_localizationresult()->::socket_all::Dt_RECORD_LocalizationResult::MergeFrom(from._internal_localizationresult());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.yawrate() <= 0 && from.yawrate() >= 0)) {
    _internal_set_yawrate(from._internal_yawrate());
  }
  if (!(from.a_lon() <= 0 && from.a_lon() >= 0)) {
    _internal_set_a_lon(from._internal_a_lon());
  }
  if (!(from.a_lat() <= 0 && from.a_lat() >= 0)) {
    _internal_set_a_lat(from._internal_a_lat());
  }
  if (!(from.v_lat() <= 0 && from.v_lat() >= 0)) {
    _internal_set_v_lat(from._internal_v_lat());
  }
  if (!(from.v_lon() <= 0 && from.v_lon() >= 0)) {
    _internal_set_v_lon(from._internal_v_lon());
  }
}

void Dt_RECORD_LocalizationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_LocalizationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_LocalizationInfo::CopyFrom(const Dt_RECORD_LocalizationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_LocalizationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_LocalizationInfo::IsInitialized() const {
  return true;
}

void Dt_RECORD_LocalizationInfo::InternalSwap(Dt_RECORD_LocalizationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(localizationresult_, other->localizationresult_);
  swap(time_stamp_, other->time_stamp_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(yawrate_, other->yawrate_);
  swap(a_lon_, other->a_lon_);
  swap(a_lat_, other->a_lat_);
  swap(v_lat_, other->v_lat_);
  swap(v_lon_, other->v_lon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_LocalizationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_LocalizationResult::InitAsDefaultInstance() {
}
class Dt_RECORD_LocalizationResult::_Internal {
 public:
};

Dt_RECORD_LocalizationResult::Dt_RECORD_LocalizationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_LocalizationResult)
}
Dt_RECORD_LocalizationResult::Dt_RECORD_LocalizationResult(const Dt_RECORD_LocalizationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(qw_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_LocalizationResult)
}

void Dt_RECORD_LocalizationResult::SharedCtor() {
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(qw_));
}

Dt_RECORD_LocalizationResult::~Dt_RECORD_LocalizationResult() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_LocalizationResult)
  SharedDtor();
}

void Dt_RECORD_LocalizationResult::SharedDtor() {
}

void Dt_RECORD_LocalizationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_LocalizationResult& Dt_RECORD_LocalizationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_LocalizationResult_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_LocalizationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_LocalizationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(qw_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_LocalizationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float qx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float qy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float qz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float qw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_LocalizationResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_LocalizationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float qx = 5;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_qx(), target);
  }

  // float qy = 6;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_qy(), target);
  }

  // float qz = 7;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_qz(), target);
  }

  // float qw = 8;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_qw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_LocalizationResult)
  return target;
}

size_t Dt_RECORD_LocalizationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_LocalizationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float qx = 5;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    total_size += 1 + 4;
  }

  // float qy = 6;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    total_size += 1 + 4;
  }

  // float qz = 7;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    total_size += 1 + 4;
  }

  // float qw = 8;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_LocalizationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_LocalizationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_LocalizationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_LocalizationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_LocalizationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_LocalizationResult)
    MergeFrom(*source);
  }
}

void Dt_RECORD_LocalizationResult::MergeFrom(const Dt_RECORD_LocalizationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_LocalizationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.qx() <= 0 && from.qx() >= 0)) {
    _internal_set_qx(from._internal_qx());
  }
  if (!(from.qy() <= 0 && from.qy() >= 0)) {
    _internal_set_qy(from._internal_qy());
  }
  if (!(from.qz() <= 0 && from.qz() >= 0)) {
    _internal_set_qz(from._internal_qz());
  }
  if (!(from.qw() <= 0 && from.qw() >= 0)) {
    _internal_set_qw(from._internal_qw());
  }
}

void Dt_RECORD_LocalizationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_LocalizationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_LocalizationResult::CopyFrom(const Dt_RECORD_LocalizationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_LocalizationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_LocalizationResult::IsInitialized() const {
  return true;
}

void Dt_RECORD_LocalizationResult::InternalSwap(Dt_RECORD_LocalizationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(qx_, other->qx_);
  swap(qy_, other->qy_);
  swap(qz_, other->qz_);
  swap(qw_, other->qw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_LocalizationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_TrajectoryPointsInfos::InitAsDefaultInstance() {
}
class Dt_RECORD_TrajectoryPointsInfos::_Internal {
 public:
};

Dt_RECORD_TrajectoryPointsInfos::Dt_RECORD_TrajectoryPointsInfos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_TrajectoryPointsInfos)
}
Dt_RECORD_TrajectoryPointsInfos::Dt_RECORD_TrajectoryPointsInfos(const Dt_RECORD_TrajectoryPointsInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trajectorypoints_(from.trajectorypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&origin_yaw_, &from.origin_yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&origin_yaw_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_TrajectoryPointsInfos)
}

void Dt_RECORD_TrajectoryPointsInfos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto.base);
  ::memset(&origin_yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&origin_yaw_)) + sizeof(direction_));
}

Dt_RECORD_TrajectoryPointsInfos::~Dt_RECORD_TrajectoryPointsInfos() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  SharedDtor();
}

void Dt_RECORD_TrajectoryPointsInfos::SharedDtor() {
}

void Dt_RECORD_TrajectoryPointsInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_TrajectoryPointsInfos& Dt_RECORD_TrajectoryPointsInfos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_TrajectoryPointsInfos_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_TrajectoryPointsInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectorypoints_.Clear();
  ::memset(&origin_yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&origin_yaw_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_TrajectoryPointsInfos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float origin_yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          origin_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 point_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          point_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Array_Length_Dummy_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          array_length_dummy_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .socket_all.Dt_RECORD_TrajectoryPoints TrajectoryPoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectorypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 decision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          decision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_TrajectoryPointsInfos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float origin_yaw = 1;
  if (!(this->origin_yaw() <= 0 && this->origin_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_origin_yaw(), target);
  }

  // uint32 point_num = 2;
  if (this->point_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_point_num(), target);
  }

  // uint32 Array_Length_Dummy_0 = 3;
  if (this->array_length_dummy_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_array_length_dummy_0(), target);
  }

  // repeated .socket_all.Dt_RECORD_TrajectoryPoints TrajectoryPoints = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectorypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_trajectorypoints(i), target, stream);
  }

  // uint32 decision = 5;
  if (this->decision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_decision(), target);
  }

  // bool hold = 6;
  if (this->hold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hold(), target);
  }

  // uint32 direction = 7;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  return target;
}

size_t Dt_RECORD_TrajectoryPointsInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .socket_all.Dt_RECORD_TrajectoryPoints TrajectoryPoints = 4;
  total_size += 1UL * this->_internal_trajectorypoints_size();
  for (const auto& msg : this->trajectorypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float origin_yaw = 1;
  if (!(this->origin_yaw() <= 0 && this->origin_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 point_num = 2;
  if (this->point_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_point_num());
  }

  // uint32 Array_Length_Dummy_0 = 3;
  if (this->array_length_dummy_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_array_length_dummy_0());
  }

  // uint32 decision = 5;
  if (this->decision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decision());
  }

  // bool hold = 6;
  if (this->hold() != 0) {
    total_size += 1 + 1;
  }

  // uint32 direction = 7;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_TrajectoryPointsInfos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_TrajectoryPointsInfos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_TrajectoryPointsInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_TrajectoryPointsInfos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_TrajectoryPointsInfos)
    MergeFrom(*source);
  }
}

void Dt_RECORD_TrajectoryPointsInfos::MergeFrom(const Dt_RECORD_TrajectoryPointsInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectorypoints_.MergeFrom(from.trajectorypoints_);
  if (!(from.origin_yaw() <= 0 && from.origin_yaw() >= 0)) {
    _internal_set_origin_yaw(from._internal_origin_yaw());
  }
  if (from.point_num() != 0) {
    _internal_set_point_num(from._internal_point_num());
  }
  if (from.array_length_dummy_0() != 0) {
    _internal_set_array_length_dummy_0(from._internal_array_length_dummy_0());
  }
  if (from.decision() != 0) {
    _internal_set_decision(from._internal_decision());
  }
  if (from.hold() != 0) {
    _internal_set_hold(from._internal_hold());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void Dt_RECORD_TrajectoryPointsInfos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_TrajectoryPointsInfos::CopyFrom(const Dt_RECORD_TrajectoryPointsInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_TrajectoryPointsInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_TrajectoryPointsInfos::IsInitialized() const {
  return true;
}

void Dt_RECORD_TrajectoryPointsInfos::InternalSwap(Dt_RECORD_TrajectoryPointsInfos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trajectorypoints_.InternalSwap(&other->trajectorypoints_);
  swap(origin_yaw_, other->origin_yaw_);
  swap(point_num_, other->point_num_);
  swap(array_length_dummy_0_, other->array_length_dummy_0_);
  swap(decision_, other->decision_);
  swap(hold_, other->hold_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_TrajectoryPointsInfos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dt_RECORD_TrajectoryPoints::InitAsDefaultInstance() {
}
class Dt_RECORD_TrajectoryPoints::_Internal {
 public:
};

Dt_RECORD_TrajectoryPoints::Dt_RECORD_TrajectoryPoints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:socket_all.Dt_RECORD_TrajectoryPoints)
}
Dt_RECORD_TrajectoryPoints::Dt_RECORD_TrajectoryPoints(const Dt_RECORD_TrajectoryPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_no_) -
    reinterpret_cast<char*>(&x_)) + sizeof(road_no_));
  // @@protoc_insertion_point(copy_constructor:socket_all.Dt_RECORD_TrajectoryPoints)
}

void Dt_RECORD_TrajectoryPoints::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_no_) -
      reinterpret_cast<char*>(&x_)) + sizeof(road_no_));
}

Dt_RECORD_TrajectoryPoints::~Dt_RECORD_TrajectoryPoints() {
  // @@protoc_insertion_point(destructor:socket_all.Dt_RECORD_TrajectoryPoints)
  SharedDtor();
}

void Dt_RECORD_TrajectoryPoints::SharedDtor() {
}

void Dt_RECORD_TrajectoryPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dt_RECORD_TrajectoryPoints& Dt_RECORD_TrajectoryPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dt_RECORD_TrajectoryPoints_socket_5fall_2eproto.base);
  return *internal_default_instance();
}


void Dt_RECORD_TrajectoryPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:socket_all.Dt_RECORD_TrajectoryPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_no_) -
      reinterpret_cast<char*>(&x_)) + sizeof(road_no_));
  _internal_metadata_.Clear();
}

const char* Dt_RECORD_TrajectoryPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x_g = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float t = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kappa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float slope = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 lane_no = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          lane_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_no = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          road_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dt_RECORD_TrajectoryPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:socket_all.Dt_RECORD_TrajectoryPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float x_g = 3;
  if (!(this->x_g() <= 0 && this->x_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x_g(), target);
  }

  // float y_g = 4;
  if (!(this->y_g() <= 0 && this->y_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y_g(), target);
  }

  // float t = 5;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_t(), target);
  }

  // float lon = 6;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_lon(), target);
  }

  // float lat = 7;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_lat(), target);
  }

  // float theta = 8;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_theta(), target);
  }

  // float v = 9;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_v(), target);
  }

  // float a = 10;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_a(), target);
  }

  // float kappa = 11;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_kappa(), target);
  }

  // float slope = 12;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_slope(), target);
  }

  // uint32 lane_no = 13;
  if (this->lane_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_lane_no(), target);
  }

  // uint32 road_no = 14;
  if (this->road_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_road_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:socket_all.Dt_RECORD_TrajectoryPoints)
  return target;
}

size_t Dt_RECORD_TrajectoryPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:socket_all.Dt_RECORD_TrajectoryPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float x_g = 3;
  if (!(this->x_g() <= 0 && this->x_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_g = 4;
  if (!(this->y_g() <= 0 && this->y_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float t = 5;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 4;
  }

  // float lon = 6;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat = 7;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float theta = 8;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float v = 9;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 10;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  // float kappa = 11;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    total_size += 1 + 4;
  }

  // float slope = 12;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 lane_no = 13;
  if (this->lane_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_no());
  }

  // uint32 road_no = 14;
  if (this->road_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_road_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dt_RECORD_TrajectoryPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:socket_all.Dt_RECORD_TrajectoryPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const Dt_RECORD_TrajectoryPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dt_RECORD_TrajectoryPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:socket_all.Dt_RECORD_TrajectoryPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:socket_all.Dt_RECORD_TrajectoryPoints)
    MergeFrom(*source);
  }
}

void Dt_RECORD_TrajectoryPoints::MergeFrom(const Dt_RECORD_TrajectoryPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:socket_all.Dt_RECORD_TrajectoryPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.x_g() <= 0 && from.x_g() >= 0)) {
    _internal_set_x_g(from._internal_x_g());
  }
  if (!(from.y_g() <= 0 && from.y_g() >= 0)) {
    _internal_set_y_g(from._internal_y_g());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.kappa() <= 0 && from.kappa() >= 0)) {
    _internal_set_kappa(from._internal_kappa());
  }
  if (!(from.slope() <= 0 && from.slope() >= 0)) {
    _internal_set_slope(from._internal_slope());
  }
  if (from.lane_no() != 0) {
    _internal_set_lane_no(from._internal_lane_no());
  }
  if (from.road_no() != 0) {
    _internal_set_road_no(from._internal_road_no());
  }
}

void Dt_RECORD_TrajectoryPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:socket_all.Dt_RECORD_TrajectoryPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dt_RECORD_TrajectoryPoints::CopyFrom(const Dt_RECORD_TrajectoryPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:socket_all.Dt_RECORD_TrajectoryPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_RECORD_TrajectoryPoints::IsInitialized() const {
  return true;
}

void Dt_RECORD_TrajectoryPoints::InternalSwap(Dt_RECORD_TrajectoryPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(x_g_, other->x_g_);
  swap(y_g_, other->y_g_);
  swap(t_, other->t_);
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
  swap(theta_, other->theta_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(kappa_, other->kappa_);
  swap(slope_, other->slope_);
  swap(lane_no_, other->lane_no_);
  swap(road_no_, other->road_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dt_RECORD_TrajectoryPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace socket_all
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::socket_all::LogFile* Arena::CreateMaybeMessage< ::socket_all::LogFile >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::LogFile >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Frame* Arena::CreateMaybeMessage< ::socket_all::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::HdmapToPc_data* Arena::CreateMaybeMessage< ::socket_all::HdmapToPc_data >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::HdmapToPc_data >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_HdmapInfo* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_HdmapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_HdmapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_HdmapFrontPLane* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_HdmapFrontPLane >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_HdmapFrontPLane >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_PlanSeg* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_PlanSeg >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_PlanSeg >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_HdMapLane* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_HdMapLane >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_HdMapLane >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_ARRAY_100_LaneNode* Arena::CreateMaybeMessage< ::socket_all::Dt_ARRAY_100_LaneNode >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_ARRAY_100_LaneNode >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_PoiObstacle* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_PoiObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_PoiObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_MarkArrow* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_MarkArrow >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_MarkArrow >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_HdmapLocalLane* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_HdmapLocalLane >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_HdmapLocalLane >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_Crosswalk* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_Crosswalk >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_Crosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::DecisionToPC* Arena::CreateMaybeMessage< ::socket_all::DecisionToPC >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::DecisionToPC >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_LocalizationInfo* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_LocalizationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_LocalizationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_LocalizationResult* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_LocalizationResult >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_LocalizationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_TrajectoryPointsInfos* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_TrajectoryPointsInfos >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_TrajectoryPointsInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::socket_all::Dt_RECORD_TrajectoryPoints* Arena::CreateMaybeMessage< ::socket_all::Dt_RECORD_TrajectoryPoints >(Arena* arena) {
  return Arena::CreateInternal< ::socket_all::Dt_RECORD_TrajectoryPoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
