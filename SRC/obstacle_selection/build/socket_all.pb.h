// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socket_all.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_socket_5fall_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_socket_5fall_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_socket_5fall_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_socket_5fall_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_socket_5fall_2eproto;
namespace socket_all {
class DecisionToPC;
class DecisionToPCDefaultTypeInternal;
extern DecisionToPCDefaultTypeInternal _DecisionToPC_default_instance_;
class Dt_ARRAY_200_GridInfoX;
class Dt_ARRAY_200_GridInfoXDefaultTypeInternal;
extern Dt_ARRAY_200_GridInfoXDefaultTypeInternal _Dt_ARRAY_200_GridInfoX_default_instance_;
class Dt_RECORD_AccInfo;
class Dt_RECORD_AccInfoDefaultTypeInternal;
extern Dt_RECORD_AccInfoDefaultTypeInternal _Dt_RECORD_AccInfo_default_instance_;
class Dt_RECORD_Crosswalk;
class Dt_RECORD_CrosswalkDefaultTypeInternal;
extern Dt_RECORD_CrosswalkDefaultTypeInternal _Dt_RECORD_Crosswalk_default_instance_;
class Dt_RECORD_EnvModelInfos;
class Dt_RECORD_EnvModelInfosDefaultTypeInternal;
extern Dt_RECORD_EnvModelInfosDefaultTypeInternal _Dt_RECORD_EnvModelInfos_default_instance_;
class Dt_RECORD_HdMapLane;
class Dt_RECORD_HdMapLaneDefaultTypeInternal;
extern Dt_RECORD_HdMapLaneDefaultTypeInternal _Dt_RECORD_HdMapLane_default_instance_;
class Dt_RECORD_HdmapFrontPLane;
class Dt_RECORD_HdmapFrontPLaneDefaultTypeInternal;
extern Dt_RECORD_HdmapFrontPLaneDefaultTypeInternal _Dt_RECORD_HdmapFrontPLane_default_instance_;
class Dt_RECORD_HdmapInfo;
class Dt_RECORD_HdmapInfoDefaultTypeInternal;
extern Dt_RECORD_HdmapInfoDefaultTypeInternal _Dt_RECORD_HdmapInfo_default_instance_;
class Dt_RECORD_HdmapLocalLane;
class Dt_RECORD_HdmapLocalLaneDefaultTypeInternal;
extern Dt_RECORD_HdmapLocalLaneDefaultTypeInternal _Dt_RECORD_HdmapLocalLane_default_instance_;
class Dt_RECORD_LaneLines;
class Dt_RECORD_LaneLinesDefaultTypeInternal;
extern Dt_RECORD_LaneLinesDefaultTypeInternal _Dt_RECORD_LaneLines_default_instance_;
class Dt_RECORD_LaneNode;
class Dt_RECORD_LaneNodeDefaultTypeInternal;
extern Dt_RECORD_LaneNodeDefaultTypeInternal _Dt_RECORD_LaneNode_default_instance_;
class Dt_RECORD_Lanes;
class Dt_RECORD_LanesDefaultTypeInternal;
extern Dt_RECORD_LanesDefaultTypeInternal _Dt_RECORD_Lanes_default_instance_;
class Dt_RECORD_LocalizationInfo;
class Dt_RECORD_LocalizationInfoDefaultTypeInternal;
extern Dt_RECORD_LocalizationInfoDefaultTypeInternal _Dt_RECORD_LocalizationInfo_default_instance_;
class Dt_RECORD_LocalizationResult;
class Dt_RECORD_LocalizationResultDefaultTypeInternal;
extern Dt_RECORD_LocalizationResultDefaultTypeInternal _Dt_RECORD_LocalizationResult_default_instance_;
class Dt_RECORD_MarkArrow;
class Dt_RECORD_MarkArrowDefaultTypeInternal;
extern Dt_RECORD_MarkArrowDefaultTypeInternal _Dt_RECORD_MarkArrow_default_instance_;
class Dt_RECORD_Obstacles;
class Dt_RECORD_ObstaclesDefaultTypeInternal;
extern Dt_RECORD_ObstaclesDefaultTypeInternal _Dt_RECORD_Obstacles_default_instance_;
class Dt_RECORD_PlanSeg;
class Dt_RECORD_PlanSegDefaultTypeInternal;
extern Dt_RECORD_PlanSegDefaultTypeInternal _Dt_RECORD_PlanSeg_default_instance_;
class Dt_RECORD_PoiObstacle;
class Dt_RECORD_PoiObstacleDefaultTypeInternal;
extern Dt_RECORD_PoiObstacleDefaultTypeInternal _Dt_RECORD_PoiObstacle_default_instance_;
class Dt_RECORD_TrafficLights;
class Dt_RECORD_TrafficLightsDefaultTypeInternal;
extern Dt_RECORD_TrafficLightsDefaultTypeInternal _Dt_RECORD_TrafficLights_default_instance_;
class Dt_RECORD_TrafficMarkings;
class Dt_RECORD_TrafficMarkingsDefaultTypeInternal;
extern Dt_RECORD_TrafficMarkingsDefaultTypeInternal _Dt_RECORD_TrafficMarkings_default_instance_;
class Dt_RECORD_TrafficSigns;
class Dt_RECORD_TrafficSignsDefaultTypeInternal;
extern Dt_RECORD_TrafficSignsDefaultTypeInternal _Dt_RECORD_TrafficSigns_default_instance_;
class Dt_RECORD_TrajectoryPoints;
class Dt_RECORD_TrajectoryPointsDefaultTypeInternal;
extern Dt_RECORD_TrajectoryPointsDefaultTypeInternal _Dt_RECORD_TrajectoryPoints_default_instance_;
class Dt_RECORD_TrajectoryPointsInfos;
class Dt_RECORD_TrajectoryPointsInfosDefaultTypeInternal;
extern Dt_RECORD_TrajectoryPointsInfosDefaultTypeInternal _Dt_RECORD_TrajectoryPointsInfos_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class LogFile;
class LogFileDefaultTypeInternal;
extern LogFileDefaultTypeInternal _LogFile_default_instance_;
}  // namespace socket_all
PROTOBUF_NAMESPACE_OPEN
template<> ::socket_all::DecisionToPC* Arena::CreateMaybeMessage<::socket_all::DecisionToPC>(Arena*);
template<> ::socket_all::Dt_ARRAY_200_GridInfoX* Arena::CreateMaybeMessage<::socket_all::Dt_ARRAY_200_GridInfoX>(Arena*);
template<> ::socket_all::Dt_RECORD_AccInfo* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_AccInfo>(Arena*);
template<> ::socket_all::Dt_RECORD_Crosswalk* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_Crosswalk>(Arena*);
template<> ::socket_all::Dt_RECORD_EnvModelInfos* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_EnvModelInfos>(Arena*);
template<> ::socket_all::Dt_RECORD_HdMapLane* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_HdMapLane>(Arena*);
template<> ::socket_all::Dt_RECORD_HdmapFrontPLane* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_HdmapFrontPLane>(Arena*);
template<> ::socket_all::Dt_RECORD_HdmapInfo* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_HdmapInfo>(Arena*);
template<> ::socket_all::Dt_RECORD_HdmapLocalLane* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_HdmapLocalLane>(Arena*);
template<> ::socket_all::Dt_RECORD_LaneLines* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_LaneLines>(Arena*);
template<> ::socket_all::Dt_RECORD_LaneNode* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_LaneNode>(Arena*);
template<> ::socket_all::Dt_RECORD_Lanes* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_Lanes>(Arena*);
template<> ::socket_all::Dt_RECORD_LocalizationInfo* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_LocalizationInfo>(Arena*);
template<> ::socket_all::Dt_RECORD_LocalizationResult* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_LocalizationResult>(Arena*);
template<> ::socket_all::Dt_RECORD_MarkArrow* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_MarkArrow>(Arena*);
template<> ::socket_all::Dt_RECORD_Obstacles* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_Obstacles>(Arena*);
template<> ::socket_all::Dt_RECORD_PlanSeg* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_PlanSeg>(Arena*);
template<> ::socket_all::Dt_RECORD_PoiObstacle* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_PoiObstacle>(Arena*);
template<> ::socket_all::Dt_RECORD_TrafficLights* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_TrafficLights>(Arena*);
template<> ::socket_all::Dt_RECORD_TrafficMarkings* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_TrafficMarkings>(Arena*);
template<> ::socket_all::Dt_RECORD_TrafficSigns* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_TrafficSigns>(Arena*);
template<> ::socket_all::Dt_RECORD_TrajectoryPoints* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_TrajectoryPoints>(Arena*);
template<> ::socket_all::Dt_RECORD_TrajectoryPointsInfos* Arena::CreateMaybeMessage<::socket_all::Dt_RECORD_TrajectoryPointsInfos>(Arena*);
template<> ::socket_all::Frame* Arena::CreateMaybeMessage<::socket_all::Frame>(Arena*);
template<> ::socket_all::LogFile* Arena::CreateMaybeMessage<::socket_all::LogFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace socket_all {

// ===================================================================

class LogFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.LogFile) */ {
 public:
  LogFile();
  virtual ~LogFile();

  LogFile(const LogFile& from);
  LogFile(LogFile&& from) noexcept
    : LogFile() {
    *this = ::std::move(from);
  }

  inline LogFile& operator=(const LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogFile& operator=(LogFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogFile* internal_default_instance() {
    return reinterpret_cast<const LogFile*>(
               &_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogFile& a, LogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LogFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogFile* New() const final {
    return CreateMaybeMessage<LogFile>(nullptr);
  }

  LogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogFile& from);
  void MergeFrom(const LogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.LogFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kFrameTotalNumFieldNumber = 1,
  };
  // repeated .socket_all.Frame frame = 2;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::socket_all::Frame* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Frame >*
      mutable_frame();
  private:
  const ::socket_all::Frame& _internal_frame(int index) const;
  ::socket_all::Frame* _internal_add_frame();
  public:
  const ::socket_all::Frame& frame(int index) const;
  ::socket_all::Frame* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Frame >&
      frame() const;

  // int32 frame_total_num = 1;
  void clear_frame_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_total_num() const;
  void set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_total_num() const;
  void _internal_set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.LogFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Frame > frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_total_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecisionToPCFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // .socket_all.DecisionToPC decisionToPC = 2;
  bool has_decisiontopc() const;
  private:
  bool _internal_has_decisiontopc() const;
  public:
  void clear_decisiontopc();
  const ::socket_all::DecisionToPC& decisiontopc() const;
  ::socket_all::DecisionToPC* release_decisiontopc();
  ::socket_all::DecisionToPC* mutable_decisiontopc();
  void set_allocated_decisiontopc(::socket_all::DecisionToPC* decisiontopc);
  private:
  const ::socket_all::DecisionToPC& _internal_decisiontopc() const;
  ::socket_all::DecisionToPC* _internal_mutable_decisiontopc();
  public:

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::socket_all::DecisionToPC* decisiontopc_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_HdmapInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_HdmapInfo) */ {
 public:
  Dt_RECORD_HdmapInfo();
  virtual ~Dt_RECORD_HdmapInfo();

  Dt_RECORD_HdmapInfo(const Dt_RECORD_HdmapInfo& from);
  Dt_RECORD_HdmapInfo(Dt_RECORD_HdmapInfo&& from) noexcept
    : Dt_RECORD_HdmapInfo() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_HdmapInfo& operator=(const Dt_RECORD_HdmapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_HdmapInfo& operator=(Dt_RECORD_HdmapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_HdmapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_HdmapInfo* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_HdmapInfo*>(
               &_Dt_RECORD_HdmapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dt_RECORD_HdmapInfo& a, Dt_RECORD_HdmapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_HdmapInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_HdmapInfo* New() const final {
    return CreateMaybeMessage<Dt_RECORD_HdmapInfo>(nullptr);
  }

  Dt_RECORD_HdmapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_HdmapInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_HdmapInfo& from);
  void MergeFrom(const Dt_RECORD_HdmapInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_HdmapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_HdmapInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanpathFieldNumber = 1,
    kOriginXFieldNumber = 2,
    kOriginYFieldNumber = 3,
    kOriginZFieldNumber = 4,
    kOriginYawFieldNumber = 5,
    kGoalXFieldNumber = 6,
    kGoalYFieldNumber = 7,
    kGoalZFieldNumber = 8,
    kGoalYawFieldNumber = 9,
  };
  // bool planpath = 1;
  void clear_planpath();
  bool planpath() const;
  void set_planpath(bool value);
  private:
  bool _internal_planpath() const;
  void _internal_set_planpath(bool value);
  public:

  // float origin_x = 2;
  void clear_origin_x();
  float origin_x() const;
  void set_origin_x(float value);
  private:
  float _internal_origin_x() const;
  void _internal_set_origin_x(float value);
  public:

  // float origin_y = 3;
  void clear_origin_y();
  float origin_y() const;
  void set_origin_y(float value);
  private:
  float _internal_origin_y() const;
  void _internal_set_origin_y(float value);
  public:

  // float origin_z = 4;
  void clear_origin_z();
  float origin_z() const;
  void set_origin_z(float value);
  private:
  float _internal_origin_z() const;
  void _internal_set_origin_z(float value);
  public:

  // float origin_yaw = 5;
  void clear_origin_yaw();
  float origin_yaw() const;
  void set_origin_yaw(float value);
  private:
  float _internal_origin_yaw() const;
  void _internal_set_origin_yaw(float value);
  public:

  // float goal_x = 6;
  void clear_goal_x();
  float goal_x() const;
  void set_goal_x(float value);
  private:
  float _internal_goal_x() const;
  void _internal_set_goal_x(float value);
  public:

  // float goal_y = 7;
  void clear_goal_y();
  float goal_y() const;
  void set_goal_y(float value);
  private:
  float _internal_goal_y() const;
  void _internal_set_goal_y(float value);
  public:

  // float goal_z = 8;
  void clear_goal_z();
  float goal_z() const;
  void set_goal_z(float value);
  private:
  float _internal_goal_z() const;
  void _internal_set_goal_z(float value);
  public:

  // float goal_yaw = 9;
  void clear_goal_yaw();
  float goal_yaw() const;
  void set_goal_yaw(float value);
  private:
  float _internal_goal_yaw() const;
  void _internal_set_goal_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_HdmapInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool planpath_;
  float origin_x_;
  float origin_y_;
  float origin_z_;
  float origin_yaw_;
  float goal_x_;
  float goal_y_;
  float goal_z_;
  float goal_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_HdmapFrontPLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_HdmapFrontPLane) */ {
 public:
  Dt_RECORD_HdmapFrontPLane();
  virtual ~Dt_RECORD_HdmapFrontPLane();

  Dt_RECORD_HdmapFrontPLane(const Dt_RECORD_HdmapFrontPLane& from);
  Dt_RECORD_HdmapFrontPLane(Dt_RECORD_HdmapFrontPLane&& from) noexcept
    : Dt_RECORD_HdmapFrontPLane() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_HdmapFrontPLane& operator=(const Dt_RECORD_HdmapFrontPLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_HdmapFrontPLane& operator=(Dt_RECORD_HdmapFrontPLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_HdmapFrontPLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_HdmapFrontPLane* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_HdmapFrontPLane*>(
               &_Dt_RECORD_HdmapFrontPLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dt_RECORD_HdmapFrontPLane& a, Dt_RECORD_HdmapFrontPLane& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_HdmapFrontPLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_HdmapFrontPLane* New() const final {
    return CreateMaybeMessage<Dt_RECORD_HdmapFrontPLane>(nullptr);
  }

  Dt_RECORD_HdmapFrontPLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_HdmapFrontPLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_HdmapFrontPLane& from);
  void MergeFrom(const Dt_RECORD_HdmapFrontPLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_HdmapFrontPLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_HdmapFrontPLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanSegFieldNumber = 2,
    kPlanSegCountFieldNumber = 1,
  };
  // repeated .socket_all.Dt_RECORD_PlanSeg PlanSeg = 2;
  int planseg_size() const;
  private:
  int _internal_planseg_size() const;
  public:
  void clear_planseg();
  ::socket_all::Dt_RECORD_PlanSeg* mutable_planseg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >*
      mutable_planseg();
  private:
  const ::socket_all::Dt_RECORD_PlanSeg& _internal_planseg(int index) const;
  ::socket_all::Dt_RECORD_PlanSeg* _internal_add_planseg();
  public:
  const ::socket_all::Dt_RECORD_PlanSeg& planseg(int index) const;
  ::socket_all::Dt_RECORD_PlanSeg* add_planseg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >&
      planseg() const;

  // int32 plan_seg_count = 1;
  void clear_plan_seg_count();
  ::PROTOBUF_NAMESPACE_ID::int32 plan_seg_count() const;
  void set_plan_seg_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plan_seg_count() const;
  void _internal_set_plan_seg_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_HdmapFrontPLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg > planseg_;
  ::PROTOBUF_NAMESPACE_ID::int32 plan_seg_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_PlanSeg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_PlanSeg) */ {
 public:
  Dt_RECORD_PlanSeg();
  virtual ~Dt_RECORD_PlanSeg();

  Dt_RECORD_PlanSeg(const Dt_RECORD_PlanSeg& from);
  Dt_RECORD_PlanSeg(Dt_RECORD_PlanSeg&& from) noexcept
    : Dt_RECORD_PlanSeg() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_PlanSeg& operator=(const Dt_RECORD_PlanSeg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_PlanSeg& operator=(Dt_RECORD_PlanSeg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_PlanSeg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_PlanSeg* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_PlanSeg*>(
               &_Dt_RECORD_PlanSeg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Dt_RECORD_PlanSeg& a, Dt_RECORD_PlanSeg& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_PlanSeg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_PlanSeg* New() const final {
    return CreateMaybeMessage<Dt_RECORD_PlanSeg>(nullptr);
  }

  Dt_RECORD_PlanSeg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_PlanSeg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_PlanSeg& from);
  void MergeFrom(const Dt_RECORD_PlanSeg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_PlanSeg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_PlanSeg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneFieldNumber = 2,
    kLaneCountFieldNumber = 1,
  };
  // repeated .socket_all.Dt_RECORD_HdMapLane Lane = 2;
  int lane_size() const;
  private:
  int _internal_lane_size() const;
  public:
  void clear_lane();
  ::socket_all::Dt_RECORD_HdMapLane* mutable_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >*
      mutable_lane();
  private:
  const ::socket_all::Dt_RECORD_HdMapLane& _internal_lane(int index) const;
  ::socket_all::Dt_RECORD_HdMapLane* _internal_add_lane();
  public:
  const ::socket_all::Dt_RECORD_HdMapLane& lane(int index) const;
  ::socket_all::Dt_RECORD_HdMapLane* add_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >&
      lane() const;

  // int32 lane_count = 1;
  void clear_lane_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_count() const;
  void set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_count() const;
  void _internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_PlanSeg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane > lane_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_HdMapLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_HdMapLane) */ {
 public:
  Dt_RECORD_HdMapLane();
  virtual ~Dt_RECORD_HdMapLane();

  Dt_RECORD_HdMapLane(const Dt_RECORD_HdMapLane& from);
  Dt_RECORD_HdMapLane(Dt_RECORD_HdMapLane&& from) noexcept
    : Dt_RECORD_HdMapLane() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_HdMapLane& operator=(const Dt_RECORD_HdMapLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_HdMapLane& operator=(Dt_RECORD_HdMapLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_HdMapLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_HdMapLane* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_HdMapLane*>(
               &_Dt_RECORD_HdMapLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Dt_RECORD_HdMapLane& a, Dt_RECORD_HdMapLane& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_HdMapLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_HdMapLane* New() const final {
    return CreateMaybeMessage<Dt_RECORD_HdMapLane>(nullptr);
  }

  Dt_RECORD_HdMapLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_HdMapLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_HdMapLane& from);
  void MergeFrom(const Dt_RECORD_HdMapLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_HdMapLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_HdMapLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneNodeFieldNumber = 2,
    kPOIFieldNumber = 32,
    kObstacleFieldNumber = 33,
    kMarkFieldNumber = 34,
    kArrowFieldNumber = 35,
    kCrosswalkFieldNumber = 36,
    kNodeCountFieldNumber = 1,
    kLaneIDFieldNumber = 3,
    kChangeLaneFlagFieldNumber = 4,
    kLaneNOFieldNumber = 5,
    kLanePositionFieldNumber = 6,
    kLaneTypeFieldNumber = 7,
    kLaneWidthFieldNumber = 8,
    kLaneLengthFieldNumber = 9,
    kLaneWayCountFieldNumber = 10,
    kTurnInfoFieldNumber = 11,
    kLboundaryIDFieldNumber = 12,
    kLboundaryTypeFieldNumber = 13,
    kLboundaryColorFieldNumber = 14,
    kRboundaryIDFieldNumber = 15,
    kRboundaryTypeFieldNumber = 16,
    kRboundaryColorFieldNumber = 17,
    kRoadIDFieldNumber = 18,
    kRoadTypeFieldNumber = 19,
    kRoadPositionFieldNumber = 20,
    kRoadDirectionFieldNumber = 21,
    kRoadLengthFieldNumber = 22,
    kRoadWidthFieldNumber = 23,
    kLaneCountFieldNumber = 24,
    kSpeedLimitFieldNumber = 25,
    kPOINumFieldNumber = 26,
    kObstacleNumFieldNumber = 27,
    kMarkNumFieldNumber = 28,
    kArrowNumFieldNumber = 29,
    kCrosswalkNumFieldNumber = 30,
    kHGNodeNumFieldNumber = 31,
    kHgnodeIDFieldNumber = 37,
    kHgnodeDistanceFieldNumber = 38,
  };
  // repeated .socket_all.Dt_RECORD_LaneNode LaneNode = 2;
  int lanenode_size() const;
  private:
  int _internal_lanenode_size() const;
  public:
  void clear_lanenode();
  ::socket_all::Dt_RECORD_LaneNode* mutable_lanenode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneNode >*
      mutable_lanenode();
  private:
  const ::socket_all::Dt_RECORD_LaneNode& _internal_lanenode(int index) const;
  ::socket_all::Dt_RECORD_LaneNode* _internal_add_lanenode();
  public:
  const ::socket_all::Dt_RECORD_LaneNode& lanenode(int index) const;
  ::socket_all::Dt_RECORD_LaneNode* add_lanenode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneNode >&
      lanenode() const;

  // repeated .socket_all.Dt_RECORD_PoiObstacle POI = 32;
  int poi_size() const;
  private:
  int _internal_poi_size() const;
  public:
  void clear_poi();
  ::socket_all::Dt_RECORD_PoiObstacle* mutable_poi(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >*
      mutable_poi();
  private:
  const ::socket_all::Dt_RECORD_PoiObstacle& _internal_poi(int index) const;
  ::socket_all::Dt_RECORD_PoiObstacle* _internal_add_poi();
  public:
  const ::socket_all::Dt_RECORD_PoiObstacle& poi(int index) const;
  ::socket_all::Dt_RECORD_PoiObstacle* add_poi();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >&
      poi() const;

  // repeated .socket_all.Dt_RECORD_PoiObstacle Obstacle = 33;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::socket_all::Dt_RECORD_PoiObstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >*
      mutable_obstacle();
  private:
  const ::socket_all::Dt_RECORD_PoiObstacle& _internal_obstacle(int index) const;
  ::socket_all::Dt_RECORD_PoiObstacle* _internal_add_obstacle();
  public:
  const ::socket_all::Dt_RECORD_PoiObstacle& obstacle(int index) const;
  ::socket_all::Dt_RECORD_PoiObstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >&
      obstacle() const;

  // repeated .socket_all.Dt_RECORD_MarkArrow Mark = 34;
  int mark_size() const;
  private:
  int _internal_mark_size() const;
  public:
  void clear_mark();
  ::socket_all::Dt_RECORD_MarkArrow* mutable_mark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >*
      mutable_mark();
  private:
  const ::socket_all::Dt_RECORD_MarkArrow& _internal_mark(int index) const;
  ::socket_all::Dt_RECORD_MarkArrow* _internal_add_mark();
  public:
  const ::socket_all::Dt_RECORD_MarkArrow& mark(int index) const;
  ::socket_all::Dt_RECORD_MarkArrow* add_mark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >&
      mark() const;

  // repeated .socket_all.Dt_RECORD_MarkArrow Arrow = 35;
  int arrow_size() const;
  private:
  int _internal_arrow_size() const;
  public:
  void clear_arrow();
  ::socket_all::Dt_RECORD_MarkArrow* mutable_arrow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >*
      mutable_arrow();
  private:
  const ::socket_all::Dt_RECORD_MarkArrow& _internal_arrow(int index) const;
  ::socket_all::Dt_RECORD_MarkArrow* _internal_add_arrow();
  public:
  const ::socket_all::Dt_RECORD_MarkArrow& arrow(int index) const;
  ::socket_all::Dt_RECORD_MarkArrow* add_arrow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >&
      arrow() const;

  // repeated .socket_all.Dt_RECORD_Crosswalk Crosswalk = 36;
  int crosswalk_size() const;
  private:
  int _internal_crosswalk_size() const;
  public:
  void clear_crosswalk();
  ::socket_all::Dt_RECORD_Crosswalk* mutable_crosswalk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Crosswalk >*
      mutable_crosswalk();
  private:
  const ::socket_all::Dt_RECORD_Crosswalk& _internal_crosswalk(int index) const;
  ::socket_all::Dt_RECORD_Crosswalk* _internal_add_crosswalk();
  public:
  const ::socket_all::Dt_RECORD_Crosswalk& crosswalk(int index) const;
  ::socket_all::Dt_RECORD_Crosswalk* add_crosswalk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Crosswalk >&
      crosswalk() const;

  // uint32 node_count = 1;
  void clear_node_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_count() const;
  void set_node_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_count() const;
  void _internal_set_node_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 laneID = 3;
  void clear_laneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 laneid() const;
  void set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_laneid() const;
  void _internal_set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool change_lane_flag = 4;
  void clear_change_lane_flag();
  bool change_lane_flag() const;
  void set_change_lane_flag(bool value);
  private:
  bool _internal_change_lane_flag() const;
  void _internal_set_change_lane_flag(bool value);
  public:

  // int32 lane_NO = 5;
  void clear_lane_no();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_no() const;
  void set_lane_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_no() const;
  void _internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 lane_position = 6;
  void clear_lane_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_position() const;
  void set_lane_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_position() const;
  void _internal_set_lane_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lane_type = 7;
  void clear_lane_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_type() const;
  void set_lane_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_type() const;
  void _internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float lane_width = 8;
  void clear_lane_width();
  float lane_width() const;
  void set_lane_width(float value);
  private:
  float _internal_lane_width() const;
  void _internal_set_lane_width(float value);
  public:

  // float lane_length = 9;
  void clear_lane_length();
  float lane_length() const;
  void set_lane_length(float value);
  private:
  float _internal_lane_length() const;
  void _internal_set_lane_length(float value);
  public:

  // uint32 lane_way_count = 10;
  void clear_lane_way_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_way_count() const;
  void set_lane_way_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_way_count() const;
  void _internal_set_lane_way_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 turn_info = 11;
  void clear_turn_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_info() const;
  void set_turn_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_turn_info() const;
  void _internal_set_turn_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lboundaryID = 12;
  void clear_lboundaryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lboundaryid() const;
  void set_lboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lboundaryid() const;
  void _internal_set_lboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lboundary_type = 13;
  void clear_lboundary_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 lboundary_type() const;
  void set_lboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lboundary_type() const;
  void _internal_set_lboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lboundary_color = 14;
  void clear_lboundary_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 lboundary_color() const;
  void set_lboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lboundary_color() const;
  void _internal_set_lboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rboundaryID = 15;
  void clear_rboundaryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rboundaryid() const;
  void set_rboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rboundaryid() const;
  void _internal_set_rboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rboundary_type = 16;
  void clear_rboundary_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 rboundary_type() const;
  void set_rboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rboundary_type() const;
  void _internal_set_rboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rboundary_color = 17;
  void clear_rboundary_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 rboundary_color() const;
  void set_rboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rboundary_color() const;
  void _internal_set_rboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 road_ID = 18;
  void clear_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_id() const;
  void set_road_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_id() const;
  void _internal_set_road_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 road_type = 19;
  void clear_road_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_type() const;
  void set_road_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_type() const;
  void _internal_set_road_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 road_position = 20;
  void clear_road_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_position() const;
  void set_road_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_position() const;
  void _internal_set_road_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 road_direction = 21;
  void clear_road_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_direction() const;
  void set_road_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_direction() const;
  void _internal_set_road_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float road_length = 22;
  void clear_road_length();
  float road_length() const;
  void set_road_length(float value);
  private:
  float _internal_road_length() const;
  void _internal_set_road_length(float value);
  public:

  // float road_width = 23;
  void clear_road_width();
  float road_width() const;
  void set_road_width(float value);
  private:
  float _internal_road_width() const;
  void _internal_set_road_width(float value);
  public:

  // uint32 lane_count = 24;
  void clear_lane_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_count() const;
  void set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_count() const;
  void _internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float speed_limit = 25;
  void clear_speed_limit();
  float speed_limit() const;
  void set_speed_limit(float value);
  private:
  float _internal_speed_limit() const;
  void _internal_set_speed_limit(float value);
  public:

  // uint32 POI_num = 26;
  void clear_poi_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 poi_num() const;
  void set_poi_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_poi_num() const;
  void _internal_set_poi_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 obstacle_num = 27;
  void clear_obstacle_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_num() const;
  void set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obstacle_num() const;
  void _internal_set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mark_num = 28;
  void clear_mark_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 mark_num() const;
  void set_mark_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mark_num() const;
  void _internal_set_mark_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 arrow_num = 29;
  void clear_arrow_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 arrow_num() const;
  void set_arrow_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_arrow_num() const;
  void _internal_set_arrow_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crosswalk_num = 30;
  void clear_crosswalk_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 crosswalk_num() const;
  void set_crosswalk_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crosswalk_num() const;
  void _internal_set_crosswalk_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 HGNode_num = 31;
  void clear_hgnode_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 hgnode_num() const;
  void set_hgnode_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hgnode_num() const;
  void _internal_set_hgnode_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hgnodeID = 37;
  void clear_hgnodeid();
  ::PROTOBUF_NAMESPACE_ID::uint32 hgnodeid() const;
  void set_hgnodeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hgnodeid() const;
  void _internal_set_hgnodeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float hgnode_distance = 38;
  void clear_hgnode_distance();
  float hgnode_distance() const;
  void set_hgnode_distance(float value);
  private:
  float _internal_hgnode_distance() const;
  void _internal_set_hgnode_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_HdMapLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneNode > lanenode_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle > poi_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow > mark_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow > arrow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Crosswalk > crosswalk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 laneid_;
  bool change_lane_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_type_;
  float lane_width_;
  float lane_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_way_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lboundaryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lboundary_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lboundary_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rboundaryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rboundary_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rboundary_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_direction_;
  float road_length_;
  float road_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_count_;
  float speed_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poi_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mark_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 arrow_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crosswalk_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hgnode_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hgnodeid_;
  float hgnode_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_LaneNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_LaneNode) */ {
 public:
  Dt_RECORD_LaneNode();
  virtual ~Dt_RECORD_LaneNode();

  Dt_RECORD_LaneNode(const Dt_RECORD_LaneNode& from);
  Dt_RECORD_LaneNode(Dt_RECORD_LaneNode&& from) noexcept
    : Dt_RECORD_LaneNode() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_LaneNode& operator=(const Dt_RECORD_LaneNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_LaneNode& operator=(Dt_RECORD_LaneNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_LaneNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_LaneNode* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_LaneNode*>(
               &_Dt_RECORD_LaneNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Dt_RECORD_LaneNode& a, Dt_RECORD_LaneNode& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_LaneNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_LaneNode* New() const final {
    return CreateMaybeMessage<Dt_RECORD_LaneNode>(nullptr);
  }

  Dt_RECORD_LaneNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_LaneNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_LaneNode& from);
  void MergeFrom(const Dt_RECORD_LaneNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_LaneNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_LaneNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdmapXFieldNumber = 1,
    kHdmapYFieldNumber = 2,
    kHdmapZFieldNumber = 3,
    kHeadingFieldNumber = 4,
    kCurvatureFieldNumber = 5,
    kSlopevFieldNumber = 6,
  };
  // float hdmap_x = 1;
  void clear_hdmap_x();
  float hdmap_x() const;
  void set_hdmap_x(float value);
  private:
  float _internal_hdmap_x() const;
  void _internal_set_hdmap_x(float value);
  public:

  // float hdmap_y = 2;
  void clear_hdmap_y();
  float hdmap_y() const;
  void set_hdmap_y(float value);
  private:
  float _internal_hdmap_y() const;
  void _internal_set_hdmap_y(float value);
  public:

  // float hdmap_z = 3;
  void clear_hdmap_z();
  float hdmap_z() const;
  void set_hdmap_z(float value);
  private:
  float _internal_hdmap_z() const;
  void _internal_set_hdmap_z(float value);
  public:

  // float heading = 4;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float curvature = 5;
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);
  private:
  float _internal_curvature() const;
  void _internal_set_curvature(float value);
  public:

  // float slopev = 6;
  void clear_slopev();
  float slopev() const;
  void set_slopev(float value);
  private:
  float _internal_slopev() const;
  void _internal_set_slopev(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_LaneNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float hdmap_x_;
  float hdmap_y_;
  float hdmap_z_;
  float heading_;
  float curvature_;
  float slopev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_PoiObstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_PoiObstacle) */ {
 public:
  Dt_RECORD_PoiObstacle();
  virtual ~Dt_RECORD_PoiObstacle();

  Dt_RECORD_PoiObstacle(const Dt_RECORD_PoiObstacle& from);
  Dt_RECORD_PoiObstacle(Dt_RECORD_PoiObstacle&& from) noexcept
    : Dt_RECORD_PoiObstacle() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_PoiObstacle& operator=(const Dt_RECORD_PoiObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_PoiObstacle& operator=(Dt_RECORD_PoiObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_PoiObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_PoiObstacle* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_PoiObstacle*>(
               &_Dt_RECORD_PoiObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Dt_RECORD_PoiObstacle& a, Dt_RECORD_PoiObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_PoiObstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_PoiObstacle* New() const final {
    return CreateMaybeMessage<Dt_RECORD_PoiObstacle>(nullptr);
  }

  Dt_RECORD_PoiObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_PoiObstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_PoiObstacle& from);
  void MergeFrom(const Dt_RECORD_PoiObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_PoiObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_PoiObstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float distance = 3;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_PoiObstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_MarkArrow :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_MarkArrow) */ {
 public:
  Dt_RECORD_MarkArrow();
  virtual ~Dt_RECORD_MarkArrow();

  Dt_RECORD_MarkArrow(const Dt_RECORD_MarkArrow& from);
  Dt_RECORD_MarkArrow(Dt_RECORD_MarkArrow&& from) noexcept
    : Dt_RECORD_MarkArrow() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_MarkArrow& operator=(const Dt_RECORD_MarkArrow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_MarkArrow& operator=(Dt_RECORD_MarkArrow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_MarkArrow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_MarkArrow* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_MarkArrow*>(
               &_Dt_RECORD_MarkArrow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Dt_RECORD_MarkArrow& a, Dt_RECORD_MarkArrow& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_MarkArrow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_MarkArrow* New() const final {
    return CreateMaybeMessage<Dt_RECORD_MarkArrow>(nullptr);
  }

  Dt_RECORD_MarkArrow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_MarkArrow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_MarkArrow& from);
  void MergeFrom(const Dt_RECORD_MarkArrow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_MarkArrow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_MarkArrow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kColorFieldNumber = 3,
    kDistanceFieldNumber = 4,
  };
  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float distance = 4;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_MarkArrow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_HdmapLocalLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_HdmapLocalLane) */ {
 public:
  Dt_RECORD_HdmapLocalLane();
  virtual ~Dt_RECORD_HdmapLocalLane();

  Dt_RECORD_HdmapLocalLane(const Dt_RECORD_HdmapLocalLane& from);
  Dt_RECORD_HdmapLocalLane(Dt_RECORD_HdmapLocalLane&& from) noexcept
    : Dt_RECORD_HdmapLocalLane() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_HdmapLocalLane& operator=(const Dt_RECORD_HdmapLocalLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_HdmapLocalLane& operator=(Dt_RECORD_HdmapLocalLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_HdmapLocalLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_HdmapLocalLane* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_HdmapLocalLane*>(
               &_Dt_RECORD_HdmapLocalLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Dt_RECORD_HdmapLocalLane& a, Dt_RECORD_HdmapLocalLane& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_HdmapLocalLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_HdmapLocalLane* New() const final {
    return CreateMaybeMessage<Dt_RECORD_HdmapLocalLane>(nullptr);
  }

  Dt_RECORD_HdmapLocalLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_HdmapLocalLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_HdmapLocalLane& from);
  void MergeFrom(const Dt_RECORD_HdmapLocalLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_HdmapLocalLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_HdmapLocalLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalLaneFieldNumber = 2,
    kNextSegFieldNumber = 4,
    kLaneCountFieldNumber = 1,
    kNextSegCountFieldNumber = 3,
  };
  // repeated .socket_all.Dt_RECORD_HdMapLane LocalLane = 2;
  int locallane_size() const;
  private:
  int _internal_locallane_size() const;
  public:
  void clear_locallane();
  ::socket_all::Dt_RECORD_HdMapLane* mutable_locallane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >*
      mutable_locallane();
  private:
  const ::socket_all::Dt_RECORD_HdMapLane& _internal_locallane(int index) const;
  ::socket_all::Dt_RECORD_HdMapLane* _internal_add_locallane();
  public:
  const ::socket_all::Dt_RECORD_HdMapLane& locallane(int index) const;
  ::socket_all::Dt_RECORD_HdMapLane* add_locallane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >&
      locallane() const;

  // repeated .socket_all.Dt_RECORD_PlanSeg NextSeg = 4;
  int nextseg_size() const;
  private:
  int _internal_nextseg_size() const;
  public:
  void clear_nextseg();
  ::socket_all::Dt_RECORD_PlanSeg* mutable_nextseg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >*
      mutable_nextseg();
  private:
  const ::socket_all::Dt_RECORD_PlanSeg& _internal_nextseg(int index) const;
  ::socket_all::Dt_RECORD_PlanSeg* _internal_add_nextseg();
  public:
  const ::socket_all::Dt_RECORD_PlanSeg& nextseg(int index) const;
  ::socket_all::Dt_RECORD_PlanSeg* add_nextseg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >&
      nextseg() const;

  // uint32 lane_count = 1;
  void clear_lane_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_count() const;
  void set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_count() const;
  void _internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 next_seg_count = 3;
  void clear_next_seg_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_seg_count() const;
  void set_next_seg_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_seg_count() const;
  void _internal_set_next_seg_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_HdmapLocalLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane > locallane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg > nextseg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_seg_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_Crosswalk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_Crosswalk) */ {
 public:
  Dt_RECORD_Crosswalk();
  virtual ~Dt_RECORD_Crosswalk();

  Dt_RECORD_Crosswalk(const Dt_RECORD_Crosswalk& from);
  Dt_RECORD_Crosswalk(Dt_RECORD_Crosswalk&& from) noexcept
    : Dt_RECORD_Crosswalk() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_Crosswalk& operator=(const Dt_RECORD_Crosswalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_Crosswalk& operator=(Dt_RECORD_Crosswalk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_Crosswalk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_Crosswalk* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_Crosswalk*>(
               &_Dt_RECORD_Crosswalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Dt_RECORD_Crosswalk& a, Dt_RECORD_Crosswalk& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_Crosswalk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_Crosswalk* New() const final {
    return CreateMaybeMessage<Dt_RECORD_Crosswalk>(nullptr);
  }

  Dt_RECORD_Crosswalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_Crosswalk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_Crosswalk& from);
  void MergeFrom(const Dt_RECORD_Crosswalk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_Crosswalk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_Crosswalk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float distance = 2;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_Crosswalk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class DecisionToPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.DecisionToPC) */ {
 public:
  DecisionToPC();
  virtual ~DecisionToPC();

  DecisionToPC(const DecisionToPC& from);
  DecisionToPC(DecisionToPC&& from) noexcept
    : DecisionToPC() {
    *this = ::std::move(from);
  }

  inline DecisionToPC& operator=(const DecisionToPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionToPC& operator=(DecisionToPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecisionToPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecisionToPC* internal_default_instance() {
    return reinterpret_cast<const DecisionToPC*>(
               &_DecisionToPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DecisionToPC& a, DecisionToPC& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionToPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecisionToPC* New() const final {
    return CreateMaybeMessage<DecisionToPC>(nullptr);
  }

  DecisionToPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecisionToPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecisionToPC& from);
  void MergeFrom(const DecisionToPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionToPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.DecisionToPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyLocalizationInfoFieldNumber = 1,
    kMyTrajectoryPointsInfoFieldNumber = 2,
    kMyVehicleInfoFieldNumber = 3,
    kMyEnvModelInfoFieldNumber = 4,
    kMyHdmapInfoFieldNumber = 5,
    kMyHdmapFrontPLaneInfoFieldNumber = 6,
    kMyHdmapLocalLaneInfoFieldNumber = 7,
  };
  // .socket_all.Dt_RECORD_LocalizationInfo my_localizationInfo = 1;
  bool has_my_localizationinfo() const;
  private:
  bool _internal_has_my_localizationinfo() const;
  public:
  void clear_my_localizationinfo();
  const ::socket_all::Dt_RECORD_LocalizationInfo& my_localizationinfo() const;
  ::socket_all::Dt_RECORD_LocalizationInfo* release_my_localizationinfo();
  ::socket_all::Dt_RECORD_LocalizationInfo* mutable_my_localizationinfo();
  void set_allocated_my_localizationinfo(::socket_all::Dt_RECORD_LocalizationInfo* my_localizationinfo);
  private:
  const ::socket_all::Dt_RECORD_LocalizationInfo& _internal_my_localizationinfo() const;
  ::socket_all::Dt_RECORD_LocalizationInfo* _internal_mutable_my_localizationinfo();
  public:

  // .socket_all.Dt_RECORD_TrajectoryPointsInfos my_trajectoryPointsInfo = 2;
  bool has_my_trajectorypointsinfo() const;
  private:
  bool _internal_has_my_trajectorypointsinfo() const;
  public:
  void clear_my_trajectorypointsinfo();
  const ::socket_all::Dt_RECORD_TrajectoryPointsInfos& my_trajectorypointsinfo() const;
  ::socket_all::Dt_RECORD_TrajectoryPointsInfos* release_my_trajectorypointsinfo();
  ::socket_all::Dt_RECORD_TrajectoryPointsInfos* mutable_my_trajectorypointsinfo();
  void set_allocated_my_trajectorypointsinfo(::socket_all::Dt_RECORD_TrajectoryPointsInfos* my_trajectorypointsinfo);
  private:
  const ::socket_all::Dt_RECORD_TrajectoryPointsInfos& _internal_my_trajectorypointsinfo() const;
  ::socket_all::Dt_RECORD_TrajectoryPointsInfos* _internal_mutable_my_trajectorypointsinfo();
  public:

  // .socket_all.Dt_RECORD_AccInfo my_vehicleInfo = 3;
  bool has_my_vehicleinfo() const;
  private:
  bool _internal_has_my_vehicleinfo() const;
  public:
  void clear_my_vehicleinfo();
  const ::socket_all::Dt_RECORD_AccInfo& my_vehicleinfo() const;
  ::socket_all::Dt_RECORD_AccInfo* release_my_vehicleinfo();
  ::socket_all::Dt_RECORD_AccInfo* mutable_my_vehicleinfo();
  void set_allocated_my_vehicleinfo(::socket_all::Dt_RECORD_AccInfo* my_vehicleinfo);
  private:
  const ::socket_all::Dt_RECORD_AccInfo& _internal_my_vehicleinfo() const;
  ::socket_all::Dt_RECORD_AccInfo* _internal_mutable_my_vehicleinfo();
  public:

  // .socket_all.Dt_RECORD_EnvModelInfos my_envModelInfo = 4;
  bool has_my_envmodelinfo() const;
  private:
  bool _internal_has_my_envmodelinfo() const;
  public:
  void clear_my_envmodelinfo();
  const ::socket_all::Dt_RECORD_EnvModelInfos& my_envmodelinfo() const;
  ::socket_all::Dt_RECORD_EnvModelInfos* release_my_envmodelinfo();
  ::socket_all::Dt_RECORD_EnvModelInfos* mutable_my_envmodelinfo();
  void set_allocated_my_envmodelinfo(::socket_all::Dt_RECORD_EnvModelInfos* my_envmodelinfo);
  private:
  const ::socket_all::Dt_RECORD_EnvModelInfos& _internal_my_envmodelinfo() const;
  ::socket_all::Dt_RECORD_EnvModelInfos* _internal_mutable_my_envmodelinfo();
  public:

  // .socket_all.Dt_RECORD_HdmapInfo my_hdmapInfo = 5;
  bool has_my_hdmapinfo() const;
  private:
  bool _internal_has_my_hdmapinfo() const;
  public:
  void clear_my_hdmapinfo();
  const ::socket_all::Dt_RECORD_HdmapInfo& my_hdmapinfo() const;
  ::socket_all::Dt_RECORD_HdmapInfo* release_my_hdmapinfo();
  ::socket_all::Dt_RECORD_HdmapInfo* mutable_my_hdmapinfo();
  void set_allocated_my_hdmapinfo(::socket_all::Dt_RECORD_HdmapInfo* my_hdmapinfo);
  private:
  const ::socket_all::Dt_RECORD_HdmapInfo& _internal_my_hdmapinfo() const;
  ::socket_all::Dt_RECORD_HdmapInfo* _internal_mutable_my_hdmapinfo();
  public:

  // .socket_all.Dt_RECORD_HdmapFrontPLane my_hdmapFrontPLaneInfo = 6;
  bool has_my_hdmapfrontplaneinfo() const;
  private:
  bool _internal_has_my_hdmapfrontplaneinfo() const;
  public:
  void clear_my_hdmapfrontplaneinfo();
  const ::socket_all::Dt_RECORD_HdmapFrontPLane& my_hdmapfrontplaneinfo() const;
  ::socket_all::Dt_RECORD_HdmapFrontPLane* release_my_hdmapfrontplaneinfo();
  ::socket_all::Dt_RECORD_HdmapFrontPLane* mutable_my_hdmapfrontplaneinfo();
  void set_allocated_my_hdmapfrontplaneinfo(::socket_all::Dt_RECORD_HdmapFrontPLane* my_hdmapfrontplaneinfo);
  private:
  const ::socket_all::Dt_RECORD_HdmapFrontPLane& _internal_my_hdmapfrontplaneinfo() const;
  ::socket_all::Dt_RECORD_HdmapFrontPLane* _internal_mutable_my_hdmapfrontplaneinfo();
  public:

  // .socket_all.Dt_RECORD_HdmapLocalLane my_hdmapLocalLaneInfo = 7;
  bool has_my_hdmaplocallaneinfo() const;
  private:
  bool _internal_has_my_hdmaplocallaneinfo() const;
  public:
  void clear_my_hdmaplocallaneinfo();
  const ::socket_all::Dt_RECORD_HdmapLocalLane& my_hdmaplocallaneinfo() const;
  ::socket_all::Dt_RECORD_HdmapLocalLane* release_my_hdmaplocallaneinfo();
  ::socket_all::Dt_RECORD_HdmapLocalLane* mutable_my_hdmaplocallaneinfo();
  void set_allocated_my_hdmaplocallaneinfo(::socket_all::Dt_RECORD_HdmapLocalLane* my_hdmaplocallaneinfo);
  private:
  const ::socket_all::Dt_RECORD_HdmapLocalLane& _internal_my_hdmaplocallaneinfo() const;
  ::socket_all::Dt_RECORD_HdmapLocalLane* _internal_mutable_my_hdmaplocallaneinfo();
  public:

  // @@protoc_insertion_point(class_scope:socket_all.DecisionToPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::socket_all::Dt_RECORD_LocalizationInfo* my_localizationinfo_;
  ::socket_all::Dt_RECORD_TrajectoryPointsInfos* my_trajectorypointsinfo_;
  ::socket_all::Dt_RECORD_AccInfo* my_vehicleinfo_;
  ::socket_all::Dt_RECORD_EnvModelInfos* my_envmodelinfo_;
  ::socket_all::Dt_RECORD_HdmapInfo* my_hdmapinfo_;
  ::socket_all::Dt_RECORD_HdmapFrontPLane* my_hdmapfrontplaneinfo_;
  ::socket_all::Dt_RECORD_HdmapLocalLane* my_hdmaplocallaneinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_LocalizationInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_LocalizationInfo) */ {
 public:
  Dt_RECORD_LocalizationInfo();
  virtual ~Dt_RECORD_LocalizationInfo();

  Dt_RECORD_LocalizationInfo(const Dt_RECORD_LocalizationInfo& from);
  Dt_RECORD_LocalizationInfo(Dt_RECORD_LocalizationInfo&& from) noexcept
    : Dt_RECORD_LocalizationInfo() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_LocalizationInfo& operator=(const Dt_RECORD_LocalizationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_LocalizationInfo& operator=(Dt_RECORD_LocalizationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_LocalizationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_LocalizationInfo* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_LocalizationInfo*>(
               &_Dt_RECORD_LocalizationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Dt_RECORD_LocalizationInfo& a, Dt_RECORD_LocalizationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_LocalizationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_LocalizationInfo* New() const final {
    return CreateMaybeMessage<Dt_RECORD_LocalizationInfo>(nullptr);
  }

  Dt_RECORD_LocalizationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_LocalizationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_LocalizationInfo& from);
  void MergeFrom(const Dt_RECORD_LocalizationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_LocalizationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_LocalizationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationResultFieldNumber = 2,
    kTimeStampFieldNumber = 1,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kYawFieldNumber = 5,
    kPitchFieldNumber = 6,
    kRollFieldNumber = 7,
    kYawrateFieldNumber = 8,
    kALonFieldNumber = 9,
    kALatFieldNumber = 10,
    kVLatFieldNumber = 11,
    kVLonFieldNumber = 12,
  };
  // .socket_all.Dt_RECORD_LocalizationResult LocalizationResult = 2;
  bool has_localizationresult() const;
  private:
  bool _internal_has_localizationresult() const;
  public:
  void clear_localizationresult();
  const ::socket_all::Dt_RECORD_LocalizationResult& localizationresult() const;
  ::socket_all::Dt_RECORD_LocalizationResult* release_localizationresult();
  ::socket_all::Dt_RECORD_LocalizationResult* mutable_localizationresult();
  void set_allocated_localizationresult(::socket_all::Dt_RECORD_LocalizationResult* localizationresult);
  private:
  const ::socket_all::Dt_RECORD_LocalizationResult& _internal_localizationresult() const;
  ::socket_all::Dt_RECORD_LocalizationResult* _internal_mutable_localizationresult();
  public:

  // uint64 time_stamp = 1;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float Latitude = 3;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float Longitude = 4;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 6;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 7;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float yawrate = 8;
  void clear_yawrate();
  float yawrate() const;
  void set_yawrate(float value);
  private:
  float _internal_yawrate() const;
  void _internal_set_yawrate(float value);
  public:

  // float a_lon = 9;
  void clear_a_lon();
  float a_lon() const;
  void set_a_lon(float value);
  private:
  float _internal_a_lon() const;
  void _internal_set_a_lon(float value);
  public:

  // float a_lat = 10;
  void clear_a_lat();
  float a_lat() const;
  void set_a_lat(float value);
  private:
  float _internal_a_lat() const;
  void _internal_set_a_lat(float value);
  public:

  // float v_lat = 11;
  void clear_v_lat();
  float v_lat() const;
  void set_v_lat(float value);
  private:
  float _internal_v_lat() const;
  void _internal_set_v_lat(float value);
  public:

  // float v_lon = 12;
  void clear_v_lon();
  float v_lon() const;
  void set_v_lon(float value);
  private:
  float _internal_v_lon() const;
  void _internal_set_v_lon(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_LocalizationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::socket_all::Dt_RECORD_LocalizationResult* localizationresult_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  float latitude_;
  float longitude_;
  float yaw_;
  float pitch_;
  float roll_;
  float yawrate_;
  float a_lon_;
  float a_lat_;
  float v_lat_;
  float v_lon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_LocalizationResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_LocalizationResult) */ {
 public:
  Dt_RECORD_LocalizationResult();
  virtual ~Dt_RECORD_LocalizationResult();

  Dt_RECORD_LocalizationResult(const Dt_RECORD_LocalizationResult& from);
  Dt_RECORD_LocalizationResult(Dt_RECORD_LocalizationResult&& from) noexcept
    : Dt_RECORD_LocalizationResult() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_LocalizationResult& operator=(const Dt_RECORD_LocalizationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_LocalizationResult& operator=(Dt_RECORD_LocalizationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_LocalizationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_LocalizationResult* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_LocalizationResult*>(
               &_Dt_RECORD_LocalizationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Dt_RECORD_LocalizationResult& a, Dt_RECORD_LocalizationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_LocalizationResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_LocalizationResult* New() const final {
    return CreateMaybeMessage<Dt_RECORD_LocalizationResult>(nullptr);
  }

  Dt_RECORD_LocalizationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_LocalizationResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_LocalizationResult& from);
  void MergeFrom(const Dt_RECORD_LocalizationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_LocalizationResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_LocalizationResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kQxFieldNumber = 5,
    kQyFieldNumber = 6,
    kQzFieldNumber = 7,
    kQwFieldNumber = 8,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float qx = 5;
  void clear_qx();
  float qx() const;
  void set_qx(float value);
  private:
  float _internal_qx() const;
  void _internal_set_qx(float value);
  public:

  // float qy = 6;
  void clear_qy();
  float qy() const;
  void set_qy(float value);
  private:
  float _internal_qy() const;
  void _internal_set_qy(float value);
  public:

  // float qz = 7;
  void clear_qz();
  float qz() const;
  void set_qz(float value);
  private:
  float _internal_qz() const;
  void _internal_set_qz(float value);
  public:

  // float qw = 8;
  void clear_qw();
  float qw() const;
  void set_qw(float value);
  private:
  float _internal_qw() const;
  void _internal_set_qw(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_LocalizationResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  float x_;
  float y_;
  float z_;
  float qx_;
  float qy_;
  float qz_;
  float qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_TrajectoryPointsInfos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_TrajectoryPointsInfos) */ {
 public:
  Dt_RECORD_TrajectoryPointsInfos();
  virtual ~Dt_RECORD_TrajectoryPointsInfos();

  Dt_RECORD_TrajectoryPointsInfos(const Dt_RECORD_TrajectoryPointsInfos& from);
  Dt_RECORD_TrajectoryPointsInfos(Dt_RECORD_TrajectoryPointsInfos&& from) noexcept
    : Dt_RECORD_TrajectoryPointsInfos() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_TrajectoryPointsInfos& operator=(const Dt_RECORD_TrajectoryPointsInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_TrajectoryPointsInfos& operator=(Dt_RECORD_TrajectoryPointsInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_TrajectoryPointsInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_TrajectoryPointsInfos* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_TrajectoryPointsInfos*>(
               &_Dt_RECORD_TrajectoryPointsInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Dt_RECORD_TrajectoryPointsInfos& a, Dt_RECORD_TrajectoryPointsInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_TrajectoryPointsInfos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_TrajectoryPointsInfos* New() const final {
    return CreateMaybeMessage<Dt_RECORD_TrajectoryPointsInfos>(nullptr);
  }

  Dt_RECORD_TrajectoryPointsInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_TrajectoryPointsInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_TrajectoryPointsInfos& from);
  void MergeFrom(const Dt_RECORD_TrajectoryPointsInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_TrajectoryPointsInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_TrajectoryPointsInfos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointsFieldNumber = 4,
    kOriginYawFieldNumber = 1,
    kPointNumFieldNumber = 2,
    kArrayLengthDummy0FieldNumber = 3,
    kDecisionFieldNumber = 5,
    kHoldFieldNumber = 6,
    kDirectionFieldNumber = 7,
  };
  // repeated .socket_all.Dt_RECORD_TrajectoryPoints TrajectoryPoints = 4;
  int trajectorypoints_size() const;
  private:
  int _internal_trajectorypoints_size() const;
  public:
  void clear_trajectorypoints();
  ::socket_all::Dt_RECORD_TrajectoryPoints* mutable_trajectorypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrajectoryPoints >*
      mutable_trajectorypoints();
  private:
  const ::socket_all::Dt_RECORD_TrajectoryPoints& _internal_trajectorypoints(int index) const;
  ::socket_all::Dt_RECORD_TrajectoryPoints* _internal_add_trajectorypoints();
  public:
  const ::socket_all::Dt_RECORD_TrajectoryPoints& trajectorypoints(int index) const;
  ::socket_all::Dt_RECORD_TrajectoryPoints* add_trajectorypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrajectoryPoints >&
      trajectorypoints() const;

  // float origin_yaw = 1;
  void clear_origin_yaw();
  float origin_yaw() const;
  void set_origin_yaw(float value);
  private:
  float _internal_origin_yaw() const;
  void _internal_set_origin_yaw(float value);
  public:

  // uint32 point_num = 2;
  void clear_point_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_num() const;
  void set_point_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_num() const;
  void _internal_set_point_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Array_Length_Dummy_0 = 3;
  void clear_array_length_dummy_0();
  ::PROTOBUF_NAMESPACE_ID::uint32 array_length_dummy_0() const;
  void set_array_length_dummy_0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_array_length_dummy_0() const;
  void _internal_set_array_length_dummy_0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 decision = 5;
  void clear_decision();
  ::PROTOBUF_NAMESPACE_ID::uint32 decision() const;
  void set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decision() const;
  void _internal_set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool hold = 6;
  void clear_hold();
  bool hold() const;
  void set_hold(bool value);
  private:
  bool _internal_hold() const;
  void _internal_set_hold(bool value);
  public:

  // uint32 direction = 7;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_TrajectoryPointsInfos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrajectoryPoints > trajectorypoints_;
  float origin_yaw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 array_length_dummy_0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decision_;
  bool hold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_TrajectoryPoints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_TrajectoryPoints) */ {
 public:
  Dt_RECORD_TrajectoryPoints();
  virtual ~Dt_RECORD_TrajectoryPoints();

  Dt_RECORD_TrajectoryPoints(const Dt_RECORD_TrajectoryPoints& from);
  Dt_RECORD_TrajectoryPoints(Dt_RECORD_TrajectoryPoints&& from) noexcept
    : Dt_RECORD_TrajectoryPoints() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_TrajectoryPoints& operator=(const Dt_RECORD_TrajectoryPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_TrajectoryPoints& operator=(Dt_RECORD_TrajectoryPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_TrajectoryPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_TrajectoryPoints* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_TrajectoryPoints*>(
               &_Dt_RECORD_TrajectoryPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Dt_RECORD_TrajectoryPoints& a, Dt_RECORD_TrajectoryPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_TrajectoryPoints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_TrajectoryPoints* New() const final {
    return CreateMaybeMessage<Dt_RECORD_TrajectoryPoints>(nullptr);
  }

  Dt_RECORD_TrajectoryPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_TrajectoryPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_TrajectoryPoints& from);
  void MergeFrom(const Dt_RECORD_TrajectoryPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_TrajectoryPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_TrajectoryPoints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kXGFieldNumber = 3,
    kYGFieldNumber = 4,
    kTFieldNumber = 5,
    kLonFieldNumber = 6,
    kLatFieldNumber = 7,
    kThetaFieldNumber = 8,
    kVFieldNumber = 9,
    kAFieldNumber = 10,
    kKappaFieldNumber = 11,
    kSlopeFieldNumber = 12,
    kLaneNoFieldNumber = 13,
    kRoadNoFieldNumber = 14,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float x_g = 3;
  void clear_x_g();
  float x_g() const;
  void set_x_g(float value);
  private:
  float _internal_x_g() const;
  void _internal_set_x_g(float value);
  public:

  // float y_g = 4;
  void clear_y_g();
  float y_g() const;
  void set_y_g(float value);
  private:
  float _internal_y_g() const;
  void _internal_set_y_g(float value);
  public:

  // float t = 5;
  void clear_t();
  float t() const;
  void set_t(float value);
  private:
  float _internal_t() const;
  void _internal_set_t(float value);
  public:

  // float lon = 6;
  void clear_lon();
  float lon() const;
  void set_lon(float value);
  private:
  float _internal_lon() const;
  void _internal_set_lon(float value);
  public:

  // float lat = 7;
  void clear_lat();
  float lat() const;
  void set_lat(float value);
  private:
  float _internal_lat() const;
  void _internal_set_lat(float value);
  public:

  // float theta = 8;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // float v = 9;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // float a = 10;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // float kappa = 11;
  void clear_kappa();
  float kappa() const;
  void set_kappa(float value);
  private:
  float _internal_kappa() const;
  void _internal_set_kappa(float value);
  public:

  // float slope = 12;
  void clear_slope();
  float slope() const;
  void set_slope(float value);
  private:
  float _internal_slope() const;
  void _internal_set_slope(float value);
  public:

  // uint32 lane_no = 13;
  void clear_lane_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no() const;
  void set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_no() const;
  void _internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 road_no = 14;
  void clear_road_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_no() const;
  void set_road_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_no() const;
  void _internal_set_road_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_TrajectoryPoints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float x_g_;
  float y_g_;
  float t_;
  float lon_;
  float lat_;
  float theta_;
  float v_;
  float a_;
  float kappa_;
  float slope_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_AccInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_AccInfo) */ {
 public:
  Dt_RECORD_AccInfo();
  virtual ~Dt_RECORD_AccInfo();

  Dt_RECORD_AccInfo(const Dt_RECORD_AccInfo& from);
  Dt_RECORD_AccInfo(Dt_RECORD_AccInfo&& from) noexcept
    : Dt_RECORD_AccInfo() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_AccInfo& operator=(const Dt_RECORD_AccInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_AccInfo& operator=(Dt_RECORD_AccInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_AccInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_AccInfo* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_AccInfo*>(
               &_Dt_RECORD_AccInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Dt_RECORD_AccInfo& a, Dt_RECORD_AccInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_AccInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_AccInfo* New() const final {
    return CreateMaybeMessage<Dt_RECORD_AccInfo>(nullptr);
  }

  Dt_RECORD_AccInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_AccInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_AccInfo& from);
  void MergeFrom(const Dt_RECORD_AccInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_AccInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_AccInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kESP0X318TimeStampFieldNumber = 1,
    kESPVehSpdFieldNumber = 2,
    kYRS0X242TimeStampFieldNumber = 3,
    kYRSLgtAcceFieldNumber = 4,
    kYRSLatAcceFieldNumber = 5,
    kYRSYawRateFieldNumber = 6,
  };
  // uint32 ESP_0x318_time_stamp = 1;
  void clear_esp_0x318_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 esp_0x318_time_stamp() const;
  void set_esp_0x318_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_esp_0x318_time_stamp() const;
  void _internal_set_esp_0x318_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float ESP_VehSpd = 2;
  void clear_esp_vehspd();
  float esp_vehspd() const;
  void set_esp_vehspd(float value);
  private:
  float _internal_esp_vehspd() const;
  void _internal_set_esp_vehspd(float value);
  public:

  // uint32 YRS_0x242_time_stamp = 3;
  void clear_yrs_0x242_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 yrs_0x242_time_stamp() const;
  void set_yrs_0x242_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yrs_0x242_time_stamp() const;
  void _internal_set_yrs_0x242_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float YRS_LgtAcce = 4;
  void clear_yrs_lgtacce();
  float yrs_lgtacce() const;
  void set_yrs_lgtacce(float value);
  private:
  float _internal_yrs_lgtacce() const;
  void _internal_set_yrs_lgtacce(float value);
  public:

  // float YRS_LatAcce = 5;
  void clear_yrs_latacce();
  float yrs_latacce() const;
  void set_yrs_latacce(float value);
  private:
  float _internal_yrs_latacce() const;
  void _internal_set_yrs_latacce(float value);
  public:

  // float YRS_YawRate = 6;
  void clear_yrs_yawrate();
  float yrs_yawrate() const;
  void set_yrs_yawrate(float value);
  private:
  float _internal_yrs_yawrate() const;
  void _internal_set_yrs_yawrate(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_AccInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 esp_0x318_time_stamp_;
  float esp_vehspd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yrs_0x242_time_stamp_;
  float yrs_lgtacce_;
  float yrs_latacce_;
  float yrs_yawrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_EnvModelInfos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_EnvModelInfos) */ {
 public:
  Dt_RECORD_EnvModelInfos();
  virtual ~Dt_RECORD_EnvModelInfos();

  Dt_RECORD_EnvModelInfos(const Dt_RECORD_EnvModelInfos& from);
  Dt_RECORD_EnvModelInfos(Dt_RECORD_EnvModelInfos&& from) noexcept
    : Dt_RECORD_EnvModelInfos() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_EnvModelInfos& operator=(const Dt_RECORD_EnvModelInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_EnvModelInfos& operator=(Dt_RECORD_EnvModelInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_EnvModelInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_EnvModelInfos* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_EnvModelInfos*>(
               &_Dt_RECORD_EnvModelInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Dt_RECORD_EnvModelInfos& a, Dt_RECORD_EnvModelInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_EnvModelInfos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_EnvModelInfos* New() const final {
    return CreateMaybeMessage<Dt_RECORD_EnvModelInfos>(nullptr);
  }

  Dt_RECORD_EnvModelInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_EnvModelInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_EnvModelInfos& from);
  void MergeFrom(const Dt_RECORD_EnvModelInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_EnvModelInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_EnvModelInfos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 9,
    kTrafficSignsFieldNumber = 10,
    kTrafficMarkingsFieldNumber = 11,
    kTrafficLightsFieldNumber = 12,
    kObstacleGridMapFieldNumber = 13,
    kLanesFieldNumber = 8,
    kTimeStampFieldNumber = 2,
    kFrameIndexFieldNumber = 1,
    kObstacleNumFieldNumber = 3,
    kTrafficSignNumFieldNumber = 4,
    kTrafficMarkingNumFieldNumber = 5,
    kTrafficLightNumFieldNumber = 6,
    kResveredFieldNumber = 7,
  };
  // repeated .socket_all.Dt_RECORD_Obstacles Obstacles = 9;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::socket_all::Dt_RECORD_Obstacles* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Obstacles >*
      mutable_obstacles();
  private:
  const ::socket_all::Dt_RECORD_Obstacles& _internal_obstacles(int index) const;
  ::socket_all::Dt_RECORD_Obstacles* _internal_add_obstacles();
  public:
  const ::socket_all::Dt_RECORD_Obstacles& obstacles(int index) const;
  ::socket_all::Dt_RECORD_Obstacles* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Obstacles >&
      obstacles() const;

  // repeated .socket_all.Dt_RECORD_TrafficSigns TrafficSigns = 10;
  int trafficsigns_size() const;
  private:
  int _internal_trafficsigns_size() const;
  public:
  void clear_trafficsigns();
  ::socket_all::Dt_RECORD_TrafficSigns* mutable_trafficsigns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficSigns >*
      mutable_trafficsigns();
  private:
  const ::socket_all::Dt_RECORD_TrafficSigns& _internal_trafficsigns(int index) const;
  ::socket_all::Dt_RECORD_TrafficSigns* _internal_add_trafficsigns();
  public:
  const ::socket_all::Dt_RECORD_TrafficSigns& trafficsigns(int index) const;
  ::socket_all::Dt_RECORD_TrafficSigns* add_trafficsigns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficSigns >&
      trafficsigns() const;

  // repeated .socket_all.Dt_RECORD_TrafficMarkings TrafficMarkings = 11;
  int trafficmarkings_size() const;
  private:
  int _internal_trafficmarkings_size() const;
  public:
  void clear_trafficmarkings();
  ::socket_all::Dt_RECORD_TrafficMarkings* mutable_trafficmarkings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficMarkings >*
      mutable_trafficmarkings();
  private:
  const ::socket_all::Dt_RECORD_TrafficMarkings& _internal_trafficmarkings(int index) const;
  ::socket_all::Dt_RECORD_TrafficMarkings* _internal_add_trafficmarkings();
  public:
  const ::socket_all::Dt_RECORD_TrafficMarkings& trafficmarkings(int index) const;
  ::socket_all::Dt_RECORD_TrafficMarkings* add_trafficmarkings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficMarkings >&
      trafficmarkings() const;

  // repeated .socket_all.Dt_RECORD_TrafficLights TrafficLights = 12;
  int trafficlights_size() const;
  private:
  int _internal_trafficlights_size() const;
  public:
  void clear_trafficlights();
  ::socket_all::Dt_RECORD_TrafficLights* mutable_trafficlights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficLights >*
      mutable_trafficlights();
  private:
  const ::socket_all::Dt_RECORD_TrafficLights& _internal_trafficlights(int index) const;
  ::socket_all::Dt_RECORD_TrafficLights* _internal_add_trafficlights();
  public:
  const ::socket_all::Dt_RECORD_TrafficLights& trafficlights(int index) const;
  ::socket_all::Dt_RECORD_TrafficLights* add_trafficlights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficLights >&
      trafficlights() const;

  // repeated .socket_all.Dt_ARRAY_200_GridInfoX ObstacleGridMap = 13;
  int obstaclegridmap_size() const;
  private:
  int _internal_obstaclegridmap_size() const;
  public:
  void clear_obstaclegridmap();
  ::socket_all::Dt_ARRAY_200_GridInfoX* mutable_obstaclegridmap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_ARRAY_200_GridInfoX >*
      mutable_obstaclegridmap();
  private:
  const ::socket_all::Dt_ARRAY_200_GridInfoX& _internal_obstaclegridmap(int index) const;
  ::socket_all::Dt_ARRAY_200_GridInfoX* _internal_add_obstaclegridmap();
  public:
  const ::socket_all::Dt_ARRAY_200_GridInfoX& obstaclegridmap(int index) const;
  ::socket_all::Dt_ARRAY_200_GridInfoX* add_obstaclegridmap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_ARRAY_200_GridInfoX >&
      obstaclegridmap() const;

  // .socket_all.Dt_RECORD_Lanes Lanes = 8;
  bool has_lanes() const;
  private:
  bool _internal_has_lanes() const;
  public:
  void clear_lanes();
  const ::socket_all::Dt_RECORD_Lanes& lanes() const;
  ::socket_all::Dt_RECORD_Lanes* release_lanes();
  ::socket_all::Dt_RECORD_Lanes* mutable_lanes();
  void set_allocated_lanes(::socket_all::Dt_RECORD_Lanes* lanes);
  private:
  const ::socket_all::Dt_RECORD_Lanes& _internal_lanes() const;
  ::socket_all::Dt_RECORD_Lanes* _internal_mutable_lanes();
  public:

  // uint64 time_stamp = 2;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 frame_index = 1;
  void clear_frame_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_index() const;
  void set_frame_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_index() const;
  void _internal_set_frame_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 obstacle_num = 3;
  void clear_obstacle_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_num() const;
  void set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obstacle_num() const;
  void _internal_set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 traffic_sign_num = 4;
  void clear_traffic_sign_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 traffic_sign_num() const;
  void set_traffic_sign_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_traffic_sign_num() const;
  void _internal_set_traffic_sign_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 traffic_marking_num = 5;
  void clear_traffic_marking_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 traffic_marking_num() const;
  void set_traffic_marking_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_traffic_marking_num() const;
  void _internal_set_traffic_marking_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 traffic_light_num = 6;
  void clear_traffic_light_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 traffic_light_num() const;
  void set_traffic_light_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_traffic_light_num() const;
  void _internal_set_traffic_light_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 resvered = 7;
  void clear_resvered();
  ::PROTOBUF_NAMESPACE_ID::uint32 resvered() const;
  void set_resvered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resvered() const;
  void _internal_set_resvered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_EnvModelInfos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Obstacles > obstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficSigns > trafficsigns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficMarkings > trafficmarkings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficLights > trafficlights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_ARRAY_200_GridInfoX > obstaclegridmap_;
  ::socket_all::Dt_RECORD_Lanes* lanes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 traffic_sign_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 traffic_marking_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 traffic_light_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resvered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_Lanes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_Lanes) */ {
 public:
  Dt_RECORD_Lanes();
  virtual ~Dt_RECORD_Lanes();

  Dt_RECORD_Lanes(const Dt_RECORD_Lanes& from);
  Dt_RECORD_Lanes(Dt_RECORD_Lanes&& from) noexcept
    : Dt_RECORD_Lanes() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_Lanes& operator=(const Dt_RECORD_Lanes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_Lanes& operator=(Dt_RECORD_Lanes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_Lanes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_Lanes* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_Lanes*>(
               &_Dt_RECORD_Lanes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Dt_RECORD_Lanes& a, Dt_RECORD_Lanes& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_Lanes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_Lanes* New() const final {
    return CreateMaybeMessage<Dt_RECORD_Lanes>(nullptr);
  }

  Dt_RECORD_Lanes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_Lanes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_Lanes& from);
  void MergeFrom(const Dt_RECORD_Lanes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_Lanes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_Lanes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneLinesFieldNumber = 1,
    kWidthFieldNumber = 2,
    kLeftLaneDistanceFieldNumber = 3,
    kRightLaneDistanceFieldNumber = 4,
  };
  // repeated .socket_all.Dt_RECORD_LaneLines LaneLines = 1;
  int lanelines_size() const;
  private:
  int _internal_lanelines_size() const;
  public:
  void clear_lanelines();
  ::socket_all::Dt_RECORD_LaneLines* mutable_lanelines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneLines >*
      mutable_lanelines();
  private:
  const ::socket_all::Dt_RECORD_LaneLines& _internal_lanelines(int index) const;
  ::socket_all::Dt_RECORD_LaneLines* _internal_add_lanelines();
  public:
  const ::socket_all::Dt_RECORD_LaneLines& lanelines(int index) const;
  ::socket_all::Dt_RECORD_LaneLines* add_lanelines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneLines >&
      lanelines() const;

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float left_lane_distance = 3;
  void clear_left_lane_distance();
  float left_lane_distance() const;
  void set_left_lane_distance(float value);
  private:
  float _internal_left_lane_distance() const;
  void _internal_set_left_lane_distance(float value);
  public:

  // float right_lane_distance = 4;
  void clear_right_lane_distance();
  float right_lane_distance() const;
  void set_right_lane_distance(float value);
  private:
  float _internal_right_lane_distance() const;
  void _internal_set_right_lane_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_Lanes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneLines > lanelines_;
  float width_;
  float left_lane_distance_;
  float right_lane_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_LaneLines :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_LaneLines) */ {
 public:
  Dt_RECORD_LaneLines();
  virtual ~Dt_RECORD_LaneLines();

  Dt_RECORD_LaneLines(const Dt_RECORD_LaneLines& from);
  Dt_RECORD_LaneLines(Dt_RECORD_LaneLines&& from) noexcept
    : Dt_RECORD_LaneLines() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_LaneLines& operator=(const Dt_RECORD_LaneLines& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_LaneLines& operator=(Dt_RECORD_LaneLines&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_LaneLines& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_LaneLines* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_LaneLines*>(
               &_Dt_RECORD_LaneLines_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Dt_RECORD_LaneLines& a, Dt_RECORD_LaneLines& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_LaneLines* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_LaneLines* New() const final {
    return CreateMaybeMessage<Dt_RECORD_LaneLines>(nullptr);
  }

  Dt_RECORD_LaneLines* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_LaneLines>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_LaneLines& from);
  void MergeFrom(const Dt_RECORD_LaneLines& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_LaneLines* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_LaneLines";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 3,
    kColorFieldNumber = 4,
    kLineWidthFieldNumber = 5,
    kLengthFieldNumber = 6,
    kLaneLineLineC0FieldNumber = 7,
    kLaneLineLineC1FieldNumber = 8,
    kLaneLineLineC2FieldNumber = 9,
    kLaneLineLineC3FieldNumber = 10,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 confidence = 2;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color = 4;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float line_width = 5;
  void clear_line_width();
  float line_width() const;
  void set_line_width(float value);
  private:
  float _internal_line_width() const;
  void _internal_set_line_width(float value);
  public:

  // float length = 6;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float lane_line_lineC0 = 7;
  void clear_lane_line_linec0();
  float lane_line_linec0() const;
  void set_lane_line_linec0(float value);
  private:
  float _internal_lane_line_linec0() const;
  void _internal_set_lane_line_linec0(float value);
  public:

  // float lane_line_lineC1 = 8;
  void clear_lane_line_linec1();
  float lane_line_linec1() const;
  void set_lane_line_linec1(float value);
  private:
  float _internal_lane_line_linec1() const;
  void _internal_set_lane_line_linec1(float value);
  public:

  // float lane_line_lineC2 = 9;
  void clear_lane_line_linec2();
  float lane_line_linec2() const;
  void set_lane_line_linec2(float value);
  private:
  float _internal_lane_line_linec2() const;
  void _internal_set_lane_line_linec2(float value);
  public:

  // float lane_line_lineC3 = 10;
  void clear_lane_line_linec3();
  float lane_line_linec3() const;
  void set_lane_line_linec3(float value);
  private:
  float _internal_lane_line_linec3() const;
  void _internal_set_lane_line_linec3(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_LaneLines)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  float line_width_;
  float length_;
  float lane_line_linec0_;
  float lane_line_linec1_;
  float lane_line_linec2_;
  float lane_line_linec3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_Obstacles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_Obstacles) */ {
 public:
  Dt_RECORD_Obstacles();
  virtual ~Dt_RECORD_Obstacles();

  Dt_RECORD_Obstacles(const Dt_RECORD_Obstacles& from);
  Dt_RECORD_Obstacles(Dt_RECORD_Obstacles&& from) noexcept
    : Dt_RECORD_Obstacles() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_Obstacles& operator=(const Dt_RECORD_Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_Obstacles& operator=(Dt_RECORD_Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_Obstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_Obstacles* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_Obstacles*>(
               &_Dt_RECORD_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Dt_RECORD_Obstacles& a, Dt_RECORD_Obstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_Obstacles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_Obstacles* New() const final {
    return CreateMaybeMessage<Dt_RECORD_Obstacles>(nullptr);
  }

  Dt_RECORD_Obstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_Obstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_Obstacles& from);
  void MergeFrom(const Dt_RECORD_Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_Obstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_Obstacles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfidenceStateFieldNumber = 3,
    kStateFieldNumber = 4,
    kLaneNoFieldNumber = 5,
    kCIPVFlagFieldNumber = 6,
    kValidTimeFieldNumber = 7,
    kPosYFieldNumber = 8,
    kPosXFieldNumber = 9,
    kRelSpeedYFieldNumber = 10,
    kRelSpeedXFieldNumber = 11,
    kRelAccYFieldNumber = 12,
    kRelAccXFieldNumber = 13,
    kAbsSpeedYFieldNumber = 14,
    kAbsSpeedXFieldNumber = 15,
    kAbsAccYFieldNumber = 16,
    kAbsAccXFieldNumber = 17,
    kHeadingFieldNumber = 18,
    kLengthFieldNumber = 19,
    kWidthFieldNumber = 20,
    kHeightFieldNumber = 21,
    kImgXFieldNumber = 22,
    kImgYFieldNumber = 23,
    kImgWidthFieldNumber = 24,
    kImgHeightFieldNumber = 25,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 confidence_state = 3;
  void clear_confidence_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_state() const;
  void set_confidence_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence_state() const;
  void _internal_set_confidence_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lane_no = 5;
  void clear_lane_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no() const;
  void set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_no() const;
  void _internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CIPV_flag = 6;
  void clear_cipv_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 cipv_flag() const;
  void set_cipv_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cipv_flag() const;
  void _internal_set_cipv_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 valid_time = 7;
  void clear_valid_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_time() const;
  void set_valid_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_valid_time() const;
  void _internal_set_valid_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_y = 8;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_x = 9;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float rel_speed_y = 10;
  void clear_rel_speed_y();
  float rel_speed_y() const;
  void set_rel_speed_y(float value);
  private:
  float _internal_rel_speed_y() const;
  void _internal_set_rel_speed_y(float value);
  public:

  // float rel_speed_x = 11;
  void clear_rel_speed_x();
  float rel_speed_x() const;
  void set_rel_speed_x(float value);
  private:
  float _internal_rel_speed_x() const;
  void _internal_set_rel_speed_x(float value);
  public:

  // float rel_acc_y = 12;
  void clear_rel_acc_y();
  float rel_acc_y() const;
  void set_rel_acc_y(float value);
  private:
  float _internal_rel_acc_y() const;
  void _internal_set_rel_acc_y(float value);
  public:

  // float rel_acc_x = 13;
  void clear_rel_acc_x();
  float rel_acc_x() const;
  void set_rel_acc_x(float value);
  private:
  float _internal_rel_acc_x() const;
  void _internal_set_rel_acc_x(float value);
  public:

  // float abs_speed_y = 14;
  void clear_abs_speed_y();
  float abs_speed_y() const;
  void set_abs_speed_y(float value);
  private:
  float _internal_abs_speed_y() const;
  void _internal_set_abs_speed_y(float value);
  public:

  // float abs_speed_x = 15;
  void clear_abs_speed_x();
  float abs_speed_x() const;
  void set_abs_speed_x(float value);
  private:
  float _internal_abs_speed_x() const;
  void _internal_set_abs_speed_x(float value);
  public:

  // float abs_acc_y = 16;
  void clear_abs_acc_y();
  float abs_acc_y() const;
  void set_abs_acc_y(float value);
  private:
  float _internal_abs_acc_y() const;
  void _internal_set_abs_acc_y(float value);
  public:

  // float abs_acc_x = 17;
  void clear_abs_acc_x();
  float abs_acc_x() const;
  void set_abs_acc_x(float value);
  private:
  float _internal_abs_acc_x() const;
  void _internal_set_abs_acc_x(float value);
  public:

  // float heading = 18;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float length = 19;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 20;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 21;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // uint32 img_x = 22;
  void clear_img_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_x() const;
  void set_img_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_x() const;
  void _internal_set_img_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 img_y = 23;
  void clear_img_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_y() const;
  void set_img_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_y() const;
  void _internal_set_img_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 img_width = 24;
  void clear_img_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_width() const;
  void set_img_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_width() const;
  void _internal_set_img_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 img_height = 25;
  void clear_img_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_height() const;
  void set_img_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_height() const;
  void _internal_set_img_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_Obstacles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cipv_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_time_;
  float pos_y_;
  float pos_x_;
  float rel_speed_y_;
  float rel_speed_x_;
  float rel_acc_y_;
  float rel_acc_x_;
  float abs_speed_y_;
  float abs_speed_x_;
  float abs_acc_y_;
  float abs_acc_x_;
  float heading_;
  float length_;
  float width_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_TrafficSigns :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_TrafficSigns) */ {
 public:
  Dt_RECORD_TrafficSigns();
  virtual ~Dt_RECORD_TrafficSigns();

  Dt_RECORD_TrafficSigns(const Dt_RECORD_TrafficSigns& from);
  Dt_RECORD_TrafficSigns(Dt_RECORD_TrafficSigns&& from) noexcept
    : Dt_RECORD_TrafficSigns() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_TrafficSigns& operator=(const Dt_RECORD_TrafficSigns& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_TrafficSigns& operator=(Dt_RECORD_TrafficSigns&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_TrafficSigns& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_TrafficSigns* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_TrafficSigns*>(
               &_Dt_RECORD_TrafficSigns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Dt_RECORD_TrafficSigns& a, Dt_RECORD_TrafficSigns& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_TrafficSigns* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_TrafficSigns* New() const final {
    return CreateMaybeMessage<Dt_RECORD_TrafficSigns>(nullptr);
  }

  Dt_RECORD_TrafficSigns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_TrafficSigns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_TrafficSigns& from);
  void MergeFrom(const Dt_RECORD_TrafficSigns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_TrafficSigns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_TrafficSigns";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kPosYFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosZFieldNumber = 6,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 confidence = 3;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_x = 5;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_z = 6;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_TrafficSigns)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  float pos_y_;
  float pos_x_;
  float pos_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_TrafficMarkings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_TrafficMarkings) */ {
 public:
  Dt_RECORD_TrafficMarkings();
  virtual ~Dt_RECORD_TrafficMarkings();

  Dt_RECORD_TrafficMarkings(const Dt_RECORD_TrafficMarkings& from);
  Dt_RECORD_TrafficMarkings(Dt_RECORD_TrafficMarkings&& from) noexcept
    : Dt_RECORD_TrafficMarkings() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_TrafficMarkings& operator=(const Dt_RECORD_TrafficMarkings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_TrafficMarkings& operator=(Dt_RECORD_TrafficMarkings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_TrafficMarkings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_TrafficMarkings* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_TrafficMarkings*>(
               &_Dt_RECORD_TrafficMarkings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Dt_RECORD_TrafficMarkings& a, Dt_RECORD_TrafficMarkings& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_TrafficMarkings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_TrafficMarkings* New() const final {
    return CreateMaybeMessage<Dt_RECORD_TrafficMarkings>(nullptr);
  }

  Dt_RECORD_TrafficMarkings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_TrafficMarkings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_TrafficMarkings& from);
  void MergeFrom(const Dt_RECORD_TrafficMarkings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_TrafficMarkings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_TrafficMarkings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kLaneNoFieldNumber = 4,
    kPosYFieldNumber = 5,
    kPosXFieldNumber = 6,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 confidence = 3;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lane_no = 4;
  void clear_lane_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no() const;
  void set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_no() const;
  void _internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_y = 5;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_x = 6;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_TrafficMarkings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no_;
  float pos_y_;
  float pos_x_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_RECORD_TrafficLights :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_RECORD_TrafficLights) */ {
 public:
  Dt_RECORD_TrafficLights();
  virtual ~Dt_RECORD_TrafficLights();

  Dt_RECORD_TrafficLights(const Dt_RECORD_TrafficLights& from);
  Dt_RECORD_TrafficLights(Dt_RECORD_TrafficLights&& from) noexcept
    : Dt_RECORD_TrafficLights() {
    *this = ::std::move(from);
  }

  inline Dt_RECORD_TrafficLights& operator=(const Dt_RECORD_TrafficLights& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_RECORD_TrafficLights& operator=(Dt_RECORD_TrafficLights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_RECORD_TrafficLights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_RECORD_TrafficLights* internal_default_instance() {
    return reinterpret_cast<const Dt_RECORD_TrafficLights*>(
               &_Dt_RECORD_TrafficLights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Dt_RECORD_TrafficLights& a, Dt_RECORD_TrafficLights& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_RECORD_TrafficLights* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_RECORD_TrafficLights* New() const final {
    return CreateMaybeMessage<Dt_RECORD_TrafficLights>(nullptr);
  }

  Dt_RECORD_TrafficLights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_RECORD_TrafficLights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_RECORD_TrafficLights& from);
  void MergeFrom(const Dt_RECORD_TrafficLights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_RECORD_TrafficLights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_RECORD_TrafficLights";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kPosYFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosZFieldNumber = 6,
    kStateFieldNumber = 7,
    kLaneNoFieldNumber = 8,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 confidence = 3;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_x = 5;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_z = 6;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // uint32 state = 7;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lane_no = 8;
  void clear_lane_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no() const;
  void set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_no() const;
  void _internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:socket_all.Dt_RECORD_TrafficLights)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  float pos_y_;
  float pos_x_;
  float pos_z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// -------------------------------------------------------------------

class Dt_ARRAY_200_GridInfoX :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:socket_all.Dt_ARRAY_200_GridInfoX) */ {
 public:
  Dt_ARRAY_200_GridInfoX();
  virtual ~Dt_ARRAY_200_GridInfoX();

  Dt_ARRAY_200_GridInfoX(const Dt_ARRAY_200_GridInfoX& from);
  Dt_ARRAY_200_GridInfoX(Dt_ARRAY_200_GridInfoX&& from) noexcept
    : Dt_ARRAY_200_GridInfoX() {
    *this = ::std::move(from);
  }

  inline Dt_ARRAY_200_GridInfoX& operator=(const Dt_ARRAY_200_GridInfoX& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dt_ARRAY_200_GridInfoX& operator=(Dt_ARRAY_200_GridInfoX&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dt_ARRAY_200_GridInfoX& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dt_ARRAY_200_GridInfoX* internal_default_instance() {
    return reinterpret_cast<const Dt_ARRAY_200_GridInfoX*>(
               &_Dt_ARRAY_200_GridInfoX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Dt_ARRAY_200_GridInfoX& a, Dt_ARRAY_200_GridInfoX& b) {
    a.Swap(&b);
  }
  inline void Swap(Dt_ARRAY_200_GridInfoX* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dt_ARRAY_200_GridInfoX* New() const final {
    return CreateMaybeMessage<Dt_ARRAY_200_GridInfoX>(nullptr);
  }

  Dt_ARRAY_200_GridInfoX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dt_ARRAY_200_GridInfoX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dt_ARRAY_200_GridInfoX& from);
  void MergeFrom(const Dt_ARRAY_200_GridInfoX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dt_ARRAY_200_GridInfoX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "socket_all.Dt_ARRAY_200_GridInfoX";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_socket_5fall_2eproto);
    return ::descriptor_table_socket_5fall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridNodeFieldNumber = 1,
  };
  // repeated uint32 grid_node = 1;
  int grid_node_size() const;
  private:
  int _internal_grid_node_size() const;
  public:
  void clear_grid_node();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grid_node(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_grid_node() const;
  void _internal_add_grid_node(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_grid_node();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 grid_node(int index) const;
  void set_grid_node(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_grid_node(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      grid_node() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_grid_node();

  // @@protoc_insertion_point(class_scope:socket_all.Dt_ARRAY_200_GridInfoX)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > grid_node_;
  mutable std::atomic<int> _grid_node_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_socket_5fall_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogFile

// int32 frame_total_num = 1;
inline void LogFile::clear_frame_total_num() {
  frame_total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::_internal_frame_total_num() const {
  return frame_total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogFile::frame_total_num() const {
  // @@protoc_insertion_point(field_get:socket_all.LogFile.frame_total_num)
  return _internal_frame_total_num();
}
inline void LogFile::_internal_set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_total_num_ = value;
}
inline void LogFile::set_frame_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_total_num(value);
  // @@protoc_insertion_point(field_set:socket_all.LogFile.frame_total_num)
}

// repeated .socket_all.Frame frame = 2;
inline int LogFile::_internal_frame_size() const {
  return frame_.size();
}
inline int LogFile::frame_size() const {
  return _internal_frame_size();
}
inline void LogFile::clear_frame() {
  frame_.Clear();
}
inline ::socket_all::Frame* LogFile::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.LogFile.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Frame >*
LogFile::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.LogFile.frame)
  return &frame_;
}
inline const ::socket_all::Frame& LogFile::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::socket_all::Frame& LogFile::frame(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.LogFile.frame)
  return _internal_frame(index);
}
inline ::socket_all::Frame* LogFile::_internal_add_frame() {
  return frame_.Add();
}
inline ::socket_all::Frame* LogFile::add_frame() {
  // @@protoc_insertion_point(field_add:socket_all.LogFile.frame)
  return _internal_add_frame();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Frame >&
LogFile::frame() const {
  // @@protoc_insertion_point(field_list:socket_all.LogFile.frame)
  return frame_;
}

// -------------------------------------------------------------------

// Frame

// int32 frame_id = 1;
inline void Frame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::frame_id() const {
  // @@protoc_insertion_point(field_get:socket_all.Frame.frame_id)
  return _internal_frame_id();
}
inline void Frame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void Frame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Frame.frame_id)
}

// .socket_all.DecisionToPC decisionToPC = 2;
inline bool Frame::_internal_has_decisiontopc() const {
  return this != internal_default_instance() && decisiontopc_ != nullptr;
}
inline bool Frame::has_decisiontopc() const {
  return _internal_has_decisiontopc();
}
inline void Frame::clear_decisiontopc() {
  if (GetArenaNoVirtual() == nullptr && decisiontopc_ != nullptr) {
    delete decisiontopc_;
  }
  decisiontopc_ = nullptr;
}
inline const ::socket_all::DecisionToPC& Frame::_internal_decisiontopc() const {
  const ::socket_all::DecisionToPC* p = decisiontopc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::DecisionToPC*>(
      &::socket_all::_DecisionToPC_default_instance_);
}
inline const ::socket_all::DecisionToPC& Frame::decisiontopc() const {
  // @@protoc_insertion_point(field_get:socket_all.Frame.decisionToPC)
  return _internal_decisiontopc();
}
inline ::socket_all::DecisionToPC* Frame::release_decisiontopc() {
  // @@protoc_insertion_point(field_release:socket_all.Frame.decisionToPC)
  
  ::socket_all::DecisionToPC* temp = decisiontopc_;
  decisiontopc_ = nullptr;
  return temp;
}
inline ::socket_all::DecisionToPC* Frame::_internal_mutable_decisiontopc() {
  
  if (decisiontopc_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::DecisionToPC>(GetArenaNoVirtual());
    decisiontopc_ = p;
  }
  return decisiontopc_;
}
inline ::socket_all::DecisionToPC* Frame::mutable_decisiontopc() {
  // @@protoc_insertion_point(field_mutable:socket_all.Frame.decisionToPC)
  return _internal_mutable_decisiontopc();
}
inline void Frame::set_allocated_decisiontopc(::socket_all::DecisionToPC* decisiontopc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete decisiontopc_;
  }
  if (decisiontopc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decisiontopc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decisiontopc, submessage_arena);
    }
    
  } else {
    
  }
  decisiontopc_ = decisiontopc;
  // @@protoc_insertion_point(field_set_allocated:socket_all.Frame.decisionToPC)
}

// -------------------------------------------------------------------

// Dt_RECORD_HdmapInfo

// bool planpath = 1;
inline void Dt_RECORD_HdmapInfo::clear_planpath() {
  planpath_ = false;
}
inline bool Dt_RECORD_HdmapInfo::_internal_planpath() const {
  return planpath_;
}
inline bool Dt_RECORD_HdmapInfo::planpath() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.planpath)
  return _internal_planpath();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_planpath(bool value) {
  
  planpath_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_planpath(bool value) {
  _internal_set_planpath(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.planpath)
}

// float origin_x = 2;
inline void Dt_RECORD_HdmapInfo::clear_origin_x() {
  origin_x_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_origin_x() const {
  return origin_x_;
}
inline float Dt_RECORD_HdmapInfo::origin_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.origin_x)
  return _internal_origin_x();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_origin_x(float value) {
  
  origin_x_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_origin_x(float value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.origin_x)
}

// float origin_y = 3;
inline void Dt_RECORD_HdmapInfo::clear_origin_y() {
  origin_y_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_origin_y() const {
  return origin_y_;
}
inline float Dt_RECORD_HdmapInfo::origin_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.origin_y)
  return _internal_origin_y();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_origin_y(float value) {
  
  origin_y_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_origin_y(float value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.origin_y)
}

// float origin_z = 4;
inline void Dt_RECORD_HdmapInfo::clear_origin_z() {
  origin_z_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_origin_z() const {
  return origin_z_;
}
inline float Dt_RECORD_HdmapInfo::origin_z() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.origin_z)
  return _internal_origin_z();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_origin_z(float value) {
  
  origin_z_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_origin_z(float value) {
  _internal_set_origin_z(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.origin_z)
}

// float origin_yaw = 5;
inline void Dt_RECORD_HdmapInfo::clear_origin_yaw() {
  origin_yaw_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_origin_yaw() const {
  return origin_yaw_;
}
inline float Dt_RECORD_HdmapInfo::origin_yaw() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.origin_yaw)
  return _internal_origin_yaw();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_origin_yaw(float value) {
  
  origin_yaw_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_origin_yaw(float value) {
  _internal_set_origin_yaw(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.origin_yaw)
}

// float goal_x = 6;
inline void Dt_RECORD_HdmapInfo::clear_goal_x() {
  goal_x_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_goal_x() const {
  return goal_x_;
}
inline float Dt_RECORD_HdmapInfo::goal_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.goal_x)
  return _internal_goal_x();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_goal_x(float value) {
  
  goal_x_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_goal_x(float value) {
  _internal_set_goal_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.goal_x)
}

// float goal_y = 7;
inline void Dt_RECORD_HdmapInfo::clear_goal_y() {
  goal_y_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_goal_y() const {
  return goal_y_;
}
inline float Dt_RECORD_HdmapInfo::goal_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.goal_y)
  return _internal_goal_y();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_goal_y(float value) {
  
  goal_y_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_goal_y(float value) {
  _internal_set_goal_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.goal_y)
}

// float goal_z = 8;
inline void Dt_RECORD_HdmapInfo::clear_goal_z() {
  goal_z_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_goal_z() const {
  return goal_z_;
}
inline float Dt_RECORD_HdmapInfo::goal_z() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.goal_z)
  return _internal_goal_z();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_goal_z(float value) {
  
  goal_z_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_goal_z(float value) {
  _internal_set_goal_z(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.goal_z)
}

// float goal_yaw = 9;
inline void Dt_RECORD_HdmapInfo::clear_goal_yaw() {
  goal_yaw_ = 0;
}
inline float Dt_RECORD_HdmapInfo::_internal_goal_yaw() const {
  return goal_yaw_;
}
inline float Dt_RECORD_HdmapInfo::goal_yaw() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapInfo.goal_yaw)
  return _internal_goal_yaw();
}
inline void Dt_RECORD_HdmapInfo::_internal_set_goal_yaw(float value) {
  
  goal_yaw_ = value;
}
inline void Dt_RECORD_HdmapInfo::set_goal_yaw(float value) {
  _internal_set_goal_yaw(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapInfo.goal_yaw)
}

// -------------------------------------------------------------------

// Dt_RECORD_HdmapFrontPLane

// int32 plan_seg_count = 1;
inline void Dt_RECORD_HdmapFrontPLane::clear_plan_seg_count() {
  plan_seg_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dt_RECORD_HdmapFrontPLane::_internal_plan_seg_count() const {
  return plan_seg_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dt_RECORD_HdmapFrontPLane::plan_seg_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapFrontPLane.plan_seg_count)
  return _internal_plan_seg_count();
}
inline void Dt_RECORD_HdmapFrontPLane::_internal_set_plan_seg_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plan_seg_count_ = value;
}
inline void Dt_RECORD_HdmapFrontPLane::set_plan_seg_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plan_seg_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapFrontPLane.plan_seg_count)
}

// repeated .socket_all.Dt_RECORD_PlanSeg PlanSeg = 2;
inline int Dt_RECORD_HdmapFrontPLane::_internal_planseg_size() const {
  return planseg_.size();
}
inline int Dt_RECORD_HdmapFrontPLane::planseg_size() const {
  return _internal_planseg_size();
}
inline void Dt_RECORD_HdmapFrontPLane::clear_planseg() {
  planseg_.Clear();
}
inline ::socket_all::Dt_RECORD_PlanSeg* Dt_RECORD_HdmapFrontPLane::mutable_planseg(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdmapFrontPLane.PlanSeg)
  return planseg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >*
Dt_RECORD_HdmapFrontPLane::mutable_planseg() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdmapFrontPLane.PlanSeg)
  return &planseg_;
}
inline const ::socket_all::Dt_RECORD_PlanSeg& Dt_RECORD_HdmapFrontPLane::_internal_planseg(int index) const {
  return planseg_.Get(index);
}
inline const ::socket_all::Dt_RECORD_PlanSeg& Dt_RECORD_HdmapFrontPLane::planseg(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapFrontPLane.PlanSeg)
  return _internal_planseg(index);
}
inline ::socket_all::Dt_RECORD_PlanSeg* Dt_RECORD_HdmapFrontPLane::_internal_add_planseg() {
  return planseg_.Add();
}
inline ::socket_all::Dt_RECORD_PlanSeg* Dt_RECORD_HdmapFrontPLane::add_planseg() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdmapFrontPLane.PlanSeg)
  return _internal_add_planseg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >&
Dt_RECORD_HdmapFrontPLane::planseg() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdmapFrontPLane.PlanSeg)
  return planseg_;
}

// -------------------------------------------------------------------

// Dt_RECORD_PlanSeg

// int32 lane_count = 1;
inline void Dt_RECORD_PlanSeg::clear_lane_count() {
  lane_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dt_RECORD_PlanSeg::_internal_lane_count() const {
  return lane_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dt_RECORD_PlanSeg::lane_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_PlanSeg.lane_count)
  return _internal_lane_count();
}
inline void Dt_RECORD_PlanSeg::_internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_count_ = value;
}
inline void Dt_RECORD_PlanSeg::set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_PlanSeg.lane_count)
}

// repeated .socket_all.Dt_RECORD_HdMapLane Lane = 2;
inline int Dt_RECORD_PlanSeg::_internal_lane_size() const {
  return lane_.size();
}
inline int Dt_RECORD_PlanSeg::lane_size() const {
  return _internal_lane_size();
}
inline void Dt_RECORD_PlanSeg::clear_lane() {
  lane_.Clear();
}
inline ::socket_all::Dt_RECORD_HdMapLane* Dt_RECORD_PlanSeg::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_PlanSeg.Lane)
  return lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >*
Dt_RECORD_PlanSeg::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_PlanSeg.Lane)
  return &lane_;
}
inline const ::socket_all::Dt_RECORD_HdMapLane& Dt_RECORD_PlanSeg::_internal_lane(int index) const {
  return lane_.Get(index);
}
inline const ::socket_all::Dt_RECORD_HdMapLane& Dt_RECORD_PlanSeg::lane(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_PlanSeg.Lane)
  return _internal_lane(index);
}
inline ::socket_all::Dt_RECORD_HdMapLane* Dt_RECORD_PlanSeg::_internal_add_lane() {
  return lane_.Add();
}
inline ::socket_all::Dt_RECORD_HdMapLane* Dt_RECORD_PlanSeg::add_lane() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_PlanSeg.Lane)
  return _internal_add_lane();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >&
Dt_RECORD_PlanSeg::lane() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_PlanSeg.Lane)
  return lane_;
}

// -------------------------------------------------------------------

// Dt_RECORD_HdMapLane

// uint32 node_count = 1;
inline void Dt_RECORD_HdMapLane::clear_node_count() {
  node_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_node_count() const {
  return node_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::node_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.node_count)
  return _internal_node_count();
}
inline void Dt_RECORD_HdMapLane::_internal_set_node_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_count_ = value;
}
inline void Dt_RECORD_HdMapLane::set_node_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.node_count)
}

// repeated .socket_all.Dt_RECORD_LaneNode LaneNode = 2;
inline int Dt_RECORD_HdMapLane::_internal_lanenode_size() const {
  return lanenode_.size();
}
inline int Dt_RECORD_HdMapLane::lanenode_size() const {
  return _internal_lanenode_size();
}
inline void Dt_RECORD_HdMapLane::clear_lanenode() {
  lanenode_.Clear();
}
inline ::socket_all::Dt_RECORD_LaneNode* Dt_RECORD_HdMapLane::mutable_lanenode(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdMapLane.LaneNode)
  return lanenode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneNode >*
Dt_RECORD_HdMapLane::mutable_lanenode() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdMapLane.LaneNode)
  return &lanenode_;
}
inline const ::socket_all::Dt_RECORD_LaneNode& Dt_RECORD_HdMapLane::_internal_lanenode(int index) const {
  return lanenode_.Get(index);
}
inline const ::socket_all::Dt_RECORD_LaneNode& Dt_RECORD_HdMapLane::lanenode(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.LaneNode)
  return _internal_lanenode(index);
}
inline ::socket_all::Dt_RECORD_LaneNode* Dt_RECORD_HdMapLane::_internal_add_lanenode() {
  return lanenode_.Add();
}
inline ::socket_all::Dt_RECORD_LaneNode* Dt_RECORD_HdMapLane::add_lanenode() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdMapLane.LaneNode)
  return _internal_add_lanenode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneNode >&
Dt_RECORD_HdMapLane::lanenode() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdMapLane.LaneNode)
  return lanenode_;
}

// uint32 laneID = 3;
inline void Dt_RECORD_HdMapLane::clear_laneid() {
  laneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_laneid() const {
  return laneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::laneid() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.laneID)
  return _internal_laneid();
}
inline void Dt_RECORD_HdMapLane::_internal_set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  laneid_ = value;
}
inline void Dt_RECORD_HdMapLane::set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_laneid(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.laneID)
}

// bool change_lane_flag = 4;
inline void Dt_RECORD_HdMapLane::clear_change_lane_flag() {
  change_lane_flag_ = false;
}
inline bool Dt_RECORD_HdMapLane::_internal_change_lane_flag() const {
  return change_lane_flag_;
}
inline bool Dt_RECORD_HdMapLane::change_lane_flag() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.change_lane_flag)
  return _internal_change_lane_flag();
}
inline void Dt_RECORD_HdMapLane::_internal_set_change_lane_flag(bool value) {
  
  change_lane_flag_ = value;
}
inline void Dt_RECORD_HdMapLane::set_change_lane_flag(bool value) {
  _internal_set_change_lane_flag(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.change_lane_flag)
}

// int32 lane_NO = 5;
inline void Dt_RECORD_HdMapLane::clear_lane_no() {
  lane_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dt_RECORD_HdMapLane::_internal_lane_no() const {
  return lane_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dt_RECORD_HdMapLane::lane_no() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_NO)
  return _internal_lane_no();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_no_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_no(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_NO)
}

// uint32 lane_position = 6;
inline void Dt_RECORD_HdMapLane::clear_lane_position() {
  lane_position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lane_position() const {
  return lane_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lane_position() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_position)
  return _internal_lane_position();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_position_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_position(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_position)
}

// uint32 lane_type = 7;
inline void Dt_RECORD_HdMapLane::clear_lane_type() {
  lane_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lane_type() const {
  return lane_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lane_type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_type)
  return _internal_lane_type();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_type_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_type)
}

// float lane_width = 8;
inline void Dt_RECORD_HdMapLane::clear_lane_width() {
  lane_width_ = 0;
}
inline float Dt_RECORD_HdMapLane::_internal_lane_width() const {
  return lane_width_;
}
inline float Dt_RECORD_HdMapLane::lane_width() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_width)
  return _internal_lane_width();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_width(float value) {
  
  lane_width_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_width(float value) {
  _internal_set_lane_width(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_width)
}

// float lane_length = 9;
inline void Dt_RECORD_HdMapLane::clear_lane_length() {
  lane_length_ = 0;
}
inline float Dt_RECORD_HdMapLane::_internal_lane_length() const {
  return lane_length_;
}
inline float Dt_RECORD_HdMapLane::lane_length() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_length)
  return _internal_lane_length();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_length(float value) {
  
  lane_length_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_length(float value) {
  _internal_set_lane_length(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_length)
}

// uint32 lane_way_count = 10;
inline void Dt_RECORD_HdMapLane::clear_lane_way_count() {
  lane_way_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lane_way_count() const {
  return lane_way_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lane_way_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_way_count)
  return _internal_lane_way_count();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_way_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_way_count_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_way_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_way_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_way_count)
}

// uint32 turn_info = 11;
inline void Dt_RECORD_HdMapLane::clear_turn_info() {
  turn_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_turn_info() const {
  return turn_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::turn_info() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.turn_info)
  return _internal_turn_info();
}
inline void Dt_RECORD_HdMapLane::_internal_set_turn_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  turn_info_ = value;
}
inline void Dt_RECORD_HdMapLane::set_turn_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_turn_info(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.turn_info)
}

// uint32 lboundaryID = 12;
inline void Dt_RECORD_HdMapLane::clear_lboundaryid() {
  lboundaryid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lboundaryid() const {
  return lboundaryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lboundaryid() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lboundaryID)
  return _internal_lboundaryid();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lboundaryid_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lboundaryid(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lboundaryID)
}

// uint32 lboundary_type = 13;
inline void Dt_RECORD_HdMapLane::clear_lboundary_type() {
  lboundary_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lboundary_type() const {
  return lboundary_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lboundary_type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lboundary_type)
  return _internal_lboundary_type();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lboundary_type_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lboundary_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lboundary_type)
}

// uint32 lboundary_color = 14;
inline void Dt_RECORD_HdMapLane::clear_lboundary_color() {
  lboundary_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lboundary_color() const {
  return lboundary_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lboundary_color() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lboundary_color)
  return _internal_lboundary_color();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lboundary_color_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lboundary_color(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lboundary_color)
}

// uint32 rboundaryID = 15;
inline void Dt_RECORD_HdMapLane::clear_rboundaryid() {
  rboundaryid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_rboundaryid() const {
  return rboundaryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::rboundaryid() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.rboundaryID)
  return _internal_rboundaryid();
}
inline void Dt_RECORD_HdMapLane::_internal_set_rboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rboundaryid_ = value;
}
inline void Dt_RECORD_HdMapLane::set_rboundaryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rboundaryid(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.rboundaryID)
}

// uint32 rboundary_type = 16;
inline void Dt_RECORD_HdMapLane::clear_rboundary_type() {
  rboundary_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_rboundary_type() const {
  return rboundary_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::rboundary_type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.rboundary_type)
  return _internal_rboundary_type();
}
inline void Dt_RECORD_HdMapLane::_internal_set_rboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rboundary_type_ = value;
}
inline void Dt_RECORD_HdMapLane::set_rboundary_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rboundary_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.rboundary_type)
}

// uint32 rboundary_color = 17;
inline void Dt_RECORD_HdMapLane::clear_rboundary_color() {
  rboundary_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_rboundary_color() const {
  return rboundary_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::rboundary_color() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.rboundary_color)
  return _internal_rboundary_color();
}
inline void Dt_RECORD_HdMapLane::_internal_set_rboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rboundary_color_ = value;
}
inline void Dt_RECORD_HdMapLane::set_rboundary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rboundary_color(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.rboundary_color)
}

// uint32 road_ID = 18;
inline void Dt_RECORD_HdMapLane::clear_road_id() {
  road_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_road_id() const {
  return road_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::road_id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.road_ID)
  return _internal_road_id();
}
inline void Dt_RECORD_HdMapLane::_internal_set_road_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_id_ = value;
}
inline void Dt_RECORD_HdMapLane::set_road_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.road_ID)
}

// uint32 road_type = 19;
inline void Dt_RECORD_HdMapLane::clear_road_type() {
  road_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_road_type() const {
  return road_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::road_type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.road_type)
  return _internal_road_type();
}
inline void Dt_RECORD_HdMapLane::_internal_set_road_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_type_ = value;
}
inline void Dt_RECORD_HdMapLane::set_road_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.road_type)
}

// uint32 road_position = 20;
inline void Dt_RECORD_HdMapLane::clear_road_position() {
  road_position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_road_position() const {
  return road_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::road_position() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.road_position)
  return _internal_road_position();
}
inline void Dt_RECORD_HdMapLane::_internal_set_road_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_position_ = value;
}
inline void Dt_RECORD_HdMapLane::set_road_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_position(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.road_position)
}

// uint32 road_direction = 21;
inline void Dt_RECORD_HdMapLane::clear_road_direction() {
  road_direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_road_direction() const {
  return road_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::road_direction() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.road_direction)
  return _internal_road_direction();
}
inline void Dt_RECORD_HdMapLane::_internal_set_road_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_direction_ = value;
}
inline void Dt_RECORD_HdMapLane::set_road_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_direction(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.road_direction)
}

// float road_length = 22;
inline void Dt_RECORD_HdMapLane::clear_road_length() {
  road_length_ = 0;
}
inline float Dt_RECORD_HdMapLane::_internal_road_length() const {
  return road_length_;
}
inline float Dt_RECORD_HdMapLane::road_length() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.road_length)
  return _internal_road_length();
}
inline void Dt_RECORD_HdMapLane::_internal_set_road_length(float value) {
  
  road_length_ = value;
}
inline void Dt_RECORD_HdMapLane::set_road_length(float value) {
  _internal_set_road_length(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.road_length)
}

// float road_width = 23;
inline void Dt_RECORD_HdMapLane::clear_road_width() {
  road_width_ = 0;
}
inline float Dt_RECORD_HdMapLane::_internal_road_width() const {
  return road_width_;
}
inline float Dt_RECORD_HdMapLane::road_width() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.road_width)
  return _internal_road_width();
}
inline void Dt_RECORD_HdMapLane::_internal_set_road_width(float value) {
  
  road_width_ = value;
}
inline void Dt_RECORD_HdMapLane::set_road_width(float value) {
  _internal_set_road_width(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.road_width)
}

// uint32 lane_count = 24;
inline void Dt_RECORD_HdMapLane::clear_lane_count() {
  lane_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_lane_count() const {
  return lane_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::lane_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.lane_count)
  return _internal_lane_count();
}
inline void Dt_RECORD_HdMapLane::_internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_count_ = value;
}
inline void Dt_RECORD_HdMapLane::set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.lane_count)
}

// float speed_limit = 25;
inline void Dt_RECORD_HdMapLane::clear_speed_limit() {
  speed_limit_ = 0;
}
inline float Dt_RECORD_HdMapLane::_internal_speed_limit() const {
  return speed_limit_;
}
inline float Dt_RECORD_HdMapLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.speed_limit)
  return _internal_speed_limit();
}
inline void Dt_RECORD_HdMapLane::_internal_set_speed_limit(float value) {
  
  speed_limit_ = value;
}
inline void Dt_RECORD_HdMapLane::set_speed_limit(float value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.speed_limit)
}

// uint32 POI_num = 26;
inline void Dt_RECORD_HdMapLane::clear_poi_num() {
  poi_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_poi_num() const {
  return poi_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::poi_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.POI_num)
  return _internal_poi_num();
}
inline void Dt_RECORD_HdMapLane::_internal_set_poi_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  poi_num_ = value;
}
inline void Dt_RECORD_HdMapLane::set_poi_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_poi_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.POI_num)
}

// uint32 obstacle_num = 27;
inline void Dt_RECORD_HdMapLane::clear_obstacle_num() {
  obstacle_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_obstacle_num() const {
  return obstacle_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::obstacle_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.obstacle_num)
  return _internal_obstacle_num();
}
inline void Dt_RECORD_HdMapLane::_internal_set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  obstacle_num_ = value;
}
inline void Dt_RECORD_HdMapLane::set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obstacle_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.obstacle_num)
}

// uint32 mark_num = 28;
inline void Dt_RECORD_HdMapLane::clear_mark_num() {
  mark_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_mark_num() const {
  return mark_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::mark_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.mark_num)
  return _internal_mark_num();
}
inline void Dt_RECORD_HdMapLane::_internal_set_mark_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mark_num_ = value;
}
inline void Dt_RECORD_HdMapLane::set_mark_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mark_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.mark_num)
}

// uint32 arrow_num = 29;
inline void Dt_RECORD_HdMapLane::clear_arrow_num() {
  arrow_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_arrow_num() const {
  return arrow_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::arrow_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.arrow_num)
  return _internal_arrow_num();
}
inline void Dt_RECORD_HdMapLane::_internal_set_arrow_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  arrow_num_ = value;
}
inline void Dt_RECORD_HdMapLane::set_arrow_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_arrow_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.arrow_num)
}

// uint32 crosswalk_num = 30;
inline void Dt_RECORD_HdMapLane::clear_crosswalk_num() {
  crosswalk_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_crosswalk_num() const {
  return crosswalk_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::crosswalk_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.crosswalk_num)
  return _internal_crosswalk_num();
}
inline void Dt_RECORD_HdMapLane::_internal_set_crosswalk_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crosswalk_num_ = value;
}
inline void Dt_RECORD_HdMapLane::set_crosswalk_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crosswalk_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.crosswalk_num)
}

// uint32 HGNode_num = 31;
inline void Dt_RECORD_HdMapLane::clear_hgnode_num() {
  hgnode_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_hgnode_num() const {
  return hgnode_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::hgnode_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.HGNode_num)
  return _internal_hgnode_num();
}
inline void Dt_RECORD_HdMapLane::_internal_set_hgnode_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hgnode_num_ = value;
}
inline void Dt_RECORD_HdMapLane::set_hgnode_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hgnode_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.HGNode_num)
}

// repeated .socket_all.Dt_RECORD_PoiObstacle POI = 32;
inline int Dt_RECORD_HdMapLane::_internal_poi_size() const {
  return poi_.size();
}
inline int Dt_RECORD_HdMapLane::poi_size() const {
  return _internal_poi_size();
}
inline void Dt_RECORD_HdMapLane::clear_poi() {
  poi_.Clear();
}
inline ::socket_all::Dt_RECORD_PoiObstacle* Dt_RECORD_HdMapLane::mutable_poi(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdMapLane.POI)
  return poi_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >*
Dt_RECORD_HdMapLane::mutable_poi() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdMapLane.POI)
  return &poi_;
}
inline const ::socket_all::Dt_RECORD_PoiObstacle& Dt_RECORD_HdMapLane::_internal_poi(int index) const {
  return poi_.Get(index);
}
inline const ::socket_all::Dt_RECORD_PoiObstacle& Dt_RECORD_HdMapLane::poi(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.POI)
  return _internal_poi(index);
}
inline ::socket_all::Dt_RECORD_PoiObstacle* Dt_RECORD_HdMapLane::_internal_add_poi() {
  return poi_.Add();
}
inline ::socket_all::Dt_RECORD_PoiObstacle* Dt_RECORD_HdMapLane::add_poi() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdMapLane.POI)
  return _internal_add_poi();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >&
Dt_RECORD_HdMapLane::poi() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdMapLane.POI)
  return poi_;
}

// repeated .socket_all.Dt_RECORD_PoiObstacle Obstacle = 33;
inline int Dt_RECORD_HdMapLane::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int Dt_RECORD_HdMapLane::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void Dt_RECORD_HdMapLane::clear_obstacle() {
  obstacle_.Clear();
}
inline ::socket_all::Dt_RECORD_PoiObstacle* Dt_RECORD_HdMapLane::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdMapLane.Obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >*
Dt_RECORD_HdMapLane::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdMapLane.Obstacle)
  return &obstacle_;
}
inline const ::socket_all::Dt_RECORD_PoiObstacle& Dt_RECORD_HdMapLane::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::socket_all::Dt_RECORD_PoiObstacle& Dt_RECORD_HdMapLane::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.Obstacle)
  return _internal_obstacle(index);
}
inline ::socket_all::Dt_RECORD_PoiObstacle* Dt_RECORD_HdMapLane::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::socket_all::Dt_RECORD_PoiObstacle* Dt_RECORD_HdMapLane::add_obstacle() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdMapLane.Obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PoiObstacle >&
Dt_RECORD_HdMapLane::obstacle() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdMapLane.Obstacle)
  return obstacle_;
}

// repeated .socket_all.Dt_RECORD_MarkArrow Mark = 34;
inline int Dt_RECORD_HdMapLane::_internal_mark_size() const {
  return mark_.size();
}
inline int Dt_RECORD_HdMapLane::mark_size() const {
  return _internal_mark_size();
}
inline void Dt_RECORD_HdMapLane::clear_mark() {
  mark_.Clear();
}
inline ::socket_all::Dt_RECORD_MarkArrow* Dt_RECORD_HdMapLane::mutable_mark(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdMapLane.Mark)
  return mark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >*
Dt_RECORD_HdMapLane::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdMapLane.Mark)
  return &mark_;
}
inline const ::socket_all::Dt_RECORD_MarkArrow& Dt_RECORD_HdMapLane::_internal_mark(int index) const {
  return mark_.Get(index);
}
inline const ::socket_all::Dt_RECORD_MarkArrow& Dt_RECORD_HdMapLane::mark(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.Mark)
  return _internal_mark(index);
}
inline ::socket_all::Dt_RECORD_MarkArrow* Dt_RECORD_HdMapLane::_internal_add_mark() {
  return mark_.Add();
}
inline ::socket_all::Dt_RECORD_MarkArrow* Dt_RECORD_HdMapLane::add_mark() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdMapLane.Mark)
  return _internal_add_mark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >&
Dt_RECORD_HdMapLane::mark() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdMapLane.Mark)
  return mark_;
}

// repeated .socket_all.Dt_RECORD_MarkArrow Arrow = 35;
inline int Dt_RECORD_HdMapLane::_internal_arrow_size() const {
  return arrow_.size();
}
inline int Dt_RECORD_HdMapLane::arrow_size() const {
  return _internal_arrow_size();
}
inline void Dt_RECORD_HdMapLane::clear_arrow() {
  arrow_.Clear();
}
inline ::socket_all::Dt_RECORD_MarkArrow* Dt_RECORD_HdMapLane::mutable_arrow(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdMapLane.Arrow)
  return arrow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >*
Dt_RECORD_HdMapLane::mutable_arrow() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdMapLane.Arrow)
  return &arrow_;
}
inline const ::socket_all::Dt_RECORD_MarkArrow& Dt_RECORD_HdMapLane::_internal_arrow(int index) const {
  return arrow_.Get(index);
}
inline const ::socket_all::Dt_RECORD_MarkArrow& Dt_RECORD_HdMapLane::arrow(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.Arrow)
  return _internal_arrow(index);
}
inline ::socket_all::Dt_RECORD_MarkArrow* Dt_RECORD_HdMapLane::_internal_add_arrow() {
  return arrow_.Add();
}
inline ::socket_all::Dt_RECORD_MarkArrow* Dt_RECORD_HdMapLane::add_arrow() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdMapLane.Arrow)
  return _internal_add_arrow();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_MarkArrow >&
Dt_RECORD_HdMapLane::arrow() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdMapLane.Arrow)
  return arrow_;
}

// repeated .socket_all.Dt_RECORD_Crosswalk Crosswalk = 36;
inline int Dt_RECORD_HdMapLane::_internal_crosswalk_size() const {
  return crosswalk_.size();
}
inline int Dt_RECORD_HdMapLane::crosswalk_size() const {
  return _internal_crosswalk_size();
}
inline void Dt_RECORD_HdMapLane::clear_crosswalk() {
  crosswalk_.Clear();
}
inline ::socket_all::Dt_RECORD_Crosswalk* Dt_RECORD_HdMapLane::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdMapLane.Crosswalk)
  return crosswalk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Crosswalk >*
Dt_RECORD_HdMapLane::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdMapLane.Crosswalk)
  return &crosswalk_;
}
inline const ::socket_all::Dt_RECORD_Crosswalk& Dt_RECORD_HdMapLane::_internal_crosswalk(int index) const {
  return crosswalk_.Get(index);
}
inline const ::socket_all::Dt_RECORD_Crosswalk& Dt_RECORD_HdMapLane::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.Crosswalk)
  return _internal_crosswalk(index);
}
inline ::socket_all::Dt_RECORD_Crosswalk* Dt_RECORD_HdMapLane::_internal_add_crosswalk() {
  return crosswalk_.Add();
}
inline ::socket_all::Dt_RECORD_Crosswalk* Dt_RECORD_HdMapLane::add_crosswalk() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdMapLane.Crosswalk)
  return _internal_add_crosswalk();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Crosswalk >&
Dt_RECORD_HdMapLane::crosswalk() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdMapLane.Crosswalk)
  return crosswalk_;
}

// uint32 hgnodeID = 37;
inline void Dt_RECORD_HdMapLane::clear_hgnodeid() {
  hgnodeid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::_internal_hgnodeid() const {
  return hgnodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdMapLane::hgnodeid() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.hgnodeID)
  return _internal_hgnodeid();
}
inline void Dt_RECORD_HdMapLane::_internal_set_hgnodeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hgnodeid_ = value;
}
inline void Dt_RECORD_HdMapLane::set_hgnodeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hgnodeid(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.hgnodeID)
}

// float hgnode_distance = 38;
inline void Dt_RECORD_HdMapLane::clear_hgnode_distance() {
  hgnode_distance_ = 0;
}
inline float Dt_RECORD_HdMapLane::_internal_hgnode_distance() const {
  return hgnode_distance_;
}
inline float Dt_RECORD_HdMapLane::hgnode_distance() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdMapLane.hgnode_distance)
  return _internal_hgnode_distance();
}
inline void Dt_RECORD_HdMapLane::_internal_set_hgnode_distance(float value) {
  
  hgnode_distance_ = value;
}
inline void Dt_RECORD_HdMapLane::set_hgnode_distance(float value) {
  _internal_set_hgnode_distance(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdMapLane.hgnode_distance)
}

// -------------------------------------------------------------------

// Dt_RECORD_LaneNode

// float hdmap_x = 1;
inline void Dt_RECORD_LaneNode::clear_hdmap_x() {
  hdmap_x_ = 0;
}
inline float Dt_RECORD_LaneNode::_internal_hdmap_x() const {
  return hdmap_x_;
}
inline float Dt_RECORD_LaneNode::hdmap_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneNode.hdmap_x)
  return _internal_hdmap_x();
}
inline void Dt_RECORD_LaneNode::_internal_set_hdmap_x(float value) {
  
  hdmap_x_ = value;
}
inline void Dt_RECORD_LaneNode::set_hdmap_x(float value) {
  _internal_set_hdmap_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneNode.hdmap_x)
}

// float hdmap_y = 2;
inline void Dt_RECORD_LaneNode::clear_hdmap_y() {
  hdmap_y_ = 0;
}
inline float Dt_RECORD_LaneNode::_internal_hdmap_y() const {
  return hdmap_y_;
}
inline float Dt_RECORD_LaneNode::hdmap_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneNode.hdmap_y)
  return _internal_hdmap_y();
}
inline void Dt_RECORD_LaneNode::_internal_set_hdmap_y(float value) {
  
  hdmap_y_ = value;
}
inline void Dt_RECORD_LaneNode::set_hdmap_y(float value) {
  _internal_set_hdmap_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneNode.hdmap_y)
}

// float hdmap_z = 3;
inline void Dt_RECORD_LaneNode::clear_hdmap_z() {
  hdmap_z_ = 0;
}
inline float Dt_RECORD_LaneNode::_internal_hdmap_z() const {
  return hdmap_z_;
}
inline float Dt_RECORD_LaneNode::hdmap_z() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneNode.hdmap_z)
  return _internal_hdmap_z();
}
inline void Dt_RECORD_LaneNode::_internal_set_hdmap_z(float value) {
  
  hdmap_z_ = value;
}
inline void Dt_RECORD_LaneNode::set_hdmap_z(float value) {
  _internal_set_hdmap_z(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneNode.hdmap_z)
}

// float heading = 4;
inline void Dt_RECORD_LaneNode::clear_heading() {
  heading_ = 0;
}
inline float Dt_RECORD_LaneNode::_internal_heading() const {
  return heading_;
}
inline float Dt_RECORD_LaneNode::heading() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneNode.heading)
  return _internal_heading();
}
inline void Dt_RECORD_LaneNode::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void Dt_RECORD_LaneNode::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneNode.heading)
}

// float curvature = 5;
inline void Dt_RECORD_LaneNode::clear_curvature() {
  curvature_ = 0;
}
inline float Dt_RECORD_LaneNode::_internal_curvature() const {
  return curvature_;
}
inline float Dt_RECORD_LaneNode::curvature() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneNode.curvature)
  return _internal_curvature();
}
inline void Dt_RECORD_LaneNode::_internal_set_curvature(float value) {
  
  curvature_ = value;
}
inline void Dt_RECORD_LaneNode::set_curvature(float value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneNode.curvature)
}

// float slopev = 6;
inline void Dt_RECORD_LaneNode::clear_slopev() {
  slopev_ = 0;
}
inline float Dt_RECORD_LaneNode::_internal_slopev() const {
  return slopev_;
}
inline float Dt_RECORD_LaneNode::slopev() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneNode.slopev)
  return _internal_slopev();
}
inline void Dt_RECORD_LaneNode::_internal_set_slopev(float value) {
  
  slopev_ = value;
}
inline void Dt_RECORD_LaneNode::set_slopev(float value) {
  _internal_set_slopev(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneNode.slopev)
}

// -------------------------------------------------------------------

// Dt_RECORD_PoiObstacle

// uint32 ID = 1;
inline void Dt_RECORD_PoiObstacle::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_PoiObstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_PoiObstacle::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_PoiObstacle.ID)
  return _internal_id();
}
inline void Dt_RECORD_PoiObstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_PoiObstacle::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_PoiObstacle.ID)
}

// uint32 type = 2;
inline void Dt_RECORD_PoiObstacle::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_PoiObstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_PoiObstacle::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_PoiObstacle.type)
  return _internal_type();
}
inline void Dt_RECORD_PoiObstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_PoiObstacle::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_PoiObstacle.type)
}

// float distance = 3;
inline void Dt_RECORD_PoiObstacle::clear_distance() {
  distance_ = 0;
}
inline float Dt_RECORD_PoiObstacle::_internal_distance() const {
  return distance_;
}
inline float Dt_RECORD_PoiObstacle::distance() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_PoiObstacle.distance)
  return _internal_distance();
}
inline void Dt_RECORD_PoiObstacle::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void Dt_RECORD_PoiObstacle::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_PoiObstacle.distance)
}

// -------------------------------------------------------------------

// Dt_RECORD_MarkArrow

// uint32 ID = 1;
inline void Dt_RECORD_MarkArrow::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_MarkArrow::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_MarkArrow::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_MarkArrow.ID)
  return _internal_id();
}
inline void Dt_RECORD_MarkArrow::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_MarkArrow::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_MarkArrow.ID)
}

// uint32 type = 2;
inline void Dt_RECORD_MarkArrow::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_MarkArrow::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_MarkArrow::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_MarkArrow.type)
  return _internal_type();
}
inline void Dt_RECORD_MarkArrow::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_MarkArrow::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_MarkArrow.type)
}

// uint32 color = 3;
inline void Dt_RECORD_MarkArrow::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_MarkArrow::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_MarkArrow::color() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_MarkArrow.color)
  return _internal_color();
}
inline void Dt_RECORD_MarkArrow::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void Dt_RECORD_MarkArrow::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_MarkArrow.color)
}

// float distance = 4;
inline void Dt_RECORD_MarkArrow::clear_distance() {
  distance_ = 0;
}
inline float Dt_RECORD_MarkArrow::_internal_distance() const {
  return distance_;
}
inline float Dt_RECORD_MarkArrow::distance() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_MarkArrow.distance)
  return _internal_distance();
}
inline void Dt_RECORD_MarkArrow::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void Dt_RECORD_MarkArrow::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_MarkArrow.distance)
}

// -------------------------------------------------------------------

// Dt_RECORD_HdmapLocalLane

// uint32 lane_count = 1;
inline void Dt_RECORD_HdmapLocalLane::clear_lane_count() {
  lane_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdmapLocalLane::_internal_lane_count() const {
  return lane_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdmapLocalLane::lane_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapLocalLane.lane_count)
  return _internal_lane_count();
}
inline void Dt_RECORD_HdmapLocalLane::_internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_count_ = value;
}
inline void Dt_RECORD_HdmapLocalLane::set_lane_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapLocalLane.lane_count)
}

// repeated .socket_all.Dt_RECORD_HdMapLane LocalLane = 2;
inline int Dt_RECORD_HdmapLocalLane::_internal_locallane_size() const {
  return locallane_.size();
}
inline int Dt_RECORD_HdmapLocalLane::locallane_size() const {
  return _internal_locallane_size();
}
inline void Dt_RECORD_HdmapLocalLane::clear_locallane() {
  locallane_.Clear();
}
inline ::socket_all::Dt_RECORD_HdMapLane* Dt_RECORD_HdmapLocalLane::mutable_locallane(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdmapLocalLane.LocalLane)
  return locallane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >*
Dt_RECORD_HdmapLocalLane::mutable_locallane() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdmapLocalLane.LocalLane)
  return &locallane_;
}
inline const ::socket_all::Dt_RECORD_HdMapLane& Dt_RECORD_HdmapLocalLane::_internal_locallane(int index) const {
  return locallane_.Get(index);
}
inline const ::socket_all::Dt_RECORD_HdMapLane& Dt_RECORD_HdmapLocalLane::locallane(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapLocalLane.LocalLane)
  return _internal_locallane(index);
}
inline ::socket_all::Dt_RECORD_HdMapLane* Dt_RECORD_HdmapLocalLane::_internal_add_locallane() {
  return locallane_.Add();
}
inline ::socket_all::Dt_RECORD_HdMapLane* Dt_RECORD_HdmapLocalLane::add_locallane() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdmapLocalLane.LocalLane)
  return _internal_add_locallane();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_HdMapLane >&
Dt_RECORD_HdmapLocalLane::locallane() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdmapLocalLane.LocalLane)
  return locallane_;
}

// uint32 next_seg_count = 3;
inline void Dt_RECORD_HdmapLocalLane::clear_next_seg_count() {
  next_seg_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdmapLocalLane::_internal_next_seg_count() const {
  return next_seg_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_HdmapLocalLane::next_seg_count() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapLocalLane.next_seg_count)
  return _internal_next_seg_count();
}
inline void Dt_RECORD_HdmapLocalLane::_internal_set_next_seg_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_seg_count_ = value;
}
inline void Dt_RECORD_HdmapLocalLane::set_next_seg_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_seg_count(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_HdmapLocalLane.next_seg_count)
}

// repeated .socket_all.Dt_RECORD_PlanSeg NextSeg = 4;
inline int Dt_RECORD_HdmapLocalLane::_internal_nextseg_size() const {
  return nextseg_.size();
}
inline int Dt_RECORD_HdmapLocalLane::nextseg_size() const {
  return _internal_nextseg_size();
}
inline void Dt_RECORD_HdmapLocalLane::clear_nextseg() {
  nextseg_.Clear();
}
inline ::socket_all::Dt_RECORD_PlanSeg* Dt_RECORD_HdmapLocalLane::mutable_nextseg(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_HdmapLocalLane.NextSeg)
  return nextseg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >*
Dt_RECORD_HdmapLocalLane::mutable_nextseg() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_HdmapLocalLane.NextSeg)
  return &nextseg_;
}
inline const ::socket_all::Dt_RECORD_PlanSeg& Dt_RECORD_HdmapLocalLane::_internal_nextseg(int index) const {
  return nextseg_.Get(index);
}
inline const ::socket_all::Dt_RECORD_PlanSeg& Dt_RECORD_HdmapLocalLane::nextseg(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_HdmapLocalLane.NextSeg)
  return _internal_nextseg(index);
}
inline ::socket_all::Dt_RECORD_PlanSeg* Dt_RECORD_HdmapLocalLane::_internal_add_nextseg() {
  return nextseg_.Add();
}
inline ::socket_all::Dt_RECORD_PlanSeg* Dt_RECORD_HdmapLocalLane::add_nextseg() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_HdmapLocalLane.NextSeg)
  return _internal_add_nextseg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_PlanSeg >&
Dt_RECORD_HdmapLocalLane::nextseg() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_HdmapLocalLane.NextSeg)
  return nextseg_;
}

// -------------------------------------------------------------------

// Dt_RECORD_Crosswalk

// uint32 ID = 1;
inline void Dt_RECORD_Crosswalk::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Crosswalk::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Crosswalk::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Crosswalk.ID)
  return _internal_id();
}
inline void Dt_RECORD_Crosswalk::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_Crosswalk::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Crosswalk.ID)
}

// float distance = 2;
inline void Dt_RECORD_Crosswalk::clear_distance() {
  distance_ = 0;
}
inline float Dt_RECORD_Crosswalk::_internal_distance() const {
  return distance_;
}
inline float Dt_RECORD_Crosswalk::distance() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Crosswalk.distance)
  return _internal_distance();
}
inline void Dt_RECORD_Crosswalk::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void Dt_RECORD_Crosswalk::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Crosswalk.distance)
}

// -------------------------------------------------------------------

// DecisionToPC

// .socket_all.Dt_RECORD_LocalizationInfo my_localizationInfo = 1;
inline bool DecisionToPC::_internal_has_my_localizationinfo() const {
  return this != internal_default_instance() && my_localizationinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_localizationinfo() const {
  return _internal_has_my_localizationinfo();
}
inline void DecisionToPC::clear_my_localizationinfo() {
  if (GetArenaNoVirtual() == nullptr && my_localizationinfo_ != nullptr) {
    delete my_localizationinfo_;
  }
  my_localizationinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_LocalizationInfo& DecisionToPC::_internal_my_localizationinfo() const {
  const ::socket_all::Dt_RECORD_LocalizationInfo* p = my_localizationinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_LocalizationInfo*>(
      &::socket_all::_Dt_RECORD_LocalizationInfo_default_instance_);
}
inline const ::socket_all::Dt_RECORD_LocalizationInfo& DecisionToPC::my_localizationinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_localizationInfo)
  return _internal_my_localizationinfo();
}
inline ::socket_all::Dt_RECORD_LocalizationInfo* DecisionToPC::release_my_localizationinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_localizationInfo)
  
  ::socket_all::Dt_RECORD_LocalizationInfo* temp = my_localizationinfo_;
  my_localizationinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_LocalizationInfo* DecisionToPC::_internal_mutable_my_localizationinfo() {
  
  if (my_localizationinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_LocalizationInfo>(GetArenaNoVirtual());
    my_localizationinfo_ = p;
  }
  return my_localizationinfo_;
}
inline ::socket_all::Dt_RECORD_LocalizationInfo* DecisionToPC::mutable_my_localizationinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_localizationInfo)
  return _internal_mutable_my_localizationinfo();
}
inline void DecisionToPC::set_allocated_my_localizationinfo(::socket_all::Dt_RECORD_LocalizationInfo* my_localizationinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_localizationinfo_;
  }
  if (my_localizationinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_localizationinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_localizationinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_localizationinfo_ = my_localizationinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_localizationInfo)
}

// .socket_all.Dt_RECORD_TrajectoryPointsInfos my_trajectoryPointsInfo = 2;
inline bool DecisionToPC::_internal_has_my_trajectorypointsinfo() const {
  return this != internal_default_instance() && my_trajectorypointsinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_trajectorypointsinfo() const {
  return _internal_has_my_trajectorypointsinfo();
}
inline void DecisionToPC::clear_my_trajectorypointsinfo() {
  if (GetArenaNoVirtual() == nullptr && my_trajectorypointsinfo_ != nullptr) {
    delete my_trajectorypointsinfo_;
  }
  my_trajectorypointsinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_TrajectoryPointsInfos& DecisionToPC::_internal_my_trajectorypointsinfo() const {
  const ::socket_all::Dt_RECORD_TrajectoryPointsInfos* p = my_trajectorypointsinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_TrajectoryPointsInfos*>(
      &::socket_all::_Dt_RECORD_TrajectoryPointsInfos_default_instance_);
}
inline const ::socket_all::Dt_RECORD_TrajectoryPointsInfos& DecisionToPC::my_trajectorypointsinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_trajectoryPointsInfo)
  return _internal_my_trajectorypointsinfo();
}
inline ::socket_all::Dt_RECORD_TrajectoryPointsInfos* DecisionToPC::release_my_trajectorypointsinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_trajectoryPointsInfo)
  
  ::socket_all::Dt_RECORD_TrajectoryPointsInfos* temp = my_trajectorypointsinfo_;
  my_trajectorypointsinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_TrajectoryPointsInfos* DecisionToPC::_internal_mutable_my_trajectorypointsinfo() {
  
  if (my_trajectorypointsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_TrajectoryPointsInfos>(GetArenaNoVirtual());
    my_trajectorypointsinfo_ = p;
  }
  return my_trajectorypointsinfo_;
}
inline ::socket_all::Dt_RECORD_TrajectoryPointsInfos* DecisionToPC::mutable_my_trajectorypointsinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_trajectoryPointsInfo)
  return _internal_mutable_my_trajectorypointsinfo();
}
inline void DecisionToPC::set_allocated_my_trajectorypointsinfo(::socket_all::Dt_RECORD_TrajectoryPointsInfos* my_trajectorypointsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_trajectorypointsinfo_;
  }
  if (my_trajectorypointsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_trajectorypointsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_trajectorypointsinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_trajectorypointsinfo_ = my_trajectorypointsinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_trajectoryPointsInfo)
}

// .socket_all.Dt_RECORD_AccInfo my_vehicleInfo = 3;
inline bool DecisionToPC::_internal_has_my_vehicleinfo() const {
  return this != internal_default_instance() && my_vehicleinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_vehicleinfo() const {
  return _internal_has_my_vehicleinfo();
}
inline void DecisionToPC::clear_my_vehicleinfo() {
  if (GetArenaNoVirtual() == nullptr && my_vehicleinfo_ != nullptr) {
    delete my_vehicleinfo_;
  }
  my_vehicleinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_AccInfo& DecisionToPC::_internal_my_vehicleinfo() const {
  const ::socket_all::Dt_RECORD_AccInfo* p = my_vehicleinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_AccInfo*>(
      &::socket_all::_Dt_RECORD_AccInfo_default_instance_);
}
inline const ::socket_all::Dt_RECORD_AccInfo& DecisionToPC::my_vehicleinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_vehicleInfo)
  return _internal_my_vehicleinfo();
}
inline ::socket_all::Dt_RECORD_AccInfo* DecisionToPC::release_my_vehicleinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_vehicleInfo)
  
  ::socket_all::Dt_RECORD_AccInfo* temp = my_vehicleinfo_;
  my_vehicleinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_AccInfo* DecisionToPC::_internal_mutable_my_vehicleinfo() {
  
  if (my_vehicleinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_AccInfo>(GetArenaNoVirtual());
    my_vehicleinfo_ = p;
  }
  return my_vehicleinfo_;
}
inline ::socket_all::Dt_RECORD_AccInfo* DecisionToPC::mutable_my_vehicleinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_vehicleInfo)
  return _internal_mutable_my_vehicleinfo();
}
inline void DecisionToPC::set_allocated_my_vehicleinfo(::socket_all::Dt_RECORD_AccInfo* my_vehicleinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_vehicleinfo_;
  }
  if (my_vehicleinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_vehicleinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_vehicleinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_vehicleinfo_ = my_vehicleinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_vehicleInfo)
}

// .socket_all.Dt_RECORD_EnvModelInfos my_envModelInfo = 4;
inline bool DecisionToPC::_internal_has_my_envmodelinfo() const {
  return this != internal_default_instance() && my_envmodelinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_envmodelinfo() const {
  return _internal_has_my_envmodelinfo();
}
inline void DecisionToPC::clear_my_envmodelinfo() {
  if (GetArenaNoVirtual() == nullptr && my_envmodelinfo_ != nullptr) {
    delete my_envmodelinfo_;
  }
  my_envmodelinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_EnvModelInfos& DecisionToPC::_internal_my_envmodelinfo() const {
  const ::socket_all::Dt_RECORD_EnvModelInfos* p = my_envmodelinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_EnvModelInfos*>(
      &::socket_all::_Dt_RECORD_EnvModelInfos_default_instance_);
}
inline const ::socket_all::Dt_RECORD_EnvModelInfos& DecisionToPC::my_envmodelinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_envModelInfo)
  return _internal_my_envmodelinfo();
}
inline ::socket_all::Dt_RECORD_EnvModelInfos* DecisionToPC::release_my_envmodelinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_envModelInfo)
  
  ::socket_all::Dt_RECORD_EnvModelInfos* temp = my_envmodelinfo_;
  my_envmodelinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_EnvModelInfos* DecisionToPC::_internal_mutable_my_envmodelinfo() {
  
  if (my_envmodelinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_EnvModelInfos>(GetArenaNoVirtual());
    my_envmodelinfo_ = p;
  }
  return my_envmodelinfo_;
}
inline ::socket_all::Dt_RECORD_EnvModelInfos* DecisionToPC::mutable_my_envmodelinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_envModelInfo)
  return _internal_mutable_my_envmodelinfo();
}
inline void DecisionToPC::set_allocated_my_envmodelinfo(::socket_all::Dt_RECORD_EnvModelInfos* my_envmodelinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_envmodelinfo_;
  }
  if (my_envmodelinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_envmodelinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_envmodelinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_envmodelinfo_ = my_envmodelinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_envModelInfo)
}

// .socket_all.Dt_RECORD_HdmapInfo my_hdmapInfo = 5;
inline bool DecisionToPC::_internal_has_my_hdmapinfo() const {
  return this != internal_default_instance() && my_hdmapinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_hdmapinfo() const {
  return _internal_has_my_hdmapinfo();
}
inline void DecisionToPC::clear_my_hdmapinfo() {
  if (GetArenaNoVirtual() == nullptr && my_hdmapinfo_ != nullptr) {
    delete my_hdmapinfo_;
  }
  my_hdmapinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_HdmapInfo& DecisionToPC::_internal_my_hdmapinfo() const {
  const ::socket_all::Dt_RECORD_HdmapInfo* p = my_hdmapinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_HdmapInfo*>(
      &::socket_all::_Dt_RECORD_HdmapInfo_default_instance_);
}
inline const ::socket_all::Dt_RECORD_HdmapInfo& DecisionToPC::my_hdmapinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_hdmapInfo)
  return _internal_my_hdmapinfo();
}
inline ::socket_all::Dt_RECORD_HdmapInfo* DecisionToPC::release_my_hdmapinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_hdmapInfo)
  
  ::socket_all::Dt_RECORD_HdmapInfo* temp = my_hdmapinfo_;
  my_hdmapinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_HdmapInfo* DecisionToPC::_internal_mutable_my_hdmapinfo() {
  
  if (my_hdmapinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_HdmapInfo>(GetArenaNoVirtual());
    my_hdmapinfo_ = p;
  }
  return my_hdmapinfo_;
}
inline ::socket_all::Dt_RECORD_HdmapInfo* DecisionToPC::mutable_my_hdmapinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_hdmapInfo)
  return _internal_mutable_my_hdmapinfo();
}
inline void DecisionToPC::set_allocated_my_hdmapinfo(::socket_all::Dt_RECORD_HdmapInfo* my_hdmapinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_hdmapinfo_;
  }
  if (my_hdmapinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_hdmapinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_hdmapinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_hdmapinfo_ = my_hdmapinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_hdmapInfo)
}

// .socket_all.Dt_RECORD_HdmapFrontPLane my_hdmapFrontPLaneInfo = 6;
inline bool DecisionToPC::_internal_has_my_hdmapfrontplaneinfo() const {
  return this != internal_default_instance() && my_hdmapfrontplaneinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_hdmapfrontplaneinfo() const {
  return _internal_has_my_hdmapfrontplaneinfo();
}
inline void DecisionToPC::clear_my_hdmapfrontplaneinfo() {
  if (GetArenaNoVirtual() == nullptr && my_hdmapfrontplaneinfo_ != nullptr) {
    delete my_hdmapfrontplaneinfo_;
  }
  my_hdmapfrontplaneinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_HdmapFrontPLane& DecisionToPC::_internal_my_hdmapfrontplaneinfo() const {
  const ::socket_all::Dt_RECORD_HdmapFrontPLane* p = my_hdmapfrontplaneinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_HdmapFrontPLane*>(
      &::socket_all::_Dt_RECORD_HdmapFrontPLane_default_instance_);
}
inline const ::socket_all::Dt_RECORD_HdmapFrontPLane& DecisionToPC::my_hdmapfrontplaneinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_hdmapFrontPLaneInfo)
  return _internal_my_hdmapfrontplaneinfo();
}
inline ::socket_all::Dt_RECORD_HdmapFrontPLane* DecisionToPC::release_my_hdmapfrontplaneinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_hdmapFrontPLaneInfo)
  
  ::socket_all::Dt_RECORD_HdmapFrontPLane* temp = my_hdmapfrontplaneinfo_;
  my_hdmapfrontplaneinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_HdmapFrontPLane* DecisionToPC::_internal_mutable_my_hdmapfrontplaneinfo() {
  
  if (my_hdmapfrontplaneinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_HdmapFrontPLane>(GetArenaNoVirtual());
    my_hdmapfrontplaneinfo_ = p;
  }
  return my_hdmapfrontplaneinfo_;
}
inline ::socket_all::Dt_RECORD_HdmapFrontPLane* DecisionToPC::mutable_my_hdmapfrontplaneinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_hdmapFrontPLaneInfo)
  return _internal_mutable_my_hdmapfrontplaneinfo();
}
inline void DecisionToPC::set_allocated_my_hdmapfrontplaneinfo(::socket_all::Dt_RECORD_HdmapFrontPLane* my_hdmapfrontplaneinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_hdmapfrontplaneinfo_;
  }
  if (my_hdmapfrontplaneinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_hdmapfrontplaneinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_hdmapfrontplaneinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_hdmapfrontplaneinfo_ = my_hdmapfrontplaneinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_hdmapFrontPLaneInfo)
}

// .socket_all.Dt_RECORD_HdmapLocalLane my_hdmapLocalLaneInfo = 7;
inline bool DecisionToPC::_internal_has_my_hdmaplocallaneinfo() const {
  return this != internal_default_instance() && my_hdmaplocallaneinfo_ != nullptr;
}
inline bool DecisionToPC::has_my_hdmaplocallaneinfo() const {
  return _internal_has_my_hdmaplocallaneinfo();
}
inline void DecisionToPC::clear_my_hdmaplocallaneinfo() {
  if (GetArenaNoVirtual() == nullptr && my_hdmaplocallaneinfo_ != nullptr) {
    delete my_hdmaplocallaneinfo_;
  }
  my_hdmaplocallaneinfo_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_HdmapLocalLane& DecisionToPC::_internal_my_hdmaplocallaneinfo() const {
  const ::socket_all::Dt_RECORD_HdmapLocalLane* p = my_hdmaplocallaneinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_HdmapLocalLane*>(
      &::socket_all::_Dt_RECORD_HdmapLocalLane_default_instance_);
}
inline const ::socket_all::Dt_RECORD_HdmapLocalLane& DecisionToPC::my_hdmaplocallaneinfo() const {
  // @@protoc_insertion_point(field_get:socket_all.DecisionToPC.my_hdmapLocalLaneInfo)
  return _internal_my_hdmaplocallaneinfo();
}
inline ::socket_all::Dt_RECORD_HdmapLocalLane* DecisionToPC::release_my_hdmaplocallaneinfo() {
  // @@protoc_insertion_point(field_release:socket_all.DecisionToPC.my_hdmapLocalLaneInfo)
  
  ::socket_all::Dt_RECORD_HdmapLocalLane* temp = my_hdmaplocallaneinfo_;
  my_hdmaplocallaneinfo_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_HdmapLocalLane* DecisionToPC::_internal_mutable_my_hdmaplocallaneinfo() {
  
  if (my_hdmaplocallaneinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_HdmapLocalLane>(GetArenaNoVirtual());
    my_hdmaplocallaneinfo_ = p;
  }
  return my_hdmaplocallaneinfo_;
}
inline ::socket_all::Dt_RECORD_HdmapLocalLane* DecisionToPC::mutable_my_hdmaplocallaneinfo() {
  // @@protoc_insertion_point(field_mutable:socket_all.DecisionToPC.my_hdmapLocalLaneInfo)
  return _internal_mutable_my_hdmaplocallaneinfo();
}
inline void DecisionToPC::set_allocated_my_hdmaplocallaneinfo(::socket_all::Dt_RECORD_HdmapLocalLane* my_hdmaplocallaneinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete my_hdmaplocallaneinfo_;
  }
  if (my_hdmaplocallaneinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      my_hdmaplocallaneinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_hdmaplocallaneinfo, submessage_arena);
    }
    
  } else {
    
  }
  my_hdmaplocallaneinfo_ = my_hdmaplocallaneinfo;
  // @@protoc_insertion_point(field_set_allocated:socket_all.DecisionToPC.my_hdmapLocalLaneInfo)
}

// -------------------------------------------------------------------

// Dt_RECORD_LocalizationInfo

// uint64 time_stamp = 1;
inline void Dt_RECORD_LocalizationInfo::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dt_RECORD_LocalizationInfo::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dt_RECORD_LocalizationInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.time_stamp)
  return _internal_time_stamp();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.time_stamp)
}

// .socket_all.Dt_RECORD_LocalizationResult LocalizationResult = 2;
inline bool Dt_RECORD_LocalizationInfo::_internal_has_localizationresult() const {
  return this != internal_default_instance() && localizationresult_ != nullptr;
}
inline bool Dt_RECORD_LocalizationInfo::has_localizationresult() const {
  return _internal_has_localizationresult();
}
inline void Dt_RECORD_LocalizationInfo::clear_localizationresult() {
  if (GetArenaNoVirtual() == nullptr && localizationresult_ != nullptr) {
    delete localizationresult_;
  }
  localizationresult_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_LocalizationResult& Dt_RECORD_LocalizationInfo::_internal_localizationresult() const {
  const ::socket_all::Dt_RECORD_LocalizationResult* p = localizationresult_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_LocalizationResult*>(
      &::socket_all::_Dt_RECORD_LocalizationResult_default_instance_);
}
inline const ::socket_all::Dt_RECORD_LocalizationResult& Dt_RECORD_LocalizationInfo::localizationresult() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.LocalizationResult)
  return _internal_localizationresult();
}
inline ::socket_all::Dt_RECORD_LocalizationResult* Dt_RECORD_LocalizationInfo::release_localizationresult() {
  // @@protoc_insertion_point(field_release:socket_all.Dt_RECORD_LocalizationInfo.LocalizationResult)
  
  ::socket_all::Dt_RECORD_LocalizationResult* temp = localizationresult_;
  localizationresult_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_LocalizationResult* Dt_RECORD_LocalizationInfo::_internal_mutable_localizationresult() {
  
  if (localizationresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_LocalizationResult>(GetArenaNoVirtual());
    localizationresult_ = p;
  }
  return localizationresult_;
}
inline ::socket_all::Dt_RECORD_LocalizationResult* Dt_RECORD_LocalizationInfo::mutable_localizationresult() {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_LocalizationInfo.LocalizationResult)
  return _internal_mutable_localizationresult();
}
inline void Dt_RECORD_LocalizationInfo::set_allocated_localizationresult(::socket_all::Dt_RECORD_LocalizationResult* localizationresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete localizationresult_;
  }
  if (localizationresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      localizationresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localizationresult, submessage_arena);
    }
    
  } else {
    
  }
  localizationresult_ = localizationresult;
  // @@protoc_insertion_point(field_set_allocated:socket_all.Dt_RECORD_LocalizationInfo.LocalizationResult)
}

// float Latitude = 3;
inline void Dt_RECORD_LocalizationInfo::clear_latitude() {
  latitude_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_latitude() const {
  return latitude_;
}
inline float Dt_RECORD_LocalizationInfo::latitude() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.Latitude)
  return _internal_latitude();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.Latitude)
}

// float Longitude = 4;
inline void Dt_RECORD_LocalizationInfo::clear_longitude() {
  longitude_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_longitude() const {
  return longitude_;
}
inline float Dt_RECORD_LocalizationInfo::longitude() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.Longitude)
  return _internal_longitude();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.Longitude)
}

// float yaw = 5;
inline void Dt_RECORD_LocalizationInfo::clear_yaw() {
  yaw_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_yaw() const {
  return yaw_;
}
inline float Dt_RECORD_LocalizationInfo::yaw() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.yaw)
  return _internal_yaw();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.yaw)
}

// float pitch = 6;
inline void Dt_RECORD_LocalizationInfo::clear_pitch() {
  pitch_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_pitch() const {
  return pitch_;
}
inline float Dt_RECORD_LocalizationInfo::pitch() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.pitch)
  return _internal_pitch();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.pitch)
}

// float roll = 7;
inline void Dt_RECORD_LocalizationInfo::clear_roll() {
  roll_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_roll() const {
  return roll_;
}
inline float Dt_RECORD_LocalizationInfo::roll() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.roll)
  return _internal_roll();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.roll)
}

// float yawrate = 8;
inline void Dt_RECORD_LocalizationInfo::clear_yawrate() {
  yawrate_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_yawrate() const {
  return yawrate_;
}
inline float Dt_RECORD_LocalizationInfo::yawrate() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.yawrate)
  return _internal_yawrate();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_yawrate(float value) {
  
  yawrate_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_yawrate(float value) {
  _internal_set_yawrate(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.yawrate)
}

// float a_lon = 9;
inline void Dt_RECORD_LocalizationInfo::clear_a_lon() {
  a_lon_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_a_lon() const {
  return a_lon_;
}
inline float Dt_RECORD_LocalizationInfo::a_lon() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.a_lon)
  return _internal_a_lon();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_a_lon(float value) {
  
  a_lon_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_a_lon(float value) {
  _internal_set_a_lon(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.a_lon)
}

// float a_lat = 10;
inline void Dt_RECORD_LocalizationInfo::clear_a_lat() {
  a_lat_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_a_lat() const {
  return a_lat_;
}
inline float Dt_RECORD_LocalizationInfo::a_lat() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.a_lat)
  return _internal_a_lat();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_a_lat(float value) {
  
  a_lat_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_a_lat(float value) {
  _internal_set_a_lat(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.a_lat)
}

// float v_lat = 11;
inline void Dt_RECORD_LocalizationInfo::clear_v_lat() {
  v_lat_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_v_lat() const {
  return v_lat_;
}
inline float Dt_RECORD_LocalizationInfo::v_lat() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.v_lat)
  return _internal_v_lat();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_v_lat(float value) {
  
  v_lat_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_v_lat(float value) {
  _internal_set_v_lat(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.v_lat)
}

// float v_lon = 12;
inline void Dt_RECORD_LocalizationInfo::clear_v_lon() {
  v_lon_ = 0;
}
inline float Dt_RECORD_LocalizationInfo::_internal_v_lon() const {
  return v_lon_;
}
inline float Dt_RECORD_LocalizationInfo::v_lon() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationInfo.v_lon)
  return _internal_v_lon();
}
inline void Dt_RECORD_LocalizationInfo::_internal_set_v_lon(float value) {
  
  v_lon_ = value;
}
inline void Dt_RECORD_LocalizationInfo::set_v_lon(float value) {
  _internal_set_v_lon(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationInfo.v_lon)
}

// -------------------------------------------------------------------

// Dt_RECORD_LocalizationResult

// bool valid = 1;
inline void Dt_RECORD_LocalizationResult::clear_valid() {
  valid_ = false;
}
inline bool Dt_RECORD_LocalizationResult::_internal_valid() const {
  return valid_;
}
inline bool Dt_RECORD_LocalizationResult::valid() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.valid)
  return _internal_valid();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.valid)
}

// float x = 2;
inline void Dt_RECORD_LocalizationResult::clear_x() {
  x_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_x() const {
  return x_;
}
inline float Dt_RECORD_LocalizationResult::x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.x)
  return _internal_x();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.x)
}

// float y = 3;
inline void Dt_RECORD_LocalizationResult::clear_y() {
  y_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_y() const {
  return y_;
}
inline float Dt_RECORD_LocalizationResult::y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.y)
  return _internal_y();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.y)
}

// float z = 4;
inline void Dt_RECORD_LocalizationResult::clear_z() {
  z_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_z() const {
  return z_;
}
inline float Dt_RECORD_LocalizationResult::z() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.z)
  return _internal_z();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.z)
}

// float qx = 5;
inline void Dt_RECORD_LocalizationResult::clear_qx() {
  qx_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_qx() const {
  return qx_;
}
inline float Dt_RECORD_LocalizationResult::qx() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.qx)
  return _internal_qx();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_qx(float value) {
  
  qx_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_qx(float value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.qx)
}

// float qy = 6;
inline void Dt_RECORD_LocalizationResult::clear_qy() {
  qy_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_qy() const {
  return qy_;
}
inline float Dt_RECORD_LocalizationResult::qy() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.qy)
  return _internal_qy();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_qy(float value) {
  
  qy_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_qy(float value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.qy)
}

// float qz = 7;
inline void Dt_RECORD_LocalizationResult::clear_qz() {
  qz_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_qz() const {
  return qz_;
}
inline float Dt_RECORD_LocalizationResult::qz() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.qz)
  return _internal_qz();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_qz(float value) {
  
  qz_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_qz(float value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.qz)
}

// float qw = 8;
inline void Dt_RECORD_LocalizationResult::clear_qw() {
  qw_ = 0;
}
inline float Dt_RECORD_LocalizationResult::_internal_qw() const {
  return qw_;
}
inline float Dt_RECORD_LocalizationResult::qw() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LocalizationResult.qw)
  return _internal_qw();
}
inline void Dt_RECORD_LocalizationResult::_internal_set_qw(float value) {
  
  qw_ = value;
}
inline void Dt_RECORD_LocalizationResult::set_qw(float value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LocalizationResult.qw)
}

// -------------------------------------------------------------------

// Dt_RECORD_TrajectoryPointsInfos

// float origin_yaw = 1;
inline void Dt_RECORD_TrajectoryPointsInfos::clear_origin_yaw() {
  origin_yaw_ = 0;
}
inline float Dt_RECORD_TrajectoryPointsInfos::_internal_origin_yaw() const {
  return origin_yaw_;
}
inline float Dt_RECORD_TrajectoryPointsInfos::origin_yaw() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.origin_yaw)
  return _internal_origin_yaw();
}
inline void Dt_RECORD_TrajectoryPointsInfos::_internal_set_origin_yaw(float value) {
  
  origin_yaw_ = value;
}
inline void Dt_RECORD_TrajectoryPointsInfos::set_origin_yaw(float value) {
  _internal_set_origin_yaw(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPointsInfos.origin_yaw)
}

// uint32 point_num = 2;
inline void Dt_RECORD_TrajectoryPointsInfos::clear_point_num() {
  point_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::_internal_point_num() const {
  return point_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::point_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.point_num)
  return _internal_point_num();
}
inline void Dt_RECORD_TrajectoryPointsInfos::_internal_set_point_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_num_ = value;
}
inline void Dt_RECORD_TrajectoryPointsInfos::set_point_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPointsInfos.point_num)
}

// uint32 Array_Length_Dummy_0 = 3;
inline void Dt_RECORD_TrajectoryPointsInfos::clear_array_length_dummy_0() {
  array_length_dummy_0_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::_internal_array_length_dummy_0() const {
  return array_length_dummy_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::array_length_dummy_0() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.Array_Length_Dummy_0)
  return _internal_array_length_dummy_0();
}
inline void Dt_RECORD_TrajectoryPointsInfos::_internal_set_array_length_dummy_0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  array_length_dummy_0_ = value;
}
inline void Dt_RECORD_TrajectoryPointsInfos::set_array_length_dummy_0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_array_length_dummy_0(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPointsInfos.Array_Length_Dummy_0)
}

// repeated .socket_all.Dt_RECORD_TrajectoryPoints TrajectoryPoints = 4;
inline int Dt_RECORD_TrajectoryPointsInfos::_internal_trajectorypoints_size() const {
  return trajectorypoints_.size();
}
inline int Dt_RECORD_TrajectoryPointsInfos::trajectorypoints_size() const {
  return _internal_trajectorypoints_size();
}
inline void Dt_RECORD_TrajectoryPointsInfos::clear_trajectorypoints() {
  trajectorypoints_.Clear();
}
inline ::socket_all::Dt_RECORD_TrajectoryPoints* Dt_RECORD_TrajectoryPointsInfos::mutable_trajectorypoints(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_TrajectoryPointsInfos.TrajectoryPoints)
  return trajectorypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrajectoryPoints >*
Dt_RECORD_TrajectoryPointsInfos::mutable_trajectorypoints() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_TrajectoryPointsInfos.TrajectoryPoints)
  return &trajectorypoints_;
}
inline const ::socket_all::Dt_RECORD_TrajectoryPoints& Dt_RECORD_TrajectoryPointsInfos::_internal_trajectorypoints(int index) const {
  return trajectorypoints_.Get(index);
}
inline const ::socket_all::Dt_RECORD_TrajectoryPoints& Dt_RECORD_TrajectoryPointsInfos::trajectorypoints(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.TrajectoryPoints)
  return _internal_trajectorypoints(index);
}
inline ::socket_all::Dt_RECORD_TrajectoryPoints* Dt_RECORD_TrajectoryPointsInfos::_internal_add_trajectorypoints() {
  return trajectorypoints_.Add();
}
inline ::socket_all::Dt_RECORD_TrajectoryPoints* Dt_RECORD_TrajectoryPointsInfos::add_trajectorypoints() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_TrajectoryPointsInfos.TrajectoryPoints)
  return _internal_add_trajectorypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrajectoryPoints >&
Dt_RECORD_TrajectoryPointsInfos::trajectorypoints() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_TrajectoryPointsInfos.TrajectoryPoints)
  return trajectorypoints_;
}

// uint32 decision = 5;
inline void Dt_RECORD_TrajectoryPointsInfos::clear_decision() {
  decision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::_internal_decision() const {
  return decision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::decision() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.decision)
  return _internal_decision();
}
inline void Dt_RECORD_TrajectoryPointsInfos::_internal_set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  decision_ = value;
}
inline void Dt_RECORD_TrajectoryPointsInfos::set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decision(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPointsInfos.decision)
}

// bool hold = 6;
inline void Dt_RECORD_TrajectoryPointsInfos::clear_hold() {
  hold_ = false;
}
inline bool Dt_RECORD_TrajectoryPointsInfos::_internal_hold() const {
  return hold_;
}
inline bool Dt_RECORD_TrajectoryPointsInfos::hold() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.hold)
  return _internal_hold();
}
inline void Dt_RECORD_TrajectoryPointsInfos::_internal_set_hold(bool value) {
  
  hold_ = value;
}
inline void Dt_RECORD_TrajectoryPointsInfos::set_hold(bool value) {
  _internal_set_hold(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPointsInfos.hold)
}

// uint32 direction = 7;
inline void Dt_RECORD_TrajectoryPointsInfos::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPointsInfos::direction() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPointsInfos.direction)
  return _internal_direction();
}
inline void Dt_RECORD_TrajectoryPointsInfos::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void Dt_RECORD_TrajectoryPointsInfos::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPointsInfos.direction)
}

// -------------------------------------------------------------------

// Dt_RECORD_TrajectoryPoints

// float x = 1;
inline void Dt_RECORD_TrajectoryPoints::clear_x() {
  x_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_x() const {
  return x_;
}
inline float Dt_RECORD_TrajectoryPoints::x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.x)
  return _internal_x();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.x)
}

// float y = 2;
inline void Dt_RECORD_TrajectoryPoints::clear_y() {
  y_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_y() const {
  return y_;
}
inline float Dt_RECORD_TrajectoryPoints::y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.y)
  return _internal_y();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.y)
}

// float x_g = 3;
inline void Dt_RECORD_TrajectoryPoints::clear_x_g() {
  x_g_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_x_g() const {
  return x_g_;
}
inline float Dt_RECORD_TrajectoryPoints::x_g() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.x_g)
  return _internal_x_g();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_x_g(float value) {
  
  x_g_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_x_g(float value) {
  _internal_set_x_g(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.x_g)
}

// float y_g = 4;
inline void Dt_RECORD_TrajectoryPoints::clear_y_g() {
  y_g_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_y_g() const {
  return y_g_;
}
inline float Dt_RECORD_TrajectoryPoints::y_g() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.y_g)
  return _internal_y_g();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_y_g(float value) {
  
  y_g_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_y_g(float value) {
  _internal_set_y_g(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.y_g)
}

// float t = 5;
inline void Dt_RECORD_TrajectoryPoints::clear_t() {
  t_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_t() const {
  return t_;
}
inline float Dt_RECORD_TrajectoryPoints::t() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.t)
  return _internal_t();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_t(float value) {
  
  t_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.t)
}

// float lon = 6;
inline void Dt_RECORD_TrajectoryPoints::clear_lon() {
  lon_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_lon() const {
  return lon_;
}
inline float Dt_RECORD_TrajectoryPoints::lon() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.lon)
  return _internal_lon();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_lon(float value) {
  
  lon_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_lon(float value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.lon)
}

// float lat = 7;
inline void Dt_RECORD_TrajectoryPoints::clear_lat() {
  lat_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_lat() const {
  return lat_;
}
inline float Dt_RECORD_TrajectoryPoints::lat() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.lat)
  return _internal_lat();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_lat(float value) {
  
  lat_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_lat(float value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.lat)
}

// float theta = 8;
inline void Dt_RECORD_TrajectoryPoints::clear_theta() {
  theta_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_theta() const {
  return theta_;
}
inline float Dt_RECORD_TrajectoryPoints::theta() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.theta)
  return _internal_theta();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.theta)
}

// float v = 9;
inline void Dt_RECORD_TrajectoryPoints::clear_v() {
  v_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_v() const {
  return v_;
}
inline float Dt_RECORD_TrajectoryPoints::v() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.v)
  return _internal_v();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_v(float value) {
  
  v_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.v)
}

// float a = 10;
inline void Dt_RECORD_TrajectoryPoints::clear_a() {
  a_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_a() const {
  return a_;
}
inline float Dt_RECORD_TrajectoryPoints::a() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.a)
  return _internal_a();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_a(float value) {
  
  a_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.a)
}

// float kappa = 11;
inline void Dt_RECORD_TrajectoryPoints::clear_kappa() {
  kappa_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_kappa() const {
  return kappa_;
}
inline float Dt_RECORD_TrajectoryPoints::kappa() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.kappa)
  return _internal_kappa();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_kappa(float value) {
  
  kappa_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_kappa(float value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.kappa)
}

// float slope = 12;
inline void Dt_RECORD_TrajectoryPoints::clear_slope() {
  slope_ = 0;
}
inline float Dt_RECORD_TrajectoryPoints::_internal_slope() const {
  return slope_;
}
inline float Dt_RECORD_TrajectoryPoints::slope() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.slope)
  return _internal_slope();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_slope(float value) {
  
  slope_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_slope(float value) {
  _internal_set_slope(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.slope)
}

// uint32 lane_no = 13;
inline void Dt_RECORD_TrajectoryPoints::clear_lane_no() {
  lane_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPoints::_internal_lane_no() const {
  return lane_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPoints::lane_no() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.lane_no)
  return _internal_lane_no();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_no_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_no(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.lane_no)
}

// uint32 road_no = 14;
inline void Dt_RECORD_TrajectoryPoints::clear_road_no() {
  road_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPoints::_internal_road_no() const {
  return road_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrajectoryPoints::road_no() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrajectoryPoints.road_no)
  return _internal_road_no();
}
inline void Dt_RECORD_TrajectoryPoints::_internal_set_road_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_no_ = value;
}
inline void Dt_RECORD_TrajectoryPoints::set_road_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_no(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrajectoryPoints.road_no)
}

// -------------------------------------------------------------------

// Dt_RECORD_AccInfo

// uint32 ESP_0x318_time_stamp = 1;
inline void Dt_RECORD_AccInfo::clear_esp_0x318_time_stamp() {
  esp_0x318_time_stamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_AccInfo::_internal_esp_0x318_time_stamp() const {
  return esp_0x318_time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_AccInfo::esp_0x318_time_stamp() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_AccInfo.ESP_0x318_time_stamp)
  return _internal_esp_0x318_time_stamp();
}
inline void Dt_RECORD_AccInfo::_internal_set_esp_0x318_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  esp_0x318_time_stamp_ = value;
}
inline void Dt_RECORD_AccInfo::set_esp_0x318_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_esp_0x318_time_stamp(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_AccInfo.ESP_0x318_time_stamp)
}

// float ESP_VehSpd = 2;
inline void Dt_RECORD_AccInfo::clear_esp_vehspd() {
  esp_vehspd_ = 0;
}
inline float Dt_RECORD_AccInfo::_internal_esp_vehspd() const {
  return esp_vehspd_;
}
inline float Dt_RECORD_AccInfo::esp_vehspd() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_AccInfo.ESP_VehSpd)
  return _internal_esp_vehspd();
}
inline void Dt_RECORD_AccInfo::_internal_set_esp_vehspd(float value) {
  
  esp_vehspd_ = value;
}
inline void Dt_RECORD_AccInfo::set_esp_vehspd(float value) {
  _internal_set_esp_vehspd(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_AccInfo.ESP_VehSpd)
}

// uint32 YRS_0x242_time_stamp = 3;
inline void Dt_RECORD_AccInfo::clear_yrs_0x242_time_stamp() {
  yrs_0x242_time_stamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_AccInfo::_internal_yrs_0x242_time_stamp() const {
  return yrs_0x242_time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_AccInfo::yrs_0x242_time_stamp() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_AccInfo.YRS_0x242_time_stamp)
  return _internal_yrs_0x242_time_stamp();
}
inline void Dt_RECORD_AccInfo::_internal_set_yrs_0x242_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  yrs_0x242_time_stamp_ = value;
}
inline void Dt_RECORD_AccInfo::set_yrs_0x242_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_yrs_0x242_time_stamp(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_AccInfo.YRS_0x242_time_stamp)
}

// float YRS_LgtAcce = 4;
inline void Dt_RECORD_AccInfo::clear_yrs_lgtacce() {
  yrs_lgtacce_ = 0;
}
inline float Dt_RECORD_AccInfo::_internal_yrs_lgtacce() const {
  return yrs_lgtacce_;
}
inline float Dt_RECORD_AccInfo::yrs_lgtacce() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_AccInfo.YRS_LgtAcce)
  return _internal_yrs_lgtacce();
}
inline void Dt_RECORD_AccInfo::_internal_set_yrs_lgtacce(float value) {
  
  yrs_lgtacce_ = value;
}
inline void Dt_RECORD_AccInfo::set_yrs_lgtacce(float value) {
  _internal_set_yrs_lgtacce(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_AccInfo.YRS_LgtAcce)
}

// float YRS_LatAcce = 5;
inline void Dt_RECORD_AccInfo::clear_yrs_latacce() {
  yrs_latacce_ = 0;
}
inline float Dt_RECORD_AccInfo::_internal_yrs_latacce() const {
  return yrs_latacce_;
}
inline float Dt_RECORD_AccInfo::yrs_latacce() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_AccInfo.YRS_LatAcce)
  return _internal_yrs_latacce();
}
inline void Dt_RECORD_AccInfo::_internal_set_yrs_latacce(float value) {
  
  yrs_latacce_ = value;
}
inline void Dt_RECORD_AccInfo::set_yrs_latacce(float value) {
  _internal_set_yrs_latacce(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_AccInfo.YRS_LatAcce)
}

// float YRS_YawRate = 6;
inline void Dt_RECORD_AccInfo::clear_yrs_yawrate() {
  yrs_yawrate_ = 0;
}
inline float Dt_RECORD_AccInfo::_internal_yrs_yawrate() const {
  return yrs_yawrate_;
}
inline float Dt_RECORD_AccInfo::yrs_yawrate() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_AccInfo.YRS_YawRate)
  return _internal_yrs_yawrate();
}
inline void Dt_RECORD_AccInfo::_internal_set_yrs_yawrate(float value) {
  
  yrs_yawrate_ = value;
}
inline void Dt_RECORD_AccInfo::set_yrs_yawrate(float value) {
  _internal_set_yrs_yawrate(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_AccInfo.YRS_YawRate)
}

// -------------------------------------------------------------------

// Dt_RECORD_EnvModelInfos

// uint32 frame_index = 1;
inline void Dt_RECORD_EnvModelInfos::clear_frame_index() {
  frame_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::_internal_frame_index() const {
  return frame_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::frame_index() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.frame_index)
  return _internal_frame_index();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_frame_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_index_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_frame_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_index(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.frame_index)
}

// uint64 time_stamp = 2;
inline void Dt_RECORD_EnvModelInfos::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dt_RECORD_EnvModelInfos::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dt_RECORD_EnvModelInfos::time_stamp() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.time_stamp)
  return _internal_time_stamp();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.time_stamp)
}

// uint32 obstacle_num = 3;
inline void Dt_RECORD_EnvModelInfos::clear_obstacle_num() {
  obstacle_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::_internal_obstacle_num() const {
  return obstacle_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::obstacle_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.obstacle_num)
  return _internal_obstacle_num();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  obstacle_num_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_obstacle_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obstacle_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.obstacle_num)
}

// uint32 traffic_sign_num = 4;
inline void Dt_RECORD_EnvModelInfos::clear_traffic_sign_num() {
  traffic_sign_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::_internal_traffic_sign_num() const {
  return traffic_sign_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::traffic_sign_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.traffic_sign_num)
  return _internal_traffic_sign_num();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_traffic_sign_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  traffic_sign_num_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_traffic_sign_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_traffic_sign_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.traffic_sign_num)
}

// uint32 traffic_marking_num = 5;
inline void Dt_RECORD_EnvModelInfos::clear_traffic_marking_num() {
  traffic_marking_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::_internal_traffic_marking_num() const {
  return traffic_marking_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::traffic_marking_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.traffic_marking_num)
  return _internal_traffic_marking_num();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_traffic_marking_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  traffic_marking_num_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_traffic_marking_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_traffic_marking_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.traffic_marking_num)
}

// uint32 traffic_light_num = 6;
inline void Dt_RECORD_EnvModelInfos::clear_traffic_light_num() {
  traffic_light_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::_internal_traffic_light_num() const {
  return traffic_light_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::traffic_light_num() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.traffic_light_num)
  return _internal_traffic_light_num();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_traffic_light_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  traffic_light_num_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_traffic_light_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_traffic_light_num(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.traffic_light_num)
}

// uint32 resvered = 7;
inline void Dt_RECORD_EnvModelInfos::clear_resvered() {
  resvered_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::_internal_resvered() const {
  return resvered_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_EnvModelInfos::resvered() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.resvered)
  return _internal_resvered();
}
inline void Dt_RECORD_EnvModelInfos::_internal_set_resvered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  resvered_ = value;
}
inline void Dt_RECORD_EnvModelInfos::set_resvered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resvered(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_EnvModelInfos.resvered)
}

// .socket_all.Dt_RECORD_Lanes Lanes = 8;
inline bool Dt_RECORD_EnvModelInfos::_internal_has_lanes() const {
  return this != internal_default_instance() && lanes_ != nullptr;
}
inline bool Dt_RECORD_EnvModelInfos::has_lanes() const {
  return _internal_has_lanes();
}
inline void Dt_RECORD_EnvModelInfos::clear_lanes() {
  if (GetArenaNoVirtual() == nullptr && lanes_ != nullptr) {
    delete lanes_;
  }
  lanes_ = nullptr;
}
inline const ::socket_all::Dt_RECORD_Lanes& Dt_RECORD_EnvModelInfos::_internal_lanes() const {
  const ::socket_all::Dt_RECORD_Lanes* p = lanes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::socket_all::Dt_RECORD_Lanes*>(
      &::socket_all::_Dt_RECORD_Lanes_default_instance_);
}
inline const ::socket_all::Dt_RECORD_Lanes& Dt_RECORD_EnvModelInfos::lanes() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.Lanes)
  return _internal_lanes();
}
inline ::socket_all::Dt_RECORD_Lanes* Dt_RECORD_EnvModelInfos::release_lanes() {
  // @@protoc_insertion_point(field_release:socket_all.Dt_RECORD_EnvModelInfos.Lanes)
  
  ::socket_all::Dt_RECORD_Lanes* temp = lanes_;
  lanes_ = nullptr;
  return temp;
}
inline ::socket_all::Dt_RECORD_Lanes* Dt_RECORD_EnvModelInfos::_internal_mutable_lanes() {
  
  if (lanes_ == nullptr) {
    auto* p = CreateMaybeMessage<::socket_all::Dt_RECORD_Lanes>(GetArenaNoVirtual());
    lanes_ = p;
  }
  return lanes_;
}
inline ::socket_all::Dt_RECORD_Lanes* Dt_RECORD_EnvModelInfos::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_EnvModelInfos.Lanes)
  return _internal_mutable_lanes();
}
inline void Dt_RECORD_EnvModelInfos::set_allocated_lanes(::socket_all::Dt_RECORD_Lanes* lanes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lanes_;
  }
  if (lanes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lanes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lanes, submessage_arena);
    }
    
  } else {
    
  }
  lanes_ = lanes;
  // @@protoc_insertion_point(field_set_allocated:socket_all.Dt_RECORD_EnvModelInfos.Lanes)
}

// repeated .socket_all.Dt_RECORD_Obstacles Obstacles = 9;
inline int Dt_RECORD_EnvModelInfos::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int Dt_RECORD_EnvModelInfos::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void Dt_RECORD_EnvModelInfos::clear_obstacles() {
  obstacles_.Clear();
}
inline ::socket_all::Dt_RECORD_Obstacles* Dt_RECORD_EnvModelInfos::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_EnvModelInfos.Obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Obstacles >*
Dt_RECORD_EnvModelInfos::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_EnvModelInfos.Obstacles)
  return &obstacles_;
}
inline const ::socket_all::Dt_RECORD_Obstacles& Dt_RECORD_EnvModelInfos::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::socket_all::Dt_RECORD_Obstacles& Dt_RECORD_EnvModelInfos::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.Obstacles)
  return _internal_obstacles(index);
}
inline ::socket_all::Dt_RECORD_Obstacles* Dt_RECORD_EnvModelInfos::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::socket_all::Dt_RECORD_Obstacles* Dt_RECORD_EnvModelInfos::add_obstacles() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_EnvModelInfos.Obstacles)
  return _internal_add_obstacles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_Obstacles >&
Dt_RECORD_EnvModelInfos::obstacles() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_EnvModelInfos.Obstacles)
  return obstacles_;
}

// repeated .socket_all.Dt_RECORD_TrafficSigns TrafficSigns = 10;
inline int Dt_RECORD_EnvModelInfos::_internal_trafficsigns_size() const {
  return trafficsigns_.size();
}
inline int Dt_RECORD_EnvModelInfos::trafficsigns_size() const {
  return _internal_trafficsigns_size();
}
inline void Dt_RECORD_EnvModelInfos::clear_trafficsigns() {
  trafficsigns_.Clear();
}
inline ::socket_all::Dt_RECORD_TrafficSigns* Dt_RECORD_EnvModelInfos::mutable_trafficsigns(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_EnvModelInfos.TrafficSigns)
  return trafficsigns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficSigns >*
Dt_RECORD_EnvModelInfos::mutable_trafficsigns() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_EnvModelInfos.TrafficSigns)
  return &trafficsigns_;
}
inline const ::socket_all::Dt_RECORD_TrafficSigns& Dt_RECORD_EnvModelInfos::_internal_trafficsigns(int index) const {
  return trafficsigns_.Get(index);
}
inline const ::socket_all::Dt_RECORD_TrafficSigns& Dt_RECORD_EnvModelInfos::trafficsigns(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.TrafficSigns)
  return _internal_trafficsigns(index);
}
inline ::socket_all::Dt_RECORD_TrafficSigns* Dt_RECORD_EnvModelInfos::_internal_add_trafficsigns() {
  return trafficsigns_.Add();
}
inline ::socket_all::Dt_RECORD_TrafficSigns* Dt_RECORD_EnvModelInfos::add_trafficsigns() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_EnvModelInfos.TrafficSigns)
  return _internal_add_trafficsigns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficSigns >&
Dt_RECORD_EnvModelInfos::trafficsigns() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_EnvModelInfos.TrafficSigns)
  return trafficsigns_;
}

// repeated .socket_all.Dt_RECORD_TrafficMarkings TrafficMarkings = 11;
inline int Dt_RECORD_EnvModelInfos::_internal_trafficmarkings_size() const {
  return trafficmarkings_.size();
}
inline int Dt_RECORD_EnvModelInfos::trafficmarkings_size() const {
  return _internal_trafficmarkings_size();
}
inline void Dt_RECORD_EnvModelInfos::clear_trafficmarkings() {
  trafficmarkings_.Clear();
}
inline ::socket_all::Dt_RECORD_TrafficMarkings* Dt_RECORD_EnvModelInfos::mutable_trafficmarkings(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_EnvModelInfos.TrafficMarkings)
  return trafficmarkings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficMarkings >*
Dt_RECORD_EnvModelInfos::mutable_trafficmarkings() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_EnvModelInfos.TrafficMarkings)
  return &trafficmarkings_;
}
inline const ::socket_all::Dt_RECORD_TrafficMarkings& Dt_RECORD_EnvModelInfos::_internal_trafficmarkings(int index) const {
  return trafficmarkings_.Get(index);
}
inline const ::socket_all::Dt_RECORD_TrafficMarkings& Dt_RECORD_EnvModelInfos::trafficmarkings(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.TrafficMarkings)
  return _internal_trafficmarkings(index);
}
inline ::socket_all::Dt_RECORD_TrafficMarkings* Dt_RECORD_EnvModelInfos::_internal_add_trafficmarkings() {
  return trafficmarkings_.Add();
}
inline ::socket_all::Dt_RECORD_TrafficMarkings* Dt_RECORD_EnvModelInfos::add_trafficmarkings() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_EnvModelInfos.TrafficMarkings)
  return _internal_add_trafficmarkings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficMarkings >&
Dt_RECORD_EnvModelInfos::trafficmarkings() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_EnvModelInfos.TrafficMarkings)
  return trafficmarkings_;
}

// repeated .socket_all.Dt_RECORD_TrafficLights TrafficLights = 12;
inline int Dt_RECORD_EnvModelInfos::_internal_trafficlights_size() const {
  return trafficlights_.size();
}
inline int Dt_RECORD_EnvModelInfos::trafficlights_size() const {
  return _internal_trafficlights_size();
}
inline void Dt_RECORD_EnvModelInfos::clear_trafficlights() {
  trafficlights_.Clear();
}
inline ::socket_all::Dt_RECORD_TrafficLights* Dt_RECORD_EnvModelInfos::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_EnvModelInfos.TrafficLights)
  return trafficlights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficLights >*
Dt_RECORD_EnvModelInfos::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_EnvModelInfos.TrafficLights)
  return &trafficlights_;
}
inline const ::socket_all::Dt_RECORD_TrafficLights& Dt_RECORD_EnvModelInfos::_internal_trafficlights(int index) const {
  return trafficlights_.Get(index);
}
inline const ::socket_all::Dt_RECORD_TrafficLights& Dt_RECORD_EnvModelInfos::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.TrafficLights)
  return _internal_trafficlights(index);
}
inline ::socket_all::Dt_RECORD_TrafficLights* Dt_RECORD_EnvModelInfos::_internal_add_trafficlights() {
  return trafficlights_.Add();
}
inline ::socket_all::Dt_RECORD_TrafficLights* Dt_RECORD_EnvModelInfos::add_trafficlights() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_EnvModelInfos.TrafficLights)
  return _internal_add_trafficlights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_TrafficLights >&
Dt_RECORD_EnvModelInfos::trafficlights() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_EnvModelInfos.TrafficLights)
  return trafficlights_;
}

// repeated .socket_all.Dt_ARRAY_200_GridInfoX ObstacleGridMap = 13;
inline int Dt_RECORD_EnvModelInfos::_internal_obstaclegridmap_size() const {
  return obstaclegridmap_.size();
}
inline int Dt_RECORD_EnvModelInfos::obstaclegridmap_size() const {
  return _internal_obstaclegridmap_size();
}
inline void Dt_RECORD_EnvModelInfos::clear_obstaclegridmap() {
  obstaclegridmap_.Clear();
}
inline ::socket_all::Dt_ARRAY_200_GridInfoX* Dt_RECORD_EnvModelInfos::mutable_obstaclegridmap(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_EnvModelInfos.ObstacleGridMap)
  return obstaclegridmap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_ARRAY_200_GridInfoX >*
Dt_RECORD_EnvModelInfos::mutable_obstaclegridmap() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_EnvModelInfos.ObstacleGridMap)
  return &obstaclegridmap_;
}
inline const ::socket_all::Dt_ARRAY_200_GridInfoX& Dt_RECORD_EnvModelInfos::_internal_obstaclegridmap(int index) const {
  return obstaclegridmap_.Get(index);
}
inline const ::socket_all::Dt_ARRAY_200_GridInfoX& Dt_RECORD_EnvModelInfos::obstaclegridmap(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_EnvModelInfos.ObstacleGridMap)
  return _internal_obstaclegridmap(index);
}
inline ::socket_all::Dt_ARRAY_200_GridInfoX* Dt_RECORD_EnvModelInfos::_internal_add_obstaclegridmap() {
  return obstaclegridmap_.Add();
}
inline ::socket_all::Dt_ARRAY_200_GridInfoX* Dt_RECORD_EnvModelInfos::add_obstaclegridmap() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_EnvModelInfos.ObstacleGridMap)
  return _internal_add_obstaclegridmap();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_ARRAY_200_GridInfoX >&
Dt_RECORD_EnvModelInfos::obstaclegridmap() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_EnvModelInfos.ObstacleGridMap)
  return obstaclegridmap_;
}

// -------------------------------------------------------------------

// Dt_RECORD_Lanes

// repeated .socket_all.Dt_RECORD_LaneLines LaneLines = 1;
inline int Dt_RECORD_Lanes::_internal_lanelines_size() const {
  return lanelines_.size();
}
inline int Dt_RECORD_Lanes::lanelines_size() const {
  return _internal_lanelines_size();
}
inline void Dt_RECORD_Lanes::clear_lanelines() {
  lanelines_.Clear();
}
inline ::socket_all::Dt_RECORD_LaneLines* Dt_RECORD_Lanes::mutable_lanelines(int index) {
  // @@protoc_insertion_point(field_mutable:socket_all.Dt_RECORD_Lanes.LaneLines)
  return lanelines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneLines >*
Dt_RECORD_Lanes::mutable_lanelines() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_RECORD_Lanes.LaneLines)
  return &lanelines_;
}
inline const ::socket_all::Dt_RECORD_LaneLines& Dt_RECORD_Lanes::_internal_lanelines(int index) const {
  return lanelines_.Get(index);
}
inline const ::socket_all::Dt_RECORD_LaneLines& Dt_RECORD_Lanes::lanelines(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Lanes.LaneLines)
  return _internal_lanelines(index);
}
inline ::socket_all::Dt_RECORD_LaneLines* Dt_RECORD_Lanes::_internal_add_lanelines() {
  return lanelines_.Add();
}
inline ::socket_all::Dt_RECORD_LaneLines* Dt_RECORD_Lanes::add_lanelines() {
  // @@protoc_insertion_point(field_add:socket_all.Dt_RECORD_Lanes.LaneLines)
  return _internal_add_lanelines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::socket_all::Dt_RECORD_LaneLines >&
Dt_RECORD_Lanes::lanelines() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_RECORD_Lanes.LaneLines)
  return lanelines_;
}

// float width = 2;
inline void Dt_RECORD_Lanes::clear_width() {
  width_ = 0;
}
inline float Dt_RECORD_Lanes::_internal_width() const {
  return width_;
}
inline float Dt_RECORD_Lanes::width() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Lanes.width)
  return _internal_width();
}
inline void Dt_RECORD_Lanes::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Dt_RECORD_Lanes::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Lanes.width)
}

// float left_lane_distance = 3;
inline void Dt_RECORD_Lanes::clear_left_lane_distance() {
  left_lane_distance_ = 0;
}
inline float Dt_RECORD_Lanes::_internal_left_lane_distance() const {
  return left_lane_distance_;
}
inline float Dt_RECORD_Lanes::left_lane_distance() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Lanes.left_lane_distance)
  return _internal_left_lane_distance();
}
inline void Dt_RECORD_Lanes::_internal_set_left_lane_distance(float value) {
  
  left_lane_distance_ = value;
}
inline void Dt_RECORD_Lanes::set_left_lane_distance(float value) {
  _internal_set_left_lane_distance(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Lanes.left_lane_distance)
}

// float right_lane_distance = 4;
inline void Dt_RECORD_Lanes::clear_right_lane_distance() {
  right_lane_distance_ = 0;
}
inline float Dt_RECORD_Lanes::_internal_right_lane_distance() const {
  return right_lane_distance_;
}
inline float Dt_RECORD_Lanes::right_lane_distance() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Lanes.right_lane_distance)
  return _internal_right_lane_distance();
}
inline void Dt_RECORD_Lanes::_internal_set_right_lane_distance(float value) {
  
  right_lane_distance_ = value;
}
inline void Dt_RECORD_Lanes::set_right_lane_distance(float value) {
  _internal_set_right_lane_distance(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Lanes.right_lane_distance)
}

// -------------------------------------------------------------------

// Dt_RECORD_LaneLines

// uint32 id = 1;
inline void Dt_RECORD_LaneLines::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.id)
  return _internal_id();
}
inline void Dt_RECORD_LaneLines::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_LaneLines::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.id)
}

// uint32 confidence = 2;
inline void Dt_RECORD_LaneLines::clear_confidence() {
  confidence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::confidence() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.confidence)
  return _internal_confidence();
}
inline void Dt_RECORD_LaneLines::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confidence_ = value;
}
inline void Dt_RECORD_LaneLines::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.confidence)
}

// uint32 type = 3;
inline void Dt_RECORD_LaneLines::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.type)
  return _internal_type();
}
inline void Dt_RECORD_LaneLines::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_LaneLines::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.type)
}

// uint32 color = 4;
inline void Dt_RECORD_LaneLines::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_LaneLines::color() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.color)
  return _internal_color();
}
inline void Dt_RECORD_LaneLines::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void Dt_RECORD_LaneLines::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.color)
}

// float line_width = 5;
inline void Dt_RECORD_LaneLines::clear_line_width() {
  line_width_ = 0;
}
inline float Dt_RECORD_LaneLines::_internal_line_width() const {
  return line_width_;
}
inline float Dt_RECORD_LaneLines::line_width() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.line_width)
  return _internal_line_width();
}
inline void Dt_RECORD_LaneLines::_internal_set_line_width(float value) {
  
  line_width_ = value;
}
inline void Dt_RECORD_LaneLines::set_line_width(float value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.line_width)
}

// float length = 6;
inline void Dt_RECORD_LaneLines::clear_length() {
  length_ = 0;
}
inline float Dt_RECORD_LaneLines::_internal_length() const {
  return length_;
}
inline float Dt_RECORD_LaneLines::length() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.length)
  return _internal_length();
}
inline void Dt_RECORD_LaneLines::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Dt_RECORD_LaneLines::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.length)
}

// float lane_line_lineC0 = 7;
inline void Dt_RECORD_LaneLines::clear_lane_line_linec0() {
  lane_line_linec0_ = 0;
}
inline float Dt_RECORD_LaneLines::_internal_lane_line_linec0() const {
  return lane_line_linec0_;
}
inline float Dt_RECORD_LaneLines::lane_line_linec0() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.lane_line_lineC0)
  return _internal_lane_line_linec0();
}
inline void Dt_RECORD_LaneLines::_internal_set_lane_line_linec0(float value) {
  
  lane_line_linec0_ = value;
}
inline void Dt_RECORD_LaneLines::set_lane_line_linec0(float value) {
  _internal_set_lane_line_linec0(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.lane_line_lineC0)
}

// float lane_line_lineC1 = 8;
inline void Dt_RECORD_LaneLines::clear_lane_line_linec1() {
  lane_line_linec1_ = 0;
}
inline float Dt_RECORD_LaneLines::_internal_lane_line_linec1() const {
  return lane_line_linec1_;
}
inline float Dt_RECORD_LaneLines::lane_line_linec1() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.lane_line_lineC1)
  return _internal_lane_line_linec1();
}
inline void Dt_RECORD_LaneLines::_internal_set_lane_line_linec1(float value) {
  
  lane_line_linec1_ = value;
}
inline void Dt_RECORD_LaneLines::set_lane_line_linec1(float value) {
  _internal_set_lane_line_linec1(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.lane_line_lineC1)
}

// float lane_line_lineC2 = 9;
inline void Dt_RECORD_LaneLines::clear_lane_line_linec2() {
  lane_line_linec2_ = 0;
}
inline float Dt_RECORD_LaneLines::_internal_lane_line_linec2() const {
  return lane_line_linec2_;
}
inline float Dt_RECORD_LaneLines::lane_line_linec2() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.lane_line_lineC2)
  return _internal_lane_line_linec2();
}
inline void Dt_RECORD_LaneLines::_internal_set_lane_line_linec2(float value) {
  
  lane_line_linec2_ = value;
}
inline void Dt_RECORD_LaneLines::set_lane_line_linec2(float value) {
  _internal_set_lane_line_linec2(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.lane_line_lineC2)
}

// float lane_line_lineC3 = 10;
inline void Dt_RECORD_LaneLines::clear_lane_line_linec3() {
  lane_line_linec3_ = 0;
}
inline float Dt_RECORD_LaneLines::_internal_lane_line_linec3() const {
  return lane_line_linec3_;
}
inline float Dt_RECORD_LaneLines::lane_line_linec3() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_LaneLines.lane_line_lineC3)
  return _internal_lane_line_linec3();
}
inline void Dt_RECORD_LaneLines::_internal_set_lane_line_linec3(float value) {
  
  lane_line_linec3_ = value;
}
inline void Dt_RECORD_LaneLines::set_lane_line_linec3(float value) {
  _internal_set_lane_line_linec3(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_LaneLines.lane_line_lineC3)
}

// -------------------------------------------------------------------

// Dt_RECORD_Obstacles

// uint32 id = 1;
inline void Dt_RECORD_Obstacles::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.id)
  return _internal_id();
}
inline void Dt_RECORD_Obstacles::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_Obstacles::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.id)
}

// uint32 type = 2;
inline void Dt_RECORD_Obstacles::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.type)
  return _internal_type();
}
inline void Dt_RECORD_Obstacles::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_Obstacles::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.type)
}

// uint32 confidence_state = 3;
inline void Dt_RECORD_Obstacles::clear_confidence_state() {
  confidence_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_confidence_state() const {
  return confidence_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::confidence_state() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.confidence_state)
  return _internal_confidence_state();
}
inline void Dt_RECORD_Obstacles::_internal_set_confidence_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confidence_state_ = value;
}
inline void Dt_RECORD_Obstacles::set_confidence_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence_state(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.confidence_state)
}

// uint32 state = 4;
inline void Dt_RECORD_Obstacles::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::state() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.state)
  return _internal_state();
}
inline void Dt_RECORD_Obstacles::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void Dt_RECORD_Obstacles::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.state)
}

// uint32 lane_no = 5;
inline void Dt_RECORD_Obstacles::clear_lane_no() {
  lane_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_lane_no() const {
  return lane_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::lane_no() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.lane_no)
  return _internal_lane_no();
}
inline void Dt_RECORD_Obstacles::_internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_no_ = value;
}
inline void Dt_RECORD_Obstacles::set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_no(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.lane_no)
}

// uint32 CIPV_flag = 6;
inline void Dt_RECORD_Obstacles::clear_cipv_flag() {
  cipv_flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_cipv_flag() const {
  return cipv_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::cipv_flag() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.CIPV_flag)
  return _internal_cipv_flag();
}
inline void Dt_RECORD_Obstacles::_internal_set_cipv_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cipv_flag_ = value;
}
inline void Dt_RECORD_Obstacles::set_cipv_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cipv_flag(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.CIPV_flag)
}

// uint32 valid_time = 7;
inline void Dt_RECORD_Obstacles::clear_valid_time() {
  valid_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_valid_time() const {
  return valid_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::valid_time() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.valid_time)
  return _internal_valid_time();
}
inline void Dt_RECORD_Obstacles::_internal_set_valid_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  valid_time_ = value;
}
inline void Dt_RECORD_Obstacles::set_valid_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_valid_time(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.valid_time)
}

// float pos_y = 8;
inline void Dt_RECORD_Obstacles::clear_pos_y() {
  pos_y_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_pos_y() const {
  return pos_y_;
}
inline float Dt_RECORD_Obstacles::pos_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.pos_y)
  return _internal_pos_y();
}
inline void Dt_RECORD_Obstacles::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Dt_RECORD_Obstacles::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.pos_y)
}

// float pos_x = 9;
inline void Dt_RECORD_Obstacles::clear_pos_x() {
  pos_x_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_pos_x() const {
  return pos_x_;
}
inline float Dt_RECORD_Obstacles::pos_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.pos_x)
  return _internal_pos_x();
}
inline void Dt_RECORD_Obstacles::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Dt_RECORD_Obstacles::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.pos_x)
}

// float rel_speed_y = 10;
inline void Dt_RECORD_Obstacles::clear_rel_speed_y() {
  rel_speed_y_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_rel_speed_y() const {
  return rel_speed_y_;
}
inline float Dt_RECORD_Obstacles::rel_speed_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.rel_speed_y)
  return _internal_rel_speed_y();
}
inline void Dt_RECORD_Obstacles::_internal_set_rel_speed_y(float value) {
  
  rel_speed_y_ = value;
}
inline void Dt_RECORD_Obstacles::set_rel_speed_y(float value) {
  _internal_set_rel_speed_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.rel_speed_y)
}

// float rel_speed_x = 11;
inline void Dt_RECORD_Obstacles::clear_rel_speed_x() {
  rel_speed_x_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_rel_speed_x() const {
  return rel_speed_x_;
}
inline float Dt_RECORD_Obstacles::rel_speed_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.rel_speed_x)
  return _internal_rel_speed_x();
}
inline void Dt_RECORD_Obstacles::_internal_set_rel_speed_x(float value) {
  
  rel_speed_x_ = value;
}
inline void Dt_RECORD_Obstacles::set_rel_speed_x(float value) {
  _internal_set_rel_speed_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.rel_speed_x)
}

// float rel_acc_y = 12;
inline void Dt_RECORD_Obstacles::clear_rel_acc_y() {
  rel_acc_y_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_rel_acc_y() const {
  return rel_acc_y_;
}
inline float Dt_RECORD_Obstacles::rel_acc_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.rel_acc_y)
  return _internal_rel_acc_y();
}
inline void Dt_RECORD_Obstacles::_internal_set_rel_acc_y(float value) {
  
  rel_acc_y_ = value;
}
inline void Dt_RECORD_Obstacles::set_rel_acc_y(float value) {
  _internal_set_rel_acc_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.rel_acc_y)
}

// float rel_acc_x = 13;
inline void Dt_RECORD_Obstacles::clear_rel_acc_x() {
  rel_acc_x_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_rel_acc_x() const {
  return rel_acc_x_;
}
inline float Dt_RECORD_Obstacles::rel_acc_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.rel_acc_x)
  return _internal_rel_acc_x();
}
inline void Dt_RECORD_Obstacles::_internal_set_rel_acc_x(float value) {
  
  rel_acc_x_ = value;
}
inline void Dt_RECORD_Obstacles::set_rel_acc_x(float value) {
  _internal_set_rel_acc_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.rel_acc_x)
}

// float abs_speed_y = 14;
inline void Dt_RECORD_Obstacles::clear_abs_speed_y() {
  abs_speed_y_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_abs_speed_y() const {
  return abs_speed_y_;
}
inline float Dt_RECORD_Obstacles::abs_speed_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.abs_speed_y)
  return _internal_abs_speed_y();
}
inline void Dt_RECORD_Obstacles::_internal_set_abs_speed_y(float value) {
  
  abs_speed_y_ = value;
}
inline void Dt_RECORD_Obstacles::set_abs_speed_y(float value) {
  _internal_set_abs_speed_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.abs_speed_y)
}

// float abs_speed_x = 15;
inline void Dt_RECORD_Obstacles::clear_abs_speed_x() {
  abs_speed_x_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_abs_speed_x() const {
  return abs_speed_x_;
}
inline float Dt_RECORD_Obstacles::abs_speed_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.abs_speed_x)
  return _internal_abs_speed_x();
}
inline void Dt_RECORD_Obstacles::_internal_set_abs_speed_x(float value) {
  
  abs_speed_x_ = value;
}
inline void Dt_RECORD_Obstacles::set_abs_speed_x(float value) {
  _internal_set_abs_speed_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.abs_speed_x)
}

// float abs_acc_y = 16;
inline void Dt_RECORD_Obstacles::clear_abs_acc_y() {
  abs_acc_y_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_abs_acc_y() const {
  return abs_acc_y_;
}
inline float Dt_RECORD_Obstacles::abs_acc_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.abs_acc_y)
  return _internal_abs_acc_y();
}
inline void Dt_RECORD_Obstacles::_internal_set_abs_acc_y(float value) {
  
  abs_acc_y_ = value;
}
inline void Dt_RECORD_Obstacles::set_abs_acc_y(float value) {
  _internal_set_abs_acc_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.abs_acc_y)
}

// float abs_acc_x = 17;
inline void Dt_RECORD_Obstacles::clear_abs_acc_x() {
  abs_acc_x_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_abs_acc_x() const {
  return abs_acc_x_;
}
inline float Dt_RECORD_Obstacles::abs_acc_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.abs_acc_x)
  return _internal_abs_acc_x();
}
inline void Dt_RECORD_Obstacles::_internal_set_abs_acc_x(float value) {
  
  abs_acc_x_ = value;
}
inline void Dt_RECORD_Obstacles::set_abs_acc_x(float value) {
  _internal_set_abs_acc_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.abs_acc_x)
}

// float heading = 18;
inline void Dt_RECORD_Obstacles::clear_heading() {
  heading_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_heading() const {
  return heading_;
}
inline float Dt_RECORD_Obstacles::heading() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.heading)
  return _internal_heading();
}
inline void Dt_RECORD_Obstacles::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void Dt_RECORD_Obstacles::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.heading)
}

// float length = 19;
inline void Dt_RECORD_Obstacles::clear_length() {
  length_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_length() const {
  return length_;
}
inline float Dt_RECORD_Obstacles::length() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.length)
  return _internal_length();
}
inline void Dt_RECORD_Obstacles::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Dt_RECORD_Obstacles::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.length)
}

// float width = 20;
inline void Dt_RECORD_Obstacles::clear_width() {
  width_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_width() const {
  return width_;
}
inline float Dt_RECORD_Obstacles::width() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.width)
  return _internal_width();
}
inline void Dt_RECORD_Obstacles::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Dt_RECORD_Obstacles::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.width)
}

// float height = 21;
inline void Dt_RECORD_Obstacles::clear_height() {
  height_ = 0;
}
inline float Dt_RECORD_Obstacles::_internal_height() const {
  return height_;
}
inline float Dt_RECORD_Obstacles::height() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.height)
  return _internal_height();
}
inline void Dt_RECORD_Obstacles::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Dt_RECORD_Obstacles::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.height)
}

// uint32 img_x = 22;
inline void Dt_RECORD_Obstacles::clear_img_x() {
  img_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_img_x() const {
  return img_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::img_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.img_x)
  return _internal_img_x();
}
inline void Dt_RECORD_Obstacles::_internal_set_img_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  img_x_ = value;
}
inline void Dt_RECORD_Obstacles::set_img_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.img_x)
}

// uint32 img_y = 23;
inline void Dt_RECORD_Obstacles::clear_img_y() {
  img_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_img_y() const {
  return img_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::img_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.img_y)
  return _internal_img_y();
}
inline void Dt_RECORD_Obstacles::_internal_set_img_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  img_y_ = value;
}
inline void Dt_RECORD_Obstacles::set_img_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.img_y)
}

// uint32 img_width = 24;
inline void Dt_RECORD_Obstacles::clear_img_width() {
  img_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_img_width() const {
  return img_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::img_width() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.img_width)
  return _internal_img_width();
}
inline void Dt_RECORD_Obstacles::_internal_set_img_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  img_width_ = value;
}
inline void Dt_RECORD_Obstacles::set_img_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_width(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.img_width)
}

// uint32 img_height = 25;
inline void Dt_RECORD_Obstacles::clear_img_height() {
  img_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::_internal_img_height() const {
  return img_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_Obstacles::img_height() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_Obstacles.img_height)
  return _internal_img_height();
}
inline void Dt_RECORD_Obstacles::_internal_set_img_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  img_height_ = value;
}
inline void Dt_RECORD_Obstacles::set_img_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_height(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_Obstacles.img_height)
}

// -------------------------------------------------------------------

// Dt_RECORD_TrafficSigns

// uint32 id = 1;
inline void Dt_RECORD_TrafficSigns::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficSigns::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficSigns::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficSigns.id)
  return _internal_id();
}
inline void Dt_RECORD_TrafficSigns::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_TrafficSigns::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficSigns.id)
}

// uint32 type = 2;
inline void Dt_RECORD_TrafficSigns::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficSigns::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficSigns::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficSigns.type)
  return _internal_type();
}
inline void Dt_RECORD_TrafficSigns::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_TrafficSigns::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficSigns.type)
}

// uint32 confidence = 3;
inline void Dt_RECORD_TrafficSigns::clear_confidence() {
  confidence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficSigns::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficSigns::confidence() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficSigns.confidence)
  return _internal_confidence();
}
inline void Dt_RECORD_TrafficSigns::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confidence_ = value;
}
inline void Dt_RECORD_TrafficSigns::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficSigns.confidence)
}

// float pos_y = 4;
inline void Dt_RECORD_TrafficSigns::clear_pos_y() {
  pos_y_ = 0;
}
inline float Dt_RECORD_TrafficSigns::_internal_pos_y() const {
  return pos_y_;
}
inline float Dt_RECORD_TrafficSigns::pos_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficSigns.pos_y)
  return _internal_pos_y();
}
inline void Dt_RECORD_TrafficSigns::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Dt_RECORD_TrafficSigns::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficSigns.pos_y)
}

// float pos_x = 5;
inline void Dt_RECORD_TrafficSigns::clear_pos_x() {
  pos_x_ = 0;
}
inline float Dt_RECORD_TrafficSigns::_internal_pos_x() const {
  return pos_x_;
}
inline float Dt_RECORD_TrafficSigns::pos_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficSigns.pos_x)
  return _internal_pos_x();
}
inline void Dt_RECORD_TrafficSigns::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Dt_RECORD_TrafficSigns::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficSigns.pos_x)
}

// float pos_z = 6;
inline void Dt_RECORD_TrafficSigns::clear_pos_z() {
  pos_z_ = 0;
}
inline float Dt_RECORD_TrafficSigns::_internal_pos_z() const {
  return pos_z_;
}
inline float Dt_RECORD_TrafficSigns::pos_z() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficSigns.pos_z)
  return _internal_pos_z();
}
inline void Dt_RECORD_TrafficSigns::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void Dt_RECORD_TrafficSigns::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficSigns.pos_z)
}

// -------------------------------------------------------------------

// Dt_RECORD_TrafficMarkings

// uint32 id = 1;
inline void Dt_RECORD_TrafficMarkings::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficMarkings.id)
  return _internal_id();
}
inline void Dt_RECORD_TrafficMarkings::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_TrafficMarkings::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficMarkings.id)
}

// uint32 type = 2;
inline void Dt_RECORD_TrafficMarkings::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficMarkings.type)
  return _internal_type();
}
inline void Dt_RECORD_TrafficMarkings::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_TrafficMarkings::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficMarkings.type)
}

// uint32 confidence = 3;
inline void Dt_RECORD_TrafficMarkings::clear_confidence() {
  confidence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::confidence() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficMarkings.confidence)
  return _internal_confidence();
}
inline void Dt_RECORD_TrafficMarkings::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confidence_ = value;
}
inline void Dt_RECORD_TrafficMarkings::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficMarkings.confidence)
}

// uint32 lane_no = 4;
inline void Dt_RECORD_TrafficMarkings::clear_lane_no() {
  lane_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::_internal_lane_no() const {
  return lane_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficMarkings::lane_no() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficMarkings.lane_no)
  return _internal_lane_no();
}
inline void Dt_RECORD_TrafficMarkings::_internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_no_ = value;
}
inline void Dt_RECORD_TrafficMarkings::set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_no(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficMarkings.lane_no)
}

// float pos_y = 5;
inline void Dt_RECORD_TrafficMarkings::clear_pos_y() {
  pos_y_ = 0;
}
inline float Dt_RECORD_TrafficMarkings::_internal_pos_y() const {
  return pos_y_;
}
inline float Dt_RECORD_TrafficMarkings::pos_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficMarkings.pos_y)
  return _internal_pos_y();
}
inline void Dt_RECORD_TrafficMarkings::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Dt_RECORD_TrafficMarkings::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficMarkings.pos_y)
}

// float pos_x = 6;
inline void Dt_RECORD_TrafficMarkings::clear_pos_x() {
  pos_x_ = 0;
}
inline float Dt_RECORD_TrafficMarkings::_internal_pos_x() const {
  return pos_x_;
}
inline float Dt_RECORD_TrafficMarkings::pos_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficMarkings.pos_x)
  return _internal_pos_x();
}
inline void Dt_RECORD_TrafficMarkings::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Dt_RECORD_TrafficMarkings::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficMarkings.pos_x)
}

// -------------------------------------------------------------------

// Dt_RECORD_TrafficLights

// uint32 id = 1;
inline void Dt_RECORD_TrafficLights::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::id() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.id)
  return _internal_id();
}
inline void Dt_RECORD_TrafficLights::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Dt_RECORD_TrafficLights::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.id)
}

// uint32 type = 2;
inline void Dt_RECORD_TrafficLights::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::type() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.type)
  return _internal_type();
}
inline void Dt_RECORD_TrafficLights::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Dt_RECORD_TrafficLights::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.type)
}

// uint32 confidence = 3;
inline void Dt_RECORD_TrafficLights::clear_confidence() {
  confidence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::confidence() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.confidence)
  return _internal_confidence();
}
inline void Dt_RECORD_TrafficLights::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confidence_ = value;
}
inline void Dt_RECORD_TrafficLights::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.confidence)
}

// float pos_y = 4;
inline void Dt_RECORD_TrafficLights::clear_pos_y() {
  pos_y_ = 0;
}
inline float Dt_RECORD_TrafficLights::_internal_pos_y() const {
  return pos_y_;
}
inline float Dt_RECORD_TrafficLights::pos_y() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.pos_y)
  return _internal_pos_y();
}
inline void Dt_RECORD_TrafficLights::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void Dt_RECORD_TrafficLights::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.pos_y)
}

// float pos_x = 5;
inline void Dt_RECORD_TrafficLights::clear_pos_x() {
  pos_x_ = 0;
}
inline float Dt_RECORD_TrafficLights::_internal_pos_x() const {
  return pos_x_;
}
inline float Dt_RECORD_TrafficLights::pos_x() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.pos_x)
  return _internal_pos_x();
}
inline void Dt_RECORD_TrafficLights::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Dt_RECORD_TrafficLights::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.pos_x)
}

// float pos_z = 6;
inline void Dt_RECORD_TrafficLights::clear_pos_z() {
  pos_z_ = 0;
}
inline float Dt_RECORD_TrafficLights::_internal_pos_z() const {
  return pos_z_;
}
inline float Dt_RECORD_TrafficLights::pos_z() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.pos_z)
  return _internal_pos_z();
}
inline void Dt_RECORD_TrafficLights::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void Dt_RECORD_TrafficLights::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.pos_z)
}

// uint32 state = 7;
inline void Dt_RECORD_TrafficLights::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::state() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.state)
  return _internal_state();
}
inline void Dt_RECORD_TrafficLights::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void Dt_RECORD_TrafficLights::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.state)
}

// uint32 lane_no = 8;
inline void Dt_RECORD_TrafficLights::clear_lane_no() {
  lane_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::_internal_lane_no() const {
  return lane_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_RECORD_TrafficLights::lane_no() const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_RECORD_TrafficLights.lane_no)
  return _internal_lane_no();
}
inline void Dt_RECORD_TrafficLights::_internal_set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_no_ = value;
}
inline void Dt_RECORD_TrafficLights::set_lane_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_no(value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_RECORD_TrafficLights.lane_no)
}

// -------------------------------------------------------------------

// Dt_ARRAY_200_GridInfoX

// repeated uint32 grid_node = 1;
inline int Dt_ARRAY_200_GridInfoX::_internal_grid_node_size() const {
  return grid_node_.size();
}
inline int Dt_ARRAY_200_GridInfoX::grid_node_size() const {
  return _internal_grid_node_size();
}
inline void Dt_ARRAY_200_GridInfoX::clear_grid_node() {
  grid_node_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_ARRAY_200_GridInfoX::_internal_grid_node(int index) const {
  return grid_node_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dt_ARRAY_200_GridInfoX::grid_node(int index) const {
  // @@protoc_insertion_point(field_get:socket_all.Dt_ARRAY_200_GridInfoX.grid_node)
  return _internal_grid_node(index);
}
inline void Dt_ARRAY_200_GridInfoX::set_grid_node(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  grid_node_.Set(index, value);
  // @@protoc_insertion_point(field_set:socket_all.Dt_ARRAY_200_GridInfoX.grid_node)
}
inline void Dt_ARRAY_200_GridInfoX::_internal_add_grid_node(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  grid_node_.Add(value);
}
inline void Dt_ARRAY_200_GridInfoX::add_grid_node(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_grid_node(value);
  // @@protoc_insertion_point(field_add:socket_all.Dt_ARRAY_200_GridInfoX.grid_node)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Dt_ARRAY_200_GridInfoX::_internal_grid_node() const {
  return grid_node_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Dt_ARRAY_200_GridInfoX::grid_node() const {
  // @@protoc_insertion_point(field_list:socket_all.Dt_ARRAY_200_GridInfoX.grid_node)
  return _internal_grid_node();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Dt_ARRAY_200_GridInfoX::_internal_mutable_grid_node() {
  return &grid_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Dt_ARRAY_200_GridInfoX::mutable_grid_node() {
  // @@protoc_insertion_point(field_mutable_list:socket_all.Dt_ARRAY_200_GridInfoX.grid_node)
  return _internal_mutable_grid_node();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace socket_all

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_socket_5fall_2eproto
