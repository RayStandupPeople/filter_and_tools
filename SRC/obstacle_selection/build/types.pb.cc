// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Frame_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDMapInfo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Locallization_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacle_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusMachine_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSts_types_2eproto;
namespace pb_types {
class LogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogFile> _instance;
} _LogFile_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class LocallizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Locallization> _instance;
} _Locallization_default_instance_;
class HDMapInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HDMapInfo> _instance;
} _HDMapInfo_default_instance_;
class VehicleStsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSts> _instance;
} _VehicleSts_default_instance_;
class StatusMachineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusMachine> _instance;
} _StatusMachine_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
}  // namespace pb_types
static void InitDefaultsscc_info_Frame_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_Frame_default_instance_;
    new (ptr) ::pb_types::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Frame_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Frame_types_2eproto}, {
      &scc_info_Obstacle_types_2eproto.base,
      &scc_info_Locallization_types_2eproto.base,
      &scc_info_HDMapInfo_types_2eproto.base,
      &scc_info_VehicleSts_types_2eproto.base,
      &scc_info_StatusMachine_types_2eproto.base,
      &scc_info_UserInfo_types_2eproto.base,}};

static void InitDefaultsscc_info_HDMapInfo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_HDMapInfo_default_instance_;
    new (ptr) ::pb_types::HDMapInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::HDMapInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDMapInfo_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HDMapInfo_types_2eproto}, {}};

static void InitDefaultsscc_info_Locallization_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_Locallization_default_instance_;
    new (ptr) ::pb_types::Locallization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::Locallization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Locallization_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Locallization_types_2eproto}, {}};

static void InitDefaultsscc_info_LogFile_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_LogFile_default_instance_;
    new (ptr) ::pb_types::LogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::LogFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogFile_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogFile_types_2eproto}, {
      &scc_info_Frame_types_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_Obstacle_default_instance_;
    new (ptr) ::pb_types::Obstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::Obstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacle_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Obstacle_types_2eproto}, {}};

static void InitDefaultsscc_info_StatusMachine_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_StatusMachine_default_instance_;
    new (ptr) ::pb_types::StatusMachine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::StatusMachine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusMachine_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusMachine_types_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_UserInfo_default_instance_;
    new (ptr) ::pb_types::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_types_2eproto}, {}};

static void InitDefaultsscc_info_VehicleSts_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_types::_VehicleSts_default_instance_;
    new (ptr) ::pb_types::VehicleSts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_types::VehicleSts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSts_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleSts_types_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_types_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::LogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::LogFile, frame_num_),
  PROTOBUF_FIELD_OFFSET(::pb_types::LogFile, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, id_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, obstacle_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, localization_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, hdmapinfo_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, vehiclests_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, statusmachine_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Frame, userinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::Locallization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::Locallization, lat_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Locallization, lon_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Locallization, latrest_x_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Locallization, lonrest_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::HDMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::HDMapInfo, x_),
  PROTOBUF_FIELD_OFFSET(::pb_types::HDMapInfo, y_),
  PROTOBUF_FIELD_OFFSET(::pb_types::HDMapInfo, onpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::VehicleSts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::VehicleSts, vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::pb_types::VehicleSts, steerwheel_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::StatusMachine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::StatusMachine, avp_req_),
  PROTOBUF_FIELD_OFFSET(::pb_types::StatusMachine, tbox_avpmodkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, id_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, type_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, pos_x_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, pos_y_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, rel_spd_x_),
  PROTOBUF_FIELD_OFFSET(::pb_types::Obstacle, rel_spd_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, obj_left_flag_),
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, obj_mid_flag_),
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, obj_right_flag_),
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, obj_left_s_l_),
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, obj_mid_s_m_),
  PROTOBUF_FIELD_OFFSET(::pb_types::UserInfo, obj_right_s_r_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_types::LogFile)},
  { 7, -1, sizeof(::pb_types::Frame)},
  { 19, -1, sizeof(::pb_types::Locallization)},
  { 28, -1, sizeof(::pb_types::HDMapInfo)},
  { 36, -1, sizeof(::pb_types::VehicleSts)},
  { 43, -1, sizeof(::pb_types::StatusMachine)},
  { 50, -1, sizeof(::pb_types::Obstacle)},
  { 61, -1, sizeof(::pb_types::UserInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_LogFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_Locallization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_HDMapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_VehicleSts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_StatusMachine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_Obstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_types::_UserInfo_default_instance_),
};

const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013types.proto\022\010pb_types\"<\n\007LogFile\022\021\n\tfr"
  "ame_num\030\001 \001(\005\022\036\n\005frame\030\002 \003(\0132\017.pb_types."
  "Frame\"\220\002\n\005Frame\022\n\n\002id\030\001 \001(\005\022$\n\010obstacle\030"
  "\002 \003(\0132\022.pb_types.Obstacle\022-\n\014localizatio"
  "n\030\003 \001(\0132\027.pb_types.Locallization\022&\n\thdma"
  "pinfo\030\004 \001(\0132\023.pb_types.HDMapInfo\022(\n\nvehi"
  "clests\030\005 \001(\0132\024.pb_types.VehicleSts\022.\n\rst"
  "atusmachine\030\006 \001(\0132\027.pb_types.StatusMachi"
  "ne\022$\n\010userinfo\030\007 \001(\0132\022.pb_types.UserInfo"
  "\"O\n\rLocallization\022\013\n\003lat\030\001 \001(\002\022\013\n\003lon\030\002 "
  "\001(\002\022\021\n\tlatRest_X\030\003 \001(\002\022\021\n\tlonRest_Y\030\004 \001("
  "\002\"1\n\tHDMapInfo\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\016\n\006"
  "onpath\030\003 \001(\010\"=\n\nVehicleSts\022\025\n\rvehicle_sp"
  "eed\030\001 \001(\002\022\030\n\020steerwheel_angle\030\002 \001(\002\"8\n\rS"
  "tatusMachine\022\017\n\007avp_req\030\001 \001(\005\022\026\n\016TBOX_AV"
  "PModKey\030\002 \001(\005\"h\n\010Obstacle\022\n\n\002id\030\001 \001(\005\022\014\n"
  "\004type\030\002 \001(\005\022\r\n\005pos_x\030\003 \001(\002\022\r\n\005pos_y\030\004 \001("
  "\002\022\021\n\trel_spd_x\030\005 \001(\002\022\021\n\trel_spd_y\030\006 \001(\002\""
  "\221\001\n\010UserInfo\022\025\n\robj_left_flag\030\001 \001(\010\022\024\n\014o"
  "bj_mid_flag\030\002 \001(\010\022\026\n\016obj_right_flag\030\003 \001("
  "\010\022\024\n\014obj_left_s_l\030\004 \001(\002\022\023\n\013obj_mid_s_m\030\005"
  " \001(\002\022\025\n\robj_right_s_r\030\006 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_types_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_types_2eproto_sccs[8] = {
  &scc_info_Frame_types_2eproto.base,
  &scc_info_HDMapInfo_types_2eproto.base,
  &scc_info_Locallization_types_2eproto.base,
  &scc_info_LogFile_types_2eproto.base,
  &scc_info_Obstacle_types_2eproto.base,
  &scc_info_StatusMachine_types_2eproto.base,
  &scc_info_UserInfo_types_2eproto.base,
  &scc_info_VehicleSts_types_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2eproto_once;
static bool descriptor_table_types_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto = {
  &descriptor_table_types_2eproto_initialized, descriptor_table_protodef_types_2eproto, "types.proto", 875,
  &descriptor_table_types_2eproto_once, descriptor_table_types_2eproto_sccs, descriptor_table_types_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_types_2eproto::offsets,
  file_level_metadata_types_2eproto, 8, file_level_enum_descriptors_types_2eproto, file_level_service_descriptors_types_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_types_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_types_2eproto)), true);
namespace pb_types {

// ===================================================================

void LogFile::InitAsDefaultInstance() {
}
class LogFile::_Internal {
 public:
};

LogFile::LogFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.LogFile)
}
LogFile::LogFile(const LogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      frame_(from.frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_num_ = from.frame_num_;
  // @@protoc_insertion_point(copy_constructor:pb_types.LogFile)
}

void LogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogFile_types_2eproto.base);
  frame_num_ = 0;
}

LogFile::~LogFile() {
  // @@protoc_insertion_point(destructor:pb_types.LogFile)
  SharedDtor();
}

void LogFile::SharedDtor() {
}

void LogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogFile& LogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogFile_types_2eproto.base);
  return *internal_default_instance();
}


void LogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  frame_num_ = 0;
  _internal_metadata_.Clear();
}

const char* LogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_types.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_num = 1;
  if (this->frame_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_num(), target);
  }

  // repeated .pb_types.Frame frame = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frame(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.LogFile)
  return target;
}

size_t LogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.LogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_types.Frame frame = 2;
  total_size += 1UL * this->_internal_frame_size();
  for (const auto& msg : this->frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frame_num = 1;
  if (this->frame_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const LogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.LogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.LogFile)
    MergeFrom(*source);
  }
}

void LogFile::MergeFrom(const LogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
  if (from.frame_num() != 0) {
    _internal_set_frame_num(from._internal_frame_num());
  }
}

void LogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogFile::CopyFrom(const LogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogFile::IsInitialized() const {
  return true;
}

void LogFile::InternalSwap(LogFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_.InternalSwap(&other->frame_);
  swap(frame_num_, other->frame_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::pb_types::_Frame_default_instance_._instance.get_mutable()->localization_ = const_cast< ::pb_types::Locallization*>(
      ::pb_types::Locallization::internal_default_instance());
  ::pb_types::_Frame_default_instance_._instance.get_mutable()->hdmapinfo_ = const_cast< ::pb_types::HDMapInfo*>(
      ::pb_types::HDMapInfo::internal_default_instance());
  ::pb_types::_Frame_default_instance_._instance.get_mutable()->vehiclests_ = const_cast< ::pb_types::VehicleSts*>(
      ::pb_types::VehicleSts::internal_default_instance());
  ::pb_types::_Frame_default_instance_._instance.get_mutable()->statusmachine_ = const_cast< ::pb_types::StatusMachine*>(
      ::pb_types::StatusMachine::internal_default_instance());
  ::pb_types::_Frame_default_instance_._instance.get_mutable()->userinfo_ = const_cast< ::pb_types::UserInfo*>(
      ::pb_types::UserInfo::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::pb_types::Locallization& localization(const Frame* msg);
  static const ::pb_types::HDMapInfo& hdmapinfo(const Frame* msg);
  static const ::pb_types::VehicleSts& vehiclests(const Frame* msg);
  static const ::pb_types::StatusMachine& statusmachine(const Frame* msg);
  static const ::pb_types::UserInfo& userinfo(const Frame* msg);
};

const ::pb_types::Locallization&
Frame::_Internal::localization(const Frame* msg) {
  return *msg->localization_;
}
const ::pb_types::HDMapInfo&
Frame::_Internal::hdmapinfo(const Frame* msg) {
  return *msg->hdmapinfo_;
}
const ::pb_types::VehicleSts&
Frame::_Internal::vehiclests(const Frame* msg) {
  return *msg->vehiclests_;
}
const ::pb_types::StatusMachine&
Frame::_Internal::statusmachine(const Frame* msg) {
  return *msg->statusmachine_;
}
const ::pb_types::UserInfo&
Frame::_Internal::userinfo(const Frame* msg) {
  return *msg->userinfo_;
}
Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      obstacle_(from.obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_localization()) {
    localization_ = new ::pb_types::Locallization(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  if (from._internal_has_hdmapinfo()) {
    hdmapinfo_ = new ::pb_types::HDMapInfo(*from.hdmapinfo_);
  } else {
    hdmapinfo_ = nullptr;
  }
  if (from._internal_has_vehiclests()) {
    vehiclests_ = new ::pb_types::VehicleSts(*from.vehiclests_);
  } else {
    vehiclests_ = nullptr;
  }
  if (from._internal_has_statusmachine()) {
    statusmachine_ = new ::pb_types::StatusMachine(*from.statusmachine_);
  } else {
    statusmachine_ = nullptr;
  }
  if (from._internal_has_userinfo()) {
    userinfo_ = new ::pb_types::UserInfo(*from.userinfo_);
  } else {
    userinfo_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb_types.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_types_2eproto.base);
  ::memset(&localization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&localization_)) + sizeof(id_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:pb_types.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete hdmapinfo_;
  if (this != internal_default_instance()) delete vehiclests_;
  if (this != internal_default_instance()) delete statusmachine_;
  if (this != internal_default_instance()) delete userinfo_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_types_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  if (GetArenaNoVirtual() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hdmapinfo_ != nullptr) {
    delete hdmapinfo_;
  }
  hdmapinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehiclests_ != nullptr) {
    delete vehiclests_;
  }
  vehiclests_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && statusmachine_ != nullptr) {
    delete statusmachine_;
  }
  statusmachine_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_types.Obstacle obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb_types.Locallization localization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_types.HDMapInfo hdmapinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdmapinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_types.VehicleSts vehiclests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehiclests(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_types.StatusMachine statusmachine = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusmachine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_types.UserInfo userinfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .pb_types.Obstacle obstacle = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_obstacle(i), target, stream);
  }

  // .pb_types.Locallization localization = 3;
  if (this->has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::localization(this), target, stream);
  }

  // .pb_types.HDMapInfo hdmapinfo = 4;
  if (this->has_hdmapinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hdmapinfo(this), target, stream);
  }

  // .pb_types.VehicleSts vehiclests = 5;
  if (this->has_vehiclests()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vehiclests(this), target, stream);
  }

  // .pb_types.StatusMachine statusmachine = 6;
  if (this->has_statusmachine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::statusmachine(this), target, stream);
  }

  // .pb_types.UserInfo userinfo = 7;
  if (this->has_userinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::userinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_types.Obstacle obstacle = 2;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_types.Locallization localization = 3;
  if (this->has_localization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localization_);
  }

  // .pb_types.HDMapInfo hdmapinfo = 4;
  if (this->has_hdmapinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdmapinfo_);
  }

  // .pb_types.VehicleSts vehiclests = 5;
  if (this->has_vehiclests()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehiclests_);
  }

  // .pb_types.StatusMachine statusmachine = 6;
  if (this->has_statusmachine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statusmachine_);
  }

  // .pb_types.UserInfo userinfo = 7;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userinfo_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  if (from.has_localization()) {
    _internal_mutable_localization()->::pb_types::Locallization::MergeFrom(from._internal_localization());
  }
  if (from.has_hdmapinfo()) {
    _internal_mutable_hdmapinfo()->::pb_types::HDMapInfo::MergeFrom(from._internal_hdmapinfo());
  }
  if (from.has_vehiclests()) {
    _internal_mutable_vehiclests()->::pb_types::VehicleSts::MergeFrom(from._internal_vehiclests());
  }
  if (from.has_statusmachine()) {
    _internal_mutable_statusmachine()->::pb_types::StatusMachine::MergeFrom(from._internal_statusmachine());
  }
  if (from.has_userinfo()) {
    _internal_mutable_userinfo()->::pb_types::UserInfo::MergeFrom(from._internal_userinfo());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obstacle_.InternalSwap(&other->obstacle_);
  swap(localization_, other->localization_);
  swap(hdmapinfo_, other->hdmapinfo_);
  swap(vehiclests_, other->vehiclests_);
  swap(statusmachine_, other->statusmachine_);
  swap(userinfo_, other->userinfo_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Locallization::InitAsDefaultInstance() {
}
class Locallization::_Internal {
 public:
};

Locallization::Locallization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.Locallization)
}
Locallization::Locallization(const Locallization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lonrest_y_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lonrest_y_));
  // @@protoc_insertion_point(copy_constructor:pb_types.Locallization)
}

void Locallization::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lonrest_y_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lonrest_y_));
}

Locallization::~Locallization() {
  // @@protoc_insertion_point(destructor:pb_types.Locallization)
  SharedDtor();
}

void Locallization::SharedDtor() {
}

void Locallization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Locallization& Locallization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Locallization_types_2eproto.base);
  return *internal_default_instance();
}


void Locallization::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.Locallization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lonrest_y_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lonrest_y_));
  _internal_metadata_.Clear();
}

const char* Locallization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latRest_X = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          latrest_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lonRest_Y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          lonrest_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Locallization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.Locallization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_lat(), target);
  }

  // float lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lon(), target);
  }

  // float latRest_X = 3;
  if (!(this->latrest_x() <= 0 && this->latrest_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_latrest_x(), target);
  }

  // float lonRest_Y = 4;
  if (!(this->lonrest_y() <= 0 && this->lonrest_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_lonrest_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.Locallization)
  return target;
}

size_t Locallization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.Locallization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float latRest_X = 3;
  if (!(this->latrest_x() <= 0 && this->latrest_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float lonRest_Y = 4;
  if (!(this->lonrest_y() <= 0 && this->lonrest_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locallization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.Locallization)
  GOOGLE_DCHECK_NE(&from, this);
  const Locallization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Locallization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.Locallization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.Locallization)
    MergeFrom(*source);
  }
}

void Locallization::MergeFrom(const Locallization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.Locallization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.latrest_x() <= 0 && from.latrest_x() >= 0)) {
    _internal_set_latrest_x(from._internal_latrest_x());
  }
  if (!(from.lonrest_y() <= 0 && from.lonrest_y() >= 0)) {
    _internal_set_lonrest_y(from._internal_lonrest_y());
  }
}

void Locallization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.Locallization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locallization::CopyFrom(const Locallization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.Locallization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locallization::IsInitialized() const {
  return true;
}

void Locallization::InternalSwap(Locallization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(latrest_x_, other->latrest_x_);
  swap(lonrest_y_, other->lonrest_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Locallization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HDMapInfo::InitAsDefaultInstance() {
}
class HDMapInfo::_Internal {
 public:
};

HDMapInfo::HDMapInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.HDMapInfo)
}
HDMapInfo::HDMapInfo(const HDMapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&onpath_) -
    reinterpret_cast<char*>(&x_)) + sizeof(onpath_));
  // @@protoc_insertion_point(copy_constructor:pb_types.HDMapInfo)
}

void HDMapInfo::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onpath_) -
      reinterpret_cast<char*>(&x_)) + sizeof(onpath_));
}

HDMapInfo::~HDMapInfo() {
  // @@protoc_insertion_point(destructor:pb_types.HDMapInfo)
  SharedDtor();
}

void HDMapInfo::SharedDtor() {
}

void HDMapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HDMapInfo& HDMapInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HDMapInfo_types_2eproto.base);
  return *internal_default_instance();
}


void HDMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.HDMapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onpath_) -
      reinterpret_cast<char*>(&x_)) + sizeof(onpath_));
  _internal_metadata_.Clear();
}

const char* HDMapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool onpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          onpath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HDMapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.HDMapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // bool onpath = 3;
  if (this->onpath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_onpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.HDMapInfo)
  return target;
}

size_t HDMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.HDMapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // bool onpath = 3;
  if (this->onpath() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HDMapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.HDMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HDMapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HDMapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.HDMapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.HDMapInfo)
    MergeFrom(*source);
  }
}

void HDMapInfo::MergeFrom(const HDMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.HDMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.onpath() != 0) {
    _internal_set_onpath(from._internal_onpath());
  }
}

void HDMapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.HDMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDMapInfo::CopyFrom(const HDMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.HDMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDMapInfo::IsInitialized() const {
  return true;
}

void HDMapInfo::InternalSwap(HDMapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(onpath_, other->onpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HDMapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleSts::InitAsDefaultInstance() {
}
class VehicleSts::_Internal {
 public:
};

VehicleSts::VehicleSts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.VehicleSts)
}
VehicleSts::VehicleSts(const VehicleSts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_speed_, &from.vehicle_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&steerwheel_angle_) -
    reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(steerwheel_angle_));
  // @@protoc_insertion_point(copy_constructor:pb_types.VehicleSts)
}

void VehicleSts::SharedCtor() {
  ::memset(&vehicle_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steerwheel_angle_) -
      reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(steerwheel_angle_));
}

VehicleSts::~VehicleSts() {
  // @@protoc_insertion_point(destructor:pb_types.VehicleSts)
  SharedDtor();
}

void VehicleSts::SharedDtor() {
}

void VehicleSts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleSts& VehicleSts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleSts_types_2eproto.base);
  return *internal_default_instance();
}


void VehicleSts::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.VehicleSts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steerwheel_angle_) -
      reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(steerwheel_angle_));
  _internal_metadata_.Clear();
}

const char* VehicleSts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float vehicle_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float steerwheel_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          steerwheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleSts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.VehicleSts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vehicle_speed = 1;
  if (!(this->vehicle_speed() <= 0 && this->vehicle_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vehicle_speed(), target);
  }

  // float steerwheel_angle = 2;
  if (!(this->steerwheel_angle() <= 0 && this->steerwheel_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_steerwheel_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.VehicleSts)
  return target;
}

size_t VehicleSts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.VehicleSts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float vehicle_speed = 1;
  if (!(this->vehicle_speed() <= 0 && this->vehicle_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float steerwheel_angle = 2;
  if (!(this->steerwheel_angle() <= 0 && this->steerwheel_angle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.VehicleSts)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleSts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.VehicleSts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.VehicleSts)
    MergeFrom(*source);
  }
}

void VehicleSts::MergeFrom(const VehicleSts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.VehicleSts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.vehicle_speed() <= 0 && from.vehicle_speed() >= 0)) {
    _internal_set_vehicle_speed(from._internal_vehicle_speed());
  }
  if (!(from.steerwheel_angle() <= 0 && from.steerwheel_angle() >= 0)) {
    _internal_set_steerwheel_angle(from._internal_steerwheel_angle());
  }
}

void VehicleSts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.VehicleSts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSts::CopyFrom(const VehicleSts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.VehicleSts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSts::IsInitialized() const {
  return true;
}

void VehicleSts::InternalSwap(VehicleSts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(steerwheel_angle_, other->steerwheel_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusMachine::InitAsDefaultInstance() {
}
class StatusMachine::_Internal {
 public:
};

StatusMachine::StatusMachine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.StatusMachine)
}
StatusMachine::StatusMachine(const StatusMachine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avp_req_, &from.avp_req_,
    static_cast<size_t>(reinterpret_cast<char*>(&tbox_avpmodkey_) -
    reinterpret_cast<char*>(&avp_req_)) + sizeof(tbox_avpmodkey_));
  // @@protoc_insertion_point(copy_constructor:pb_types.StatusMachine)
}

void StatusMachine::SharedCtor() {
  ::memset(&avp_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbox_avpmodkey_) -
      reinterpret_cast<char*>(&avp_req_)) + sizeof(tbox_avpmodkey_));
}

StatusMachine::~StatusMachine() {
  // @@protoc_insertion_point(destructor:pb_types.StatusMachine)
  SharedDtor();
}

void StatusMachine::SharedDtor() {
}

void StatusMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusMachine& StatusMachine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusMachine_types_2eproto.base);
  return *internal_default_instance();
}


void StatusMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.StatusMachine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avp_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbox_avpmodkey_) -
      reinterpret_cast<char*>(&avp_req_)) + sizeof(tbox_avpmodkey_));
  _internal_metadata_.Clear();
}

const char* StatusMachine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avp_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avp_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TBOX_AVPModKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tbox_avpmodkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusMachine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.StatusMachine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avp_req = 1;
  if (this->avp_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avp_req(), target);
  }

  // int32 TBOX_AVPModKey = 2;
  if (this->tbox_avpmodkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tbox_avpmodkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.StatusMachine)
  return target;
}

size_t StatusMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.StatusMachine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avp_req = 1;
  if (this->avp_req() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avp_req());
  }

  // int32 TBOX_AVPModKey = 2;
  if (this->tbox_avpmodkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tbox_avpmodkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusMachine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.StatusMachine)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusMachine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusMachine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.StatusMachine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.StatusMachine)
    MergeFrom(*source);
  }
}

void StatusMachine::MergeFrom(const StatusMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.StatusMachine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avp_req() != 0) {
    _internal_set_avp_req(from._internal_avp_req());
  }
  if (from.tbox_avpmodkey() != 0) {
    _internal_set_tbox_avpmodkey(from._internal_tbox_avpmodkey());
  }
}

void StatusMachine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.StatusMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMachine::CopyFrom(const StatusMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.StatusMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMachine::IsInitialized() const {
  return true;
}

void StatusMachine::InternalSwap(StatusMachine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avp_req_, other->avp_req_);
  swap(tbox_avpmodkey_, other->tbox_avpmodkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusMachine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
}
class Obstacle::_Internal {
 public:
};

Obstacle::Obstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rel_spd_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rel_spd_y_));
  // @@protoc_insertion_point(copy_constructor:pb_types.Obstacle)
}

void Obstacle::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_spd_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rel_spd_y_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:pb_types.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
}

void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_types_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_spd_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rel_spd_y_));
  _internal_metadata_.Clear();
}

const char* Obstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_spd_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rel_spd_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_spd_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          rel_spd_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // float pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_x(), target);
  }

  // float pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_y(), target);
  }

  // float rel_spd_x = 5;
  if (!(this->rel_spd_x() <= 0 && this->rel_spd_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rel_spd_x(), target);
  }

  // float rel_spd_y = 6;
  if (!(this->rel_spd_y() <= 0 && this->rel_spd_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rel_spd_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.Obstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_spd_x = 5;
  if (!(this->rel_spd_x() <= 0 && this->rel_spd_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_spd_y = 6;
  if (!(this->rel_spd_y() <= 0 && this->rel_spd_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.Obstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.rel_spd_x() <= 0 && from.rel_spd_x() >= 0)) {
    _internal_set_rel_spd_x(from._internal_rel_spd_x());
  }
  if (!(from.rel_spd_y() <= 0 && from.rel_spd_y() >= 0)) {
    _internal_set_rel_spd_y(from._internal_rel_spd_y());
  }
}

void Obstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(rel_spd_x_, other->rel_spd_x_);
  swap(rel_spd_y_, other->rel_spd_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_types.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_left_flag_, &from.obj_left_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_right_s_r_) -
    reinterpret_cast<char*>(&obj_left_flag_)) + sizeof(obj_right_s_r_));
  // @@protoc_insertion_point(copy_constructor:pb_types.UserInfo)
}

void UserInfo::SharedCtor() {
  ::memset(&obj_left_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_right_s_r_) -
      reinterpret_cast<char*>(&obj_left_flag_)) + sizeof(obj_right_s_r_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:pb_types.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_types_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_types.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obj_left_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_right_s_r_) -
      reinterpret_cast<char*>(&obj_left_flag_)) + sizeof(obj_right_s_r_));
  _internal_metadata_.Clear();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool obj_left_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          obj_left_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool obj_mid_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          obj_mid_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool obj_right_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          obj_right_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float obj_left_s_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          obj_left_s_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obj_mid_s_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          obj_mid_s_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obj_right_s_r = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          obj_right_s_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_types.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool obj_left_flag = 1;
  if (this->obj_left_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_obj_left_flag(), target);
  }

  // bool obj_mid_flag = 2;
  if (this->obj_mid_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_obj_mid_flag(), target);
  }

  // bool obj_right_flag = 3;
  if (this->obj_right_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_obj_right_flag(), target);
  }

  // float obj_left_s_l = 4;
  if (!(this->obj_left_s_l() <= 0 && this->obj_left_s_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_obj_left_s_l(), target);
  }

  // float obj_mid_s_m = 5;
  if (!(this->obj_mid_s_m() <= 0 && this->obj_mid_s_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_obj_mid_s_m(), target);
  }

  // float obj_right_s_r = 6;
  if (!(this->obj_right_s_r() <= 0 && this->obj_right_s_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_obj_right_s_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_types.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_types.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool obj_left_flag = 1;
  if (this->obj_left_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool obj_mid_flag = 2;
  if (this->obj_mid_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool obj_right_flag = 3;
  if (this->obj_right_flag() != 0) {
    total_size += 1 + 1;
  }

  // float obj_left_s_l = 4;
  if (!(this->obj_left_s_l() <= 0 && this->obj_left_s_l() >= 0)) {
    total_size += 1 + 4;
  }

  // float obj_mid_s_m = 5;
  if (!(this->obj_mid_s_m() <= 0 && this->obj_mid_s_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float obj_right_s_r = 6;
  if (!(this->obj_right_s_r() <= 0 && this->obj_right_s_r() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_types.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_types.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_types.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_types.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_left_flag() != 0) {
    _internal_set_obj_left_flag(from._internal_obj_left_flag());
  }
  if (from.obj_mid_flag() != 0) {
    _internal_set_obj_mid_flag(from._internal_obj_mid_flag());
  }
  if (from.obj_right_flag() != 0) {
    _internal_set_obj_right_flag(from._internal_obj_right_flag());
  }
  if (!(from.obj_left_s_l() <= 0 && from.obj_left_s_l() >= 0)) {
    _internal_set_obj_left_s_l(from._internal_obj_left_s_l());
  }
  if (!(from.obj_mid_s_m() <= 0 && from.obj_mid_s_m() >= 0)) {
    _internal_set_obj_mid_s_m(from._internal_obj_mid_s_m());
  }
  if (!(from.obj_right_s_r() <= 0 && from.obj_right_s_r() >= 0)) {
    _internal_set_obj_right_s_r(from._internal_obj_right_s_r());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_types.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_types.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obj_left_flag_, other->obj_left_flag_);
  swap(obj_mid_flag_, other->obj_mid_flag_);
  swap(obj_right_flag_, other->obj_right_flag_);
  swap(obj_left_s_l_, other->obj_left_s_l_);
  swap(obj_mid_s_m_, other->obj_mid_s_m_);
  swap(obj_right_s_r_, other->obj_right_s_r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_types
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_types::LogFile* Arena::CreateMaybeMessage< ::pb_types::LogFile >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::LogFile >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::Frame* Arena::CreateMaybeMessage< ::pb_types::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::Locallization* Arena::CreateMaybeMessage< ::pb_types::Locallization >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::Locallization >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::HDMapInfo* Arena::CreateMaybeMessage< ::pb_types::HDMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::HDMapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::VehicleSts* Arena::CreateMaybeMessage< ::pb_types::VehicleSts >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::VehicleSts >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::StatusMachine* Arena::CreateMaybeMessage< ::pb_types::StatusMachine >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::StatusMachine >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::Obstacle* Arena::CreateMaybeMessage< ::pb_types::Obstacle >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_types::UserInfo* Arena::CreateMaybeMessage< ::pb_types::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb_types::UserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
